
disp_check.elf:     file format elf32-littlenios2
disp_check.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00220020

Program Header:
    LOAD off    0x00001000 vaddr 0x00220000 paddr 0x00220000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00220020 paddr 0x00220020 align 2**12
         filesz 0x00001220 memsz 0x00001220 flags r-x
    LOAD off    0x00002240 vaddr 0x00221240 paddr 0x00221514 align 2**12
         filesz 0x000002d4 memsz 0x000002d4 flags rw-
    LOAD off    0x000027e8 vaddr 0x002217e8 paddr 0x002217e8 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00220000  00220000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         000011fc  00220020  00220020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  0022121c  0022121c  0000221c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rwdata       000002d4  00221240  00221514  00002240  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  4 .bss          00000010  002217e8  002217e8  000027e8  2**2
                  ALLOC, SMALL_DATA
  5 .comment      00000023  00000000  00000000  00002514  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000003b0  00000000  00000000  00002538  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000426e  00000000  00000000  000028e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001634  00000000  00000000  00006b56  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001a46  00000000  00000000  0000818a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000053c  00000000  00000000  00009bd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000fac  00000000  00000000  0000a10c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007fd  00000000  00000000  0000b0b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_alt_sim_info 00000010  00000000  00000000  0000b8b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000050  00000000  00000000  0000b8c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .thread_model 00000003  00000000  00000000  0000cc4d  2**0
                  CONTENTS, READONLY
 16 .cpu          00000004  00000000  00000000  0000cc50  2**0
                  CONTENTS, READONLY
 17 .qsys         00000001  00000000  00000000  0000cc54  2**0
                  CONTENTS, READONLY
 18 .simulation_enabled 00000001  00000000  00000000  0000cc55  2**0
                  CONTENTS, READONLY
 19 .stderr_dev   00000004  00000000  00000000  0000cc56  2**0
                  CONTENTS, READONLY
 20 .stdin_dev    00000004  00000000  00000000  0000cc5a  2**0
                  CONTENTS, READONLY
 21 .stdout_dev   00000004  00000000  00000000  0000cc5e  2**0
                  CONTENTS, READONLY
 22 .sopc_system_name 0000000e  00000000  00000000  0000cc62  2**0
                  CONTENTS, READONLY
 23 .quartus_project_dir 00000026  00000000  00000000  0000cc70  2**0
                  CONTENTS, READONLY
 24 .sopcinfo     00080843  00000000  00000000  0000cc96  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00220000 l    d  .entry	00000000 .entry
00220020 l    d  .text	00000000 .text
0022121c l    d  .rodata	00000000 .rodata
00221240 l    d  .rwdata	00000000 .rwdata
002217e8 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../disp_check_bsp//obj/HAL/src/crt0.o
00220058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 disp_check.c
00000000 l    df *ABS*	00000000 alt_load.c
0022019c l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
002202f0 l     F .text	00000038 alt_dev_reg
00221240 l     O .rwdata	0000002c jtag
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_close.c
002205d8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00220710 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0022073c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00220848 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
002209a0 l     F .text	00000050 alt_get_errno
002209f0 l     F .text	000000f0 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 impure.c
00221414 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
00220288 g     F .text	00000068 alt_main
00221514 g       *ABS*	00000000 __flash_rwdata_start
00000000  w      *UND*	00000000 __errno
00220194 g       .text	00000000 mem_write_word
00220000 g     F .entry	0000000c __reset
00220020 g       *ABS*	00000000 __flash_exceptions_start
002217f4 g     O .bss	00000004 errno
00180000 g       *ABS*	00000000 __alt_mem_rom
002217ec g     O .bss	00000004 alt_argv
002294f4 g       *ABS*	00000000 _gp
00221294 g     O .rwdata	00000180 alt_fd_list
00220cd8 g     F .text	00000090 alt_find_dev
00220928 g     F .text	00000078 alt_io_redirect
0022044c g     F .text	000000f4 altera_avalon_jtag_uart_read
00220000 g       *ABS*	00000000 __alt_mem_ram
00221504 g     O .rwdata	00000004 alt_max_fd
0022150c g     O .rwdata	00000004 _global_impure_ptr
002217f8 g       *ABS*	00000000 __bss_end
0022126c g     O .rwdata	00000028 alt_dev_null
002206f4 g     F .text	0000001c alt_dcache_flush_all
00221514 g       *ABS*	00000000 __ram_rwdata_end
002214fc g     O .rwdata	00000008 alt_dev_list
00221240 g       *ABS*	00000000 __ram_rodata_end
002217f8 g       *ABS*	00000000 end
00240000 g       *ABS*	00000000 __alt_stack_pointer
00220540 g     F .text	00000098 altera_avalon_jtag_uart_write
00220fe0 g     F .text	000001d8 __call_exitprocs
00220020 g     F .text	0000003c _start
0022035c g     F .text	00000030 alt_sys_init
00000000 g       *ABS*	00000000 __alt_mem_vram
002211b8 g     F .text	00000028 __mulsi3
00221240 g       *ABS*	00000000 __ram_rwdata_start
0022121c g       *ABS*	00000000 __ram_rodata_start
0022038c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00220e7c g     F .text	000000d4 alt_get_fd
00220f70 g     F .text	00000048 memcmp
002217f8 g       *ABS*	00000000 __alt_stack_base
00220d68 g     F .text	00000114 alt_find_file
0022078c g     F .text	000000a0 alt_dev_llist_insert
002217e8 g       *ABS*	00000000 __bss_start
0022005c g     F .text	00000138 main
002217f0 g     O .bss	00000004 alt_envp
002203ec g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00221508 g     O .rwdata	00000004 alt_errno
0022121c g       *ABS*	00000000 __flash_rodata_start
00220328 g     F .text	00000034 alt_irq_init
00220c38 g     F .text	00000080 alt_release_fd
00221510 g     O .rwdata	00000004 _impure_ptr
002217e8 g     O .bss	00000004 alt_argc
002214f4 g     O .rwdata	00000008 alt_fs_list
00220020 g       *ABS*	00000000 __ram_exceptions_start
00221514 g       *ABS*	00000000 _edata
002217f8 g       *ABS*	00000000 _end
00220020 g       *ABS*	00000000 __ram_exceptions_end
00220cb8 g     F .text	00000020 altera_nios2_qsys_irq_init
00220f50 g     F .text	00000020 exit
00240000 g       *ABS*	00000000 __alt_data_end
002211e0 g     F .text	0000003c _exit
00220fb8 g     F .text	00000028 strlen
00220ae0 g     F .text	00000158 open
0022082c g     F .text	0000001c alt_icache_flush_all
00220628 g     F .text	000000cc close
00220208 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

00220000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  220000:	004008b4 	movhi	at,34
    ori r1, r1, %lo(_start)
  220004:	08400814 	ori	at,at,32
    jmp r1
  220008:	0800683a 	jmp	at
	...

Disassembly of section .text:

00220020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  220020:	06c00934 	movhi	sp,36
    ori sp, sp, %lo(__alt_stack_pointer)
  220024:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  220028:	068008b4 	movhi	gp,34
    ori gp, gp, %lo(_gp)
  22002c:	d6a53d14 	ori	gp,gp,38132
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  220030:	008008b4 	movhi	r2,34
    ori r2, r2, %lo(__bss_start)
  220034:	1085fa14 	ori	r2,r2,6120

    movhi r3, %hi(__bss_end)
  220038:	00c008b4 	movhi	r3,34
    ori r3, r3, %lo(__bss_end)
  22003c:	18c5fe14 	ori	r3,r3,6136

    beq r2, r3, 1f
  220040:	10c00326 	beq	r2,r3,220050 <_start+0x30>

0:
    stw zero, (r2)
  220044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  220048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  22004c:	10fffd36 	bltu	r2,r3,220044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  220050:	02202080 	call	220208 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  220054:	02202880 	call	220288 <alt_main>

00220058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  220058:	003fff06 	br	220058 <alt_after_alt_main>

0022005c <main>:
#define RED 0x00000080
#define BLACK 0x00000000

extern mem_write_word(int address, int value);

int main (){
  22005c:	defffa04 	addi	sp,sp,-24
  220060:	dfc00515 	stw	ra,20(sp)
  220064:	df000415 	stw	fp,16(sp)
  220068:	df000404 	addi	fp,sp,16
    int r, c, color, address = VRAM_BASE;
  22006c:	e03fff15 	stw	zero,-4(fp)
    for (r = 0; r < N_ROWS; r++)
  220070:	e03ffc15 	stw	zero,-16(fp)
  220074:	00003e06 	br	220170 <main+0x114>
    {
        for (c = 0; c < N_COLS; c++)
  220078:	e03ffd15 	stw	zero,-12(fp)
  22007c:	00003306 	br	22014c <main+0xf0>
        {
            if (r == 0 || r == N_ROWS-1 || c == 0 || c == N_COLS - 1)
  220080:	e0bffc17 	ldw	r2,-16(fp)
  220084:	10000826 	beq	r2,zero,2200a8 <main+0x4c>
  220088:	e0bffc17 	ldw	r2,-16(fp)
  22008c:	108043e0 	cmpeqi	r2,r2,271
  220090:	1000051e 	bne	r2,zero,2200a8 <main+0x4c>
  220094:	e0bffd17 	ldw	r2,-12(fp)
  220098:	10000326 	beq	r2,zero,2200a8 <main+0x4c>
  22009c:	e0bffd17 	ldw	r2,-12(fp)
  2200a0:	108077d8 	cmpnei	r2,r2,479
  2200a4:	1000031e 	bne	r2,zero,2200b4 <main+0x58>
                color = RED;
  2200a8:	00802004 	movi	r2,128
  2200ac:	e0bffe15 	stw	r2,-8(fp)
  2200b0:	00001d06 	br	220128 <main+0xcc>
            else if (((r / CHECKERBOARD) % 2 && (c / CHECKERBOARD) % 2)
  2200b4:	e0bffc17 	ldw	r2,-16(fp)
  2200b8:	1000010e 	bge	r2,zero,2200c0 <main+0x64>
  2200bc:	108003c4 	addi	r2,r2,15
  2200c0:	1005d13a 	srai	r2,r2,4
  2200c4:	1080004c 	andi	r2,r2,1
  2200c8:	10000626 	beq	r2,zero,2200e4 <main+0x88>
  2200cc:	e0bffd17 	ldw	r2,-12(fp)
  2200d0:	1000010e 	bge	r2,zero,2200d8 <main+0x7c>
  2200d4:	108003c4 	addi	r2,r2,15
  2200d8:	1005d13a 	srai	r2,r2,4
  2200dc:	1080004c 	andi	r2,r2,1
  2200e0:	10000c1e 	bne	r2,zero,220114 <main+0xb8>
                   || (!((r / CHECKERBOARD) % 2) && !((c / CHECKERBOARD) % 2)))
  2200e4:	e0bffc17 	ldw	r2,-16(fp)
  2200e8:	1000010e 	bge	r2,zero,2200f0 <main+0x94>
  2200ec:	108003c4 	addi	r2,r2,15
  2200f0:	1005d13a 	srai	r2,r2,4
  2200f4:	1080004c 	andi	r2,r2,1
  2200f8:	1000091e 	bne	r2,zero,220120 <main+0xc4>
  2200fc:	e0bffd17 	ldw	r2,-12(fp)
  220100:	1000010e 	bge	r2,zero,220108 <main+0xac>
  220104:	108003c4 	addi	r2,r2,15
  220108:	1005d13a 	srai	r2,r2,4
  22010c:	1080004c 	andi	r2,r2,1
  220110:	1000031e 	bne	r2,zero,220120 <main+0xc4>
                color = BLUE;
  220114:	00802834 	movhi	r2,160
  220118:	e0bffe15 	stw	r2,-8(fp)
  22011c:	00000206 	br	220128 <main+0xcc>
            else
                color = GREEN;
  220120:	00a00014 	movui	r2,32768
  220124:	e0bffe15 	stw	r2,-8(fp)
            mem_write_word(address, color);
  220128:	e13fff17 	ldw	r4,-4(fp)
  22012c:	e17ffe17 	ldw	r5,-8(fp)
  220130:	02201940 	call	220194 <mem_write_word>
            address += WORD_SIZE;
  220134:	e0bfff17 	ldw	r2,-4(fp)
  220138:	10800104 	addi	r2,r2,4
  22013c:	e0bfff15 	stw	r2,-4(fp)

int main (){
    int r, c, color, address = VRAM_BASE;
    for (r = 0; r < N_ROWS; r++)
    {
        for (c = 0; c < N_COLS; c++)
  220140:	e0bffd17 	ldw	r2,-12(fp)
  220144:	10800044 	addi	r2,r2,1
  220148:	e0bffd15 	stw	r2,-12(fp)
  22014c:	e0bffd17 	ldw	r2,-12(fp)
  220150:	10807810 	cmplti	r2,r2,480
  220154:	103fca1e 	bne	r2,zero,220080 <main+0x24>
            else
                color = GREEN;
            mem_write_word(address, color);
            address += WORD_SIZE;
        }
        address += ROW_SIZE*WORD_SIZE - N_COLS * WORD_SIZE;
  220158:	e0bfff17 	ldw	r2,-4(fp)
  22015c:	10802004 	addi	r2,r2,128
  220160:	e0bfff15 	stw	r2,-4(fp)

extern mem_write_word(int address, int value);

int main (){
    int r, c, color, address = VRAM_BASE;
    for (r = 0; r < N_ROWS; r++)
  220164:	e0bffc17 	ldw	r2,-16(fp)
  220168:	10800044 	addi	r2,r2,1
  22016c:	e0bffc15 	stw	r2,-16(fp)
  220170:	e0bffc17 	ldw	r2,-16(fp)
  220174:	10804410 	cmplti	r2,r2,272
  220178:	103fbf1e 	bne	r2,zero,220078 <main+0x1c>
            mem_write_word(address, color);
            address += WORD_SIZE;
        }
        address += ROW_SIZE*WORD_SIZE - N_COLS * WORD_SIZE;
    }
    return 0;
  22017c:	0005883a 	mov	r2,zero
}
  220180:	e037883a 	mov	sp,fp
  220184:	dfc00117 	ldw	ra,4(sp)
  220188:	df000017 	ldw	fp,0(sp)
  22018c:	dec00204 	addi	sp,sp,8
  220190:	f800283a 	ret

00220194 <mem_write_word>:
    .section .text  /* Code starts here */

    .global mem_write_word
mem_write_word:
    STWIO   r5, (r4)
  220194:	21400035 	stwio	r5,0(r4)
    RET
  220198:	f800283a 	ret

0022019c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  22019c:	defffc04 	addi	sp,sp,-16
  2201a0:	df000315 	stw	fp,12(sp)
  2201a4:	df000304 	addi	fp,sp,12
  2201a8:	e13ffd15 	stw	r4,-12(fp)
  2201ac:	e17ffe15 	stw	r5,-8(fp)
  2201b0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  2201b4:	e0fffe17 	ldw	r3,-8(fp)
  2201b8:	e0bffd17 	ldw	r2,-12(fp)
  2201bc:	18800e26 	beq	r3,r2,2201f8 <alt_load_section+0x5c>
  {
    while( to != end )
  2201c0:	00000a06 	br	2201ec <alt_load_section+0x50>
    {
      *to++ = *from++;
  2201c4:	e0bffd17 	ldw	r2,-12(fp)
  2201c8:	10c00017 	ldw	r3,0(r2)
  2201cc:	e0bffe17 	ldw	r2,-8(fp)
  2201d0:	10c00015 	stw	r3,0(r2)
  2201d4:	e0bffe17 	ldw	r2,-8(fp)
  2201d8:	10800104 	addi	r2,r2,4
  2201dc:	e0bffe15 	stw	r2,-8(fp)
  2201e0:	e0bffd17 	ldw	r2,-12(fp)
  2201e4:	10800104 	addi	r2,r2,4
  2201e8:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  2201ec:	e0fffe17 	ldw	r3,-8(fp)
  2201f0:	e0bfff17 	ldw	r2,-4(fp)
  2201f4:	18bff31e 	bne	r3,r2,2201c4 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
  2201f8:	e037883a 	mov	sp,fp
  2201fc:	df000017 	ldw	fp,0(sp)
  220200:	dec00104 	addi	sp,sp,4
  220204:	f800283a 	ret

00220208 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  220208:	defffe04 	addi	sp,sp,-8
  22020c:	dfc00115 	stw	ra,4(sp)
  220210:	df000015 	stw	fp,0(sp)
  220214:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  220218:	010008b4 	movhi	r4,34
  22021c:	21054504 	addi	r4,r4,5396
  220220:	014008b4 	movhi	r5,34
  220224:	29449004 	addi	r5,r5,4672
  220228:	018008b4 	movhi	r6,34
  22022c:	31854504 	addi	r6,r6,5396
  220230:	022019c0 	call	22019c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  220234:	010008b4 	movhi	r4,34
  220238:	21000804 	addi	r4,r4,32
  22023c:	014008b4 	movhi	r5,34
  220240:	29400804 	addi	r5,r5,32
  220244:	018008b4 	movhi	r6,34
  220248:	31800804 	addi	r6,r6,32
  22024c:	022019c0 	call	22019c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  220250:	010008b4 	movhi	r4,34
  220254:	21048704 	addi	r4,r4,4636
  220258:	014008b4 	movhi	r5,34
  22025c:	29448704 	addi	r5,r5,4636
  220260:	018008b4 	movhi	r6,34
  220264:	31849004 	addi	r6,r6,4672
  220268:	022019c0 	call	22019c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  22026c:	02206f40 	call	2206f4 <alt_dcache_flush_all>
  alt_icache_flush_all();
  220270:	022082c0 	call	22082c <alt_icache_flush_all>
}
  220274:	e037883a 	mov	sp,fp
  220278:	dfc00117 	ldw	ra,4(sp)
  22027c:	df000017 	ldw	fp,0(sp)
  220280:	dec00204 	addi	sp,sp,8
  220284:	f800283a 	ret

00220288 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  220288:	defffd04 	addi	sp,sp,-12
  22028c:	dfc00215 	stw	ra,8(sp)
  220290:	df000115 	stw	fp,4(sp)
  220294:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  220298:	0009883a 	mov	r4,zero
  22029c:	02203280 	call	220328 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  2202a0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  2202a4:	022035c0 	call	22035c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  2202a8:	010008b4 	movhi	r4,34
  2202ac:	21048704 	addi	r4,r4,4636
  2202b0:	014008b4 	movhi	r5,34
  2202b4:	29448704 	addi	r5,r5,4636
  2202b8:	018008b4 	movhi	r6,34
  2202bc:	31848704 	addi	r6,r6,4636
  2202c0:	02209280 	call	220928 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  2202c4:	d120bd17 	ldw	r4,-32012(gp)
  2202c8:	d0e0be17 	ldw	r3,-32008(gp)
  2202cc:	d0a0bf17 	ldw	r2,-32004(gp)
  2202d0:	180b883a 	mov	r5,r3
  2202d4:	100d883a 	mov	r6,r2
  2202d8:	022005c0 	call	22005c <main>
  2202dc:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  2202e0:	01000044 	movi	r4,1
  2202e4:	02206280 	call	220628 <close>
  exit (result);
  2202e8:	e13fff17 	ldw	r4,-4(fp)
  2202ec:	0220f500 	call	220f50 <exit>

002202f0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  2202f0:	defffd04 	addi	sp,sp,-12
  2202f4:	dfc00215 	stw	ra,8(sp)
  2202f8:	df000115 	stw	fp,4(sp)
  2202fc:	df000104 	addi	fp,sp,4
  220300:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  220304:	e13fff17 	ldw	r4,-4(fp)
  220308:	014008b4 	movhi	r5,34
  22030c:	29453f04 	addi	r5,r5,5372
  220310:	022078c0 	call	22078c <alt_dev_llist_insert>
}
  220314:	e037883a 	mov	sp,fp
  220318:	dfc00117 	ldw	ra,4(sp)
  22031c:	df000017 	ldw	fp,0(sp)
  220320:	dec00204 	addi	sp,sp,8
  220324:	f800283a 	ret

00220328 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  220328:	defffd04 	addi	sp,sp,-12
  22032c:	dfc00215 	stw	ra,8(sp)
  220330:	df000115 	stw	fp,4(sp)
  220334:	df000104 	addi	fp,sp,4
  220338:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS, nios);
  22033c:	0220cb80 	call	220cb8 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  220340:	00800044 	movi	r2,1
  220344:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  220348:	e037883a 	mov	sp,fp
  22034c:	dfc00117 	ldw	ra,4(sp)
  220350:	df000017 	ldw	fp,0(sp)
  220354:	dec00204 	addi	sp,sp,8
  220358:	f800283a 	ret

0022035c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  22035c:	defffe04 	addi	sp,sp,-8
  220360:	dfc00115 	stw	ra,4(sp)
  220364:	df000015 	stw	fp,0(sp)
  220368:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG, jtag);
  22036c:	010008b4 	movhi	r4,34
  220370:	21049004 	addi	r4,r4,4672
  220374:	02202f00 	call	2202f0 <alt_dev_reg>
}
  220378:	e037883a 	mov	sp,fp
  22037c:	dfc00117 	ldw	ra,4(sp)
  220380:	df000017 	ldw	fp,0(sp)
  220384:	dec00204 	addi	sp,sp,8
  220388:	f800283a 	ret

0022038c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  22038c:	defffa04 	addi	sp,sp,-24
  220390:	dfc00515 	stw	ra,20(sp)
  220394:	df000415 	stw	fp,16(sp)
  220398:	df000404 	addi	fp,sp,16
  22039c:	e13ffd15 	stw	r4,-12(fp)
  2203a0:	e17ffe15 	stw	r5,-8(fp)
  2203a4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  2203a8:	e0bffd17 	ldw	r2,-12(fp)
  2203ac:	10800017 	ldw	r2,0(r2)
  2203b0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  2203b4:	e0bffc17 	ldw	r2,-16(fp)
  2203b8:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
  2203bc:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  2203c0:	10800217 	ldw	r2,8(r2)
  2203c4:	1809883a 	mov	r4,r3
  2203c8:	e17ffe17 	ldw	r5,-8(fp)
  2203cc:	e1bfff17 	ldw	r6,-4(fp)
  2203d0:	100f883a 	mov	r7,r2
  2203d4:	022044c0 	call	22044c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  2203d8:	e037883a 	mov	sp,fp
  2203dc:	dfc00117 	ldw	ra,4(sp)
  2203e0:	df000017 	ldw	fp,0(sp)
  2203e4:	dec00204 	addi	sp,sp,8
  2203e8:	f800283a 	ret

002203ec <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  2203ec:	defffa04 	addi	sp,sp,-24
  2203f0:	dfc00515 	stw	ra,20(sp)
  2203f4:	df000415 	stw	fp,16(sp)
  2203f8:	df000404 	addi	fp,sp,16
  2203fc:	e13ffd15 	stw	r4,-12(fp)
  220400:	e17ffe15 	stw	r5,-8(fp)
  220404:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  220408:	e0bffd17 	ldw	r2,-12(fp)
  22040c:	10800017 	ldw	r2,0(r2)
  220410:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  220414:	e0bffc17 	ldw	r2,-16(fp)
  220418:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
  22041c:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  220420:	10800217 	ldw	r2,8(r2)
  220424:	1809883a 	mov	r4,r3
  220428:	e17ffe17 	ldw	r5,-8(fp)
  22042c:	e1bfff17 	ldw	r6,-4(fp)
  220430:	100f883a 	mov	r7,r2
  220434:	02205400 	call	220540 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  220438:	e037883a 	mov	sp,fp
  22043c:	dfc00117 	ldw	ra,4(sp)
  220440:	df000017 	ldw	fp,0(sp)
  220444:	dec00204 	addi	sp,sp,8
  220448:	f800283a 	ret

0022044c <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
  22044c:	defff704 	addi	sp,sp,-36
  220450:	df000815 	stw	fp,32(sp)
  220454:	df000804 	addi	fp,sp,32
  220458:	e13ffc15 	stw	r4,-16(fp)
  22045c:	e17ffd15 	stw	r5,-12(fp)
  220460:	e1bffe15 	stw	r6,-8(fp)
  220464:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
  220468:	e0bffc17 	ldw	r2,-16(fp)
  22046c:	10800017 	ldw	r2,0(r2)
  220470:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
  220474:	e0bffd17 	ldw	r2,-12(fp)
  220478:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
  22047c:	e0bffe17 	ldw	r2,-8(fp)
  220480:	e0fffd17 	ldw	r3,-12(fp)
  220484:	1885883a 	add	r2,r3,r2
  220488:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
  22048c:	00001406 	br	2204e0 <altera_avalon_jtag_uart_read+0x94>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  220490:	e0bff917 	ldw	r2,-28(fp)
  220494:	10800037 	ldwio	r2,0(r2)
  220498:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
  22049c:	e0bffb17 	ldw	r2,-20(fp)
  2204a0:	10a0000c 	andi	r2,r2,32768
  2204a4:	10000826 	beq	r2,zero,2204c8 <altera_avalon_jtag_uart_read+0x7c>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  2204a8:	e0bffb17 	ldw	r2,-20(fp)
  2204ac:	1007883a 	mov	r3,r2
  2204b0:	e0bff817 	ldw	r2,-32(fp)
  2204b4:	10c00005 	stb	r3,0(r2)
  2204b8:	e0bff817 	ldw	r2,-32(fp)
  2204bc:	10800044 	addi	r2,r2,1
  2204c0:	e0bff815 	stw	r2,-32(fp)
  2204c4:	00000606 	br	2204e0 <altera_avalon_jtag_uart_read+0x94>
    else if (ptr != buffer)
  2204c8:	e0fff817 	ldw	r3,-32(fp)
  2204cc:	e0bffd17 	ldw	r2,-12(fp)
  2204d0:	1880071e 	bne	r3,r2,2204f0 <altera_avalon_jtag_uart_read+0xa4>
      break;
    else if(flags & O_NONBLOCK)
  2204d4:	e0bfff17 	ldw	r2,-4(fp)
  2204d8:	1090000c 	andi	r2,r2,16384
  2204dc:	1000061e 	bne	r2,zero,2204f8 <altera_avalon_jtag_uart_read+0xac>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
  2204e0:	e0fff817 	ldw	r3,-32(fp)
  2204e4:	e0bffa17 	ldw	r2,-24(fp)
  2204e8:	18bfe936 	bltu	r3,r2,220490 <altera_avalon_jtag_uart_read+0x44>
  2204ec:	00000306 	br	2204fc <altera_avalon_jtag_uart_read+0xb0>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
  2204f0:	0001883a 	nop
  2204f4:	00000106 	br	2204fc <altera_avalon_jtag_uart_read+0xb0>
    else if(flags & O_NONBLOCK)
      break;   
  2204f8:	0001883a 	nop
    
  }

  if (ptr != buffer)
  2204fc:	e0fff817 	ldw	r3,-32(fp)
  220500:	e0bffd17 	ldw	r2,-12(fp)
  220504:	18800426 	beq	r3,r2,220518 <altera_avalon_jtag_uart_read+0xcc>
    return ptr - buffer;
  220508:	e0fff817 	ldw	r3,-32(fp)
  22050c:	e0bffd17 	ldw	r2,-12(fp)
  220510:	1885c83a 	sub	r2,r3,r2
  220514:	00000606 	br	220530 <altera_avalon_jtag_uart_read+0xe4>
  else if (flags & O_NONBLOCK)
  220518:	e0bfff17 	ldw	r2,-4(fp)
  22051c:	1090000c 	andi	r2,r2,16384
  220520:	10000226 	beq	r2,zero,22052c <altera_avalon_jtag_uart_read+0xe0>
    return -EWOULDBLOCK;
  220524:	00bffd44 	movi	r2,-11
  220528:	00000106 	br	220530 <altera_avalon_jtag_uart_read+0xe4>
  else
    return -EIO;
  22052c:	00bffec4 	movi	r2,-5
}
  220530:	e037883a 	mov	sp,fp
  220534:	df000017 	ldw	fp,0(sp)
  220538:	dec00104 	addi	sp,sp,4
  22053c:	f800283a 	ret

00220540 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  220540:	defff904 	addi	sp,sp,-28
  220544:	df000615 	stw	fp,24(sp)
  220548:	df000604 	addi	fp,sp,24
  22054c:	e13ffc15 	stw	r4,-16(fp)
  220550:	e17ffd15 	stw	r5,-12(fp)
  220554:	e1bffe15 	stw	r6,-8(fp)
  220558:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
  22055c:	e0bffc17 	ldw	r2,-16(fp)
  220560:	10800017 	ldw	r2,0(r2)
  220564:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
  220568:	e0bffe17 	ldw	r2,-8(fp)
  22056c:	e0fffd17 	ldw	r3,-12(fp)
  220570:	1885883a 	add	r2,r3,r2
  220574:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
  220578:	00000f06 	br	2205b8 <altera_avalon_jtag_uart_write+0x78>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
  22057c:	e0bffa17 	ldw	r2,-24(fp)
  220580:	10800104 	addi	r2,r2,4
  220584:	10800037 	ldwio	r2,0(r2)
  220588:	10bfffec 	andhi	r2,r2,65535
  22058c:	10000a26 	beq	r2,zero,2205b8 <altera_avalon_jtag_uart_write+0x78>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
  220590:	e0bffa17 	ldw	r2,-24(fp)
  220594:	e0fffd17 	ldw	r3,-12(fp)
  220598:	18c00003 	ldbu	r3,0(r3)
  22059c:	18c03fcc 	andi	r3,r3,255
  2205a0:	18c0201c 	xori	r3,r3,128
  2205a4:	18ffe004 	addi	r3,r3,-128
  2205a8:	e13ffd17 	ldw	r4,-12(fp)
  2205ac:	21000044 	addi	r4,r4,1
  2205b0:	e13ffd15 	stw	r4,-12(fp)
  2205b4:	10c00035 	stwio	r3,0(r2)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
  2205b8:	e0fffd17 	ldw	r3,-12(fp)
  2205bc:	e0bffb17 	ldw	r2,-20(fp)
  2205c0:	18bfee36 	bltu	r3,r2,22057c <altera_avalon_jtag_uart_write+0x3c>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
  2205c4:	e0bffe17 	ldw	r2,-8(fp)
}
  2205c8:	e037883a 	mov	sp,fp
  2205cc:	df000017 	ldw	fp,0(sp)
  2205d0:	dec00104 	addi	sp,sp,4
  2205d4:	f800283a 	ret

002205d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  2205d8:	defffe04 	addi	sp,sp,-8
  2205dc:	dfc00115 	stw	ra,4(sp)
  2205e0:	df000015 	stw	fp,0(sp)
  2205e4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  2205e8:	008008b4 	movhi	r2,34
  2205ec:	10854204 	addi	r2,r2,5384
  2205f0:	10800017 	ldw	r2,0(r2)
  2205f4:	10000526 	beq	r2,zero,22060c <alt_get_errno+0x34>
  2205f8:	008008b4 	movhi	r2,34
  2205fc:	10854204 	addi	r2,r2,5384
  220600:	10800017 	ldw	r2,0(r2)
  220604:	103ee83a 	callr	r2
  220608:	00000206 	br	220614 <alt_get_errno+0x3c>
  22060c:	008008b4 	movhi	r2,34
  220610:	1085fd04 	addi	r2,r2,6132
}
  220614:	e037883a 	mov	sp,fp
  220618:	dfc00117 	ldw	ra,4(sp)
  22061c:	df000017 	ldw	fp,0(sp)
  220620:	dec00204 	addi	sp,sp,8
  220624:	f800283a 	ret

00220628 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  220628:	defffb04 	addi	sp,sp,-20
  22062c:	dfc00415 	stw	ra,16(sp)
  220630:	df000315 	stw	fp,12(sp)
  220634:	df000304 	addi	fp,sp,12
  220638:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  22063c:	e0bfff17 	ldw	r2,-4(fp)
  220640:	10000716 	blt	r2,zero,220660 <close+0x38>
  220644:	e13fff17 	ldw	r4,-4(fp)
  220648:	01400304 	movi	r5,12
  22064c:	02211b80 	call	2211b8 <__mulsi3>
  220650:	00c008b4 	movhi	r3,34
  220654:	18c4a504 	addi	r3,r3,4756
  220658:	10c5883a 	add	r2,r2,r3
  22065c:	00000106 	br	220664 <close+0x3c>
  220660:	0005883a 	mov	r2,zero
  220664:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
  220668:	e0bffd17 	ldw	r2,-12(fp)
  22066c:	10001826 	beq	r2,zero,2206d0 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  220670:	e0bffd17 	ldw	r2,-12(fp)
  220674:	10800017 	ldw	r2,0(r2)
  220678:	10800417 	ldw	r2,16(r2)
  22067c:	10000626 	beq	r2,zero,220698 <close+0x70>
  220680:	e0bffd17 	ldw	r2,-12(fp)
  220684:	10800017 	ldw	r2,0(r2)
  220688:	10800417 	ldw	r2,16(r2)
  22068c:	e13ffd17 	ldw	r4,-12(fp)
  220690:	103ee83a 	callr	r2
  220694:	00000106 	br	22069c <close+0x74>
  220698:	0005883a 	mov	r2,zero
  22069c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  2206a0:	e13fff17 	ldw	r4,-4(fp)
  2206a4:	0220c380 	call	220c38 <alt_release_fd>
    if (rval < 0)
  2206a8:	e0bffe17 	ldw	r2,-8(fp)
  2206ac:	1000060e 	bge	r2,zero,2206c8 <close+0xa0>
    {
      ALT_ERRNO = -rval;
  2206b0:	02205d80 	call	2205d8 <alt_get_errno>
  2206b4:	e0fffe17 	ldw	r3,-8(fp)
  2206b8:	00c7c83a 	sub	r3,zero,r3
  2206bc:	10c00015 	stw	r3,0(r2)
      return -1;
  2206c0:	00bfffc4 	movi	r2,-1
  2206c4:	00000606 	br	2206e0 <close+0xb8>
    }
    return 0;
  2206c8:	0005883a 	mov	r2,zero
  2206cc:	00000406 	br	2206e0 <close+0xb8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  2206d0:	02205d80 	call	2205d8 <alt_get_errno>
  2206d4:	00c01444 	movi	r3,81
  2206d8:	10c00015 	stw	r3,0(r2)
    return -1;
  2206dc:	00bfffc4 	movi	r2,-1
  }
}
  2206e0:	e037883a 	mov	sp,fp
  2206e4:	dfc00117 	ldw	ra,4(sp)
  2206e8:	df000017 	ldw	fp,0(sp)
  2206ec:	dec00204 	addi	sp,sp,8
  2206f0:	f800283a 	ret

002206f4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  2206f4:	deffff04 	addi	sp,sp,-4
  2206f8:	df000015 	stw	fp,0(sp)
  2206fc:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  220700:	e037883a 	mov	sp,fp
  220704:	df000017 	ldw	fp,0(sp)
  220708:	dec00104 	addi	sp,sp,4
  22070c:	f800283a 	ret

00220710 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  220710:	defffc04 	addi	sp,sp,-16
  220714:	df000315 	stw	fp,12(sp)
  220718:	df000304 	addi	fp,sp,12
  22071c:	e13ffd15 	stw	r4,-12(fp)
  220720:	e17ffe15 	stw	r5,-8(fp)
  220724:	e1bfff15 	stw	r6,-4(fp)
  return len;
  220728:	e0bfff17 	ldw	r2,-4(fp)
}
  22072c:	e037883a 	mov	sp,fp
  220730:	df000017 	ldw	fp,0(sp)
  220734:	dec00104 	addi	sp,sp,4
  220738:	f800283a 	ret

0022073c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  22073c:	defffe04 	addi	sp,sp,-8
  220740:	dfc00115 	stw	ra,4(sp)
  220744:	df000015 	stw	fp,0(sp)
  220748:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  22074c:	008008b4 	movhi	r2,34
  220750:	10854204 	addi	r2,r2,5384
  220754:	10800017 	ldw	r2,0(r2)
  220758:	10000526 	beq	r2,zero,220770 <alt_get_errno+0x34>
  22075c:	008008b4 	movhi	r2,34
  220760:	10854204 	addi	r2,r2,5384
  220764:	10800017 	ldw	r2,0(r2)
  220768:	103ee83a 	callr	r2
  22076c:	00000206 	br	220778 <alt_get_errno+0x3c>
  220770:	008008b4 	movhi	r2,34
  220774:	1085fd04 	addi	r2,r2,6132
}
  220778:	e037883a 	mov	sp,fp
  22077c:	dfc00117 	ldw	ra,4(sp)
  220780:	df000017 	ldw	fp,0(sp)
  220784:	dec00204 	addi	sp,sp,8
  220788:	f800283a 	ret

0022078c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  22078c:	defffa04 	addi	sp,sp,-24
  220790:	dfc00515 	stw	ra,20(sp)
  220794:	df000415 	stw	fp,16(sp)
  220798:	df000404 	addi	fp,sp,16
  22079c:	e13ffe15 	stw	r4,-8(fp)
  2207a0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  2207a4:	e0bffe17 	ldw	r2,-8(fp)
  2207a8:	10000326 	beq	r2,zero,2207b8 <alt_dev_llist_insert+0x2c>
  2207ac:	e0bffe17 	ldw	r2,-8(fp)
  2207b0:	10800217 	ldw	r2,8(r2)
  2207b4:	1000051e 	bne	r2,zero,2207cc <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
  2207b8:	022073c0 	call	22073c <alt_get_errno>
  2207bc:	00c00584 	movi	r3,22
  2207c0:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
  2207c4:	00bffa84 	movi	r2,-22
  2207c8:	00001306 	br	220818 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  2207cc:	e0bffe17 	ldw	r2,-8(fp)
  2207d0:	e0ffff17 	ldw	r3,-4(fp)
  2207d4:	e0fffc15 	stw	r3,-16(fp)
  2207d8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  2207dc:	e0bffd17 	ldw	r2,-12(fp)
  2207e0:	e0fffc17 	ldw	r3,-16(fp)
  2207e4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  2207e8:	e0bffc17 	ldw	r2,-16(fp)
  2207ec:	10c00017 	ldw	r3,0(r2)
  2207f0:	e0bffd17 	ldw	r2,-12(fp)
  2207f4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  2207f8:	e0bffc17 	ldw	r2,-16(fp)
  2207fc:	10800017 	ldw	r2,0(r2)
  220800:	e0fffd17 	ldw	r3,-12(fp)
  220804:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  220808:	e0bffc17 	ldw	r2,-16(fp)
  22080c:	e0fffd17 	ldw	r3,-12(fp)
  220810:	10c00015 	stw	r3,0(r2)

  return 0;  
  220814:	0005883a 	mov	r2,zero
}
  220818:	e037883a 	mov	sp,fp
  22081c:	dfc00117 	ldw	ra,4(sp)
  220820:	df000017 	ldw	fp,0(sp)
  220824:	dec00204 	addi	sp,sp,8
  220828:	f800283a 	ret

0022082c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  22082c:	deffff04 	addi	sp,sp,-4
  220830:	df000015 	stw	fp,0(sp)
  220834:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
  220838:	e037883a 	mov	sp,fp
  22083c:	df000017 	ldw	fp,0(sp)
  220840:	dec00104 	addi	sp,sp,4
  220844:	f800283a 	ret

00220848 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  220848:	defff804 	addi	sp,sp,-32
  22084c:	dfc00715 	stw	ra,28(sp)
  220850:	df000615 	stw	fp,24(sp)
  220854:	dc000515 	stw	r16,20(sp)
  220858:	df000504 	addi	fp,sp,20
  22085c:	e13ffc15 	stw	r4,-16(fp)
  220860:	e17ffd15 	stw	r5,-12(fp)
  220864:	e1bffe15 	stw	r6,-8(fp)
  220868:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  22086c:	e13ffd17 	ldw	r4,-12(fp)
  220870:	e17ffe17 	ldw	r5,-8(fp)
  220874:	e1bfff17 	ldw	r6,-4(fp)
  220878:	0220ae00 	call	220ae0 <open>
  22087c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  220880:	e0bffb17 	ldw	r2,-20(fp)
  220884:	10002216 	blt	r2,zero,220910 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
  220888:	040008b4 	movhi	r16,34
  22088c:	8404a504 	addi	r16,r16,4756
  220890:	e0bffb17 	ldw	r2,-20(fp)
  220894:	1009883a 	mov	r4,r2
  220898:	01400304 	movi	r5,12
  22089c:	02211b80 	call	2211b8 <__mulsi3>
  2208a0:	8085883a 	add	r2,r16,r2
  2208a4:	10c00017 	ldw	r3,0(r2)
  2208a8:	e0bffc17 	ldw	r2,-16(fp)
  2208ac:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  2208b0:	040008b4 	movhi	r16,34
  2208b4:	8404a504 	addi	r16,r16,4756
  2208b8:	e0bffb17 	ldw	r2,-20(fp)
  2208bc:	1009883a 	mov	r4,r2
  2208c0:	01400304 	movi	r5,12
  2208c4:	02211b80 	call	2211b8 <__mulsi3>
  2208c8:	8085883a 	add	r2,r16,r2
  2208cc:	10800104 	addi	r2,r2,4
  2208d0:	10c00017 	ldw	r3,0(r2)
  2208d4:	e0bffc17 	ldw	r2,-16(fp)
  2208d8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  2208dc:	040008b4 	movhi	r16,34
  2208e0:	8404a504 	addi	r16,r16,4756
  2208e4:	e0bffb17 	ldw	r2,-20(fp)
  2208e8:	1009883a 	mov	r4,r2
  2208ec:	01400304 	movi	r5,12
  2208f0:	02211b80 	call	2211b8 <__mulsi3>
  2208f4:	8085883a 	add	r2,r16,r2
  2208f8:	10800204 	addi	r2,r2,8
  2208fc:	10c00017 	ldw	r3,0(r2)
  220900:	e0bffc17 	ldw	r2,-16(fp)
  220904:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  220908:	e13ffb17 	ldw	r4,-20(fp)
  22090c:	0220c380 	call	220c38 <alt_release_fd>
  }
} 
  220910:	e037883a 	mov	sp,fp
  220914:	dfc00217 	ldw	ra,8(sp)
  220918:	df000117 	ldw	fp,4(sp)
  22091c:	dc000017 	ldw	r16,0(sp)
  220920:	dec00304 	addi	sp,sp,12
  220924:	f800283a 	ret

00220928 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  220928:	defffb04 	addi	sp,sp,-20
  22092c:	dfc00415 	stw	ra,16(sp)
  220930:	df000315 	stw	fp,12(sp)
  220934:	df000304 	addi	fp,sp,12
  220938:	e13ffd15 	stw	r4,-12(fp)
  22093c:	e17ffe15 	stw	r5,-8(fp)
  220940:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  220944:	010008b4 	movhi	r4,34
  220948:	2104a804 	addi	r4,r4,4768
  22094c:	e17ffd17 	ldw	r5,-12(fp)
  220950:	01800044 	movi	r6,1
  220954:	01c07fc4 	movi	r7,511
  220958:	02208480 	call	220848 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  22095c:	010008b4 	movhi	r4,34
  220960:	2104a504 	addi	r4,r4,4756
  220964:	e17ffe17 	ldw	r5,-8(fp)
  220968:	000d883a 	mov	r6,zero
  22096c:	01c07fc4 	movi	r7,511
  220970:	02208480 	call	220848 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  220974:	010008b4 	movhi	r4,34
  220978:	2104ab04 	addi	r4,r4,4780
  22097c:	e17fff17 	ldw	r5,-4(fp)
  220980:	01800044 	movi	r6,1
  220984:	01c07fc4 	movi	r7,511
  220988:	02208480 	call	220848 <alt_open_fd>
}  
  22098c:	e037883a 	mov	sp,fp
  220990:	dfc00117 	ldw	ra,4(sp)
  220994:	df000017 	ldw	fp,0(sp)
  220998:	dec00204 	addi	sp,sp,8
  22099c:	f800283a 	ret

002209a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  2209a0:	defffe04 	addi	sp,sp,-8
  2209a4:	dfc00115 	stw	ra,4(sp)
  2209a8:	df000015 	stw	fp,0(sp)
  2209ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  2209b0:	008008b4 	movhi	r2,34
  2209b4:	10854204 	addi	r2,r2,5384
  2209b8:	10800017 	ldw	r2,0(r2)
  2209bc:	10000526 	beq	r2,zero,2209d4 <alt_get_errno+0x34>
  2209c0:	008008b4 	movhi	r2,34
  2209c4:	10854204 	addi	r2,r2,5384
  2209c8:	10800017 	ldw	r2,0(r2)
  2209cc:	103ee83a 	callr	r2
  2209d0:	00000206 	br	2209dc <alt_get_errno+0x3c>
  2209d4:	008008b4 	movhi	r2,34
  2209d8:	1085fd04 	addi	r2,r2,6132
}
  2209dc:	e037883a 	mov	sp,fp
  2209e0:	dfc00117 	ldw	ra,4(sp)
  2209e4:	df000017 	ldw	fp,0(sp)
  2209e8:	dec00204 	addi	sp,sp,8
  2209ec:	f800283a 	ret

002209f0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  2209f0:	defffb04 	addi	sp,sp,-20
  2209f4:	dfc00415 	stw	ra,16(sp)
  2209f8:	df000315 	stw	fp,12(sp)
  2209fc:	dc000215 	stw	r16,8(sp)
  220a00:	df000204 	addi	fp,sp,8
  220a04:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  220a08:	e0bfff17 	ldw	r2,-4(fp)
  220a0c:	10800217 	ldw	r2,8(r2)
  220a10:	10d00034 	orhi	r3,r2,16384
  220a14:	e0bfff17 	ldw	r2,-4(fp)
  220a18:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  220a1c:	e03ffe15 	stw	zero,-8(fp)
  220a20:	00002206 	br	220aac <alt_file_locked+0xbc>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  220a24:	040008b4 	movhi	r16,34
  220a28:	8404a504 	addi	r16,r16,4756
  220a2c:	e0bffe17 	ldw	r2,-8(fp)
  220a30:	1009883a 	mov	r4,r2
  220a34:	01400304 	movi	r5,12
  220a38:	02211b80 	call	2211b8 <__mulsi3>
  220a3c:	8085883a 	add	r2,r16,r2
  220a40:	10c00017 	ldw	r3,0(r2)
  220a44:	e0bfff17 	ldw	r2,-4(fp)
  220a48:	10800017 	ldw	r2,0(r2)
  220a4c:	1880141e 	bne	r3,r2,220aa0 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  220a50:	040008b4 	movhi	r16,34
  220a54:	8404a504 	addi	r16,r16,4756
  220a58:	e0bffe17 	ldw	r2,-8(fp)
  220a5c:	1009883a 	mov	r4,r2
  220a60:	01400304 	movi	r5,12
  220a64:	02211b80 	call	2211b8 <__mulsi3>
  220a68:	8085883a 	add	r2,r16,r2
  220a6c:	10800204 	addi	r2,r2,8
  220a70:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  220a74:	10000a0e 	bge	r2,zero,220aa0 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
  220a78:	e13ffe17 	ldw	r4,-8(fp)
  220a7c:	01400304 	movi	r5,12
  220a80:	02211b80 	call	2211b8 <__mulsi3>
  220a84:	00c008b4 	movhi	r3,34
  220a88:	18c4a504 	addi	r3,r3,4756
  220a8c:	10c7883a 	add	r3,r2,r3
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  220a90:	e0bfff17 	ldw	r2,-4(fp)
  220a94:	18800226 	beq	r3,r2,220aa0 <alt_file_locked+0xb0>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  220a98:	00bffcc4 	movi	r2,-13
  220a9c:	00000a06 	br	220ac8 <alt_file_locked+0xd8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  220aa0:	e0bffe17 	ldw	r2,-8(fp)
  220aa4:	10800044 	addi	r2,r2,1
  220aa8:	e0bffe15 	stw	r2,-8(fp)
  220aac:	008008b4 	movhi	r2,34
  220ab0:	10854104 	addi	r2,r2,5380
  220ab4:	10800017 	ldw	r2,0(r2)
  220ab8:	1007883a 	mov	r3,r2
  220abc:	e0bffe17 	ldw	r2,-8(fp)
  220ac0:	18bfd82e 	bgeu	r3,r2,220a24 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  220ac4:	0005883a 	mov	r2,zero
}
  220ac8:	e037883a 	mov	sp,fp
  220acc:	dfc00217 	ldw	ra,8(sp)
  220ad0:	df000117 	ldw	fp,4(sp)
  220ad4:	dc000017 	ldw	r16,0(sp)
  220ad8:	dec00304 	addi	sp,sp,12
  220adc:	f800283a 	ret

00220ae0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  220ae0:	defff604 	addi	sp,sp,-40
  220ae4:	dfc00915 	stw	ra,36(sp)
  220ae8:	df000815 	stw	fp,32(sp)
  220aec:	df000804 	addi	fp,sp,32
  220af0:	e13ffd15 	stw	r4,-12(fp)
  220af4:	e17ffe15 	stw	r5,-8(fp)
  220af8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  220afc:	00bfffc4 	movi	r2,-1
  220b00:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
  220b04:	00bffb44 	movi	r2,-19
  220b08:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
  220b0c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  220b10:	e13ffd17 	ldw	r4,-12(fp)
  220b14:	014008b4 	movhi	r5,34
  220b18:	29453f04 	addi	r5,r5,5372
  220b1c:	0220cd80 	call	220cd8 <alt_find_dev>
  220b20:	e0bff815 	stw	r2,-32(fp)
  220b24:	e0bff817 	ldw	r2,-32(fp)
  220b28:	1000051e 	bne	r2,zero,220b40 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  220b2c:	e13ffd17 	ldw	r4,-12(fp)
  220b30:	0220d680 	call	220d68 <alt_find_file>
  220b34:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
  220b38:	00800044 	movi	r2,1
  220b3c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  220b40:	e0bff817 	ldw	r2,-32(fp)
  220b44:	10002a26 	beq	r2,zero,220bf0 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
  220b48:	e13ff817 	ldw	r4,-32(fp)
  220b4c:	0220e7c0 	call	220e7c <alt_get_fd>
  220b50:	e0bff915 	stw	r2,-28(fp)
  220b54:	e0bff917 	ldw	r2,-28(fp)
  220b58:	1000030e 	bge	r2,zero,220b68 <open+0x88>
    {
      status = index;
  220b5c:	e0bff917 	ldw	r2,-28(fp)
  220b60:	e0bffa15 	stw	r2,-24(fp)
  220b64:	00002406 	br	220bf8 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
  220b68:	e13ff917 	ldw	r4,-28(fp)
  220b6c:	01400304 	movi	r5,12
  220b70:	02211b80 	call	2211b8 <__mulsi3>
  220b74:	00c008b4 	movhi	r3,34
  220b78:	18c4a504 	addi	r3,r3,4756
  220b7c:	10c5883a 	add	r2,r2,r3
  220b80:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  220b84:	e0fffe17 	ldw	r3,-8(fp)
  220b88:	00900034 	movhi	r2,16384
  220b8c:	10bfffc4 	addi	r2,r2,-1
  220b90:	1886703a 	and	r3,r3,r2
  220b94:	e0bffc17 	ldw	r2,-16(fp)
  220b98:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  220b9c:	e0bffb17 	ldw	r2,-20(fp)
  220ba0:	1000051e 	bne	r2,zero,220bb8 <open+0xd8>
  220ba4:	e13ffc17 	ldw	r4,-16(fp)
  220ba8:	02209f00 	call	2209f0 <alt_file_locked>
  220bac:	e0bffa15 	stw	r2,-24(fp)
  220bb0:	e0bffa17 	ldw	r2,-24(fp)
  220bb4:	10001016 	blt	r2,zero,220bf8 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  220bb8:	e0bff817 	ldw	r2,-32(fp)
  220bbc:	10800317 	ldw	r2,12(r2)
  220bc0:	10000826 	beq	r2,zero,220be4 <open+0x104>
  220bc4:	e0bff817 	ldw	r2,-32(fp)
  220bc8:	10800317 	ldw	r2,12(r2)
  220bcc:	e13ffc17 	ldw	r4,-16(fp)
  220bd0:	e17ffd17 	ldw	r5,-12(fp)
  220bd4:	e1bffe17 	ldw	r6,-8(fp)
  220bd8:	e1ffff17 	ldw	r7,-4(fp)
  220bdc:	103ee83a 	callr	r2
  220be0:	00000106 	br	220be8 <open+0x108>
  220be4:	0005883a 	mov	r2,zero
  220be8:	e0bffa15 	stw	r2,-24(fp)
  220bec:	00000206 	br	220bf8 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
  220bf0:	00bffb44 	movi	r2,-19
  220bf4:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  220bf8:	e0bffa17 	ldw	r2,-24(fp)
  220bfc:	1000080e 	bge	r2,zero,220c20 <open+0x140>
  {
    alt_release_fd (index);  
  220c00:	e13ff917 	ldw	r4,-28(fp)
  220c04:	0220c380 	call	220c38 <alt_release_fd>
    ALT_ERRNO = -status;
  220c08:	02209a00 	call	2209a0 <alt_get_errno>
  220c0c:	e0fffa17 	ldw	r3,-24(fp)
  220c10:	00c7c83a 	sub	r3,zero,r3
  220c14:	10c00015 	stw	r3,0(r2)
    return -1;
  220c18:	00bfffc4 	movi	r2,-1
  220c1c:	00000106 	br	220c24 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
  220c20:	e0bff917 	ldw	r2,-28(fp)
}
  220c24:	e037883a 	mov	sp,fp
  220c28:	dfc00117 	ldw	ra,4(sp)
  220c2c:	df000017 	ldw	fp,0(sp)
  220c30:	dec00204 	addi	sp,sp,8
  220c34:	f800283a 	ret

00220c38 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  220c38:	defffc04 	addi	sp,sp,-16
  220c3c:	dfc00315 	stw	ra,12(sp)
  220c40:	df000215 	stw	fp,8(sp)
  220c44:	dc000115 	stw	r16,4(sp)
  220c48:	df000104 	addi	fp,sp,4
  220c4c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  220c50:	e0bfff17 	ldw	r2,-4(fp)
  220c54:	108000d0 	cmplti	r2,r2,3
  220c58:	1000111e 	bne	r2,zero,220ca0 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
  220c5c:	040008b4 	movhi	r16,34
  220c60:	8404a504 	addi	r16,r16,4756
  220c64:	e0bfff17 	ldw	r2,-4(fp)
  220c68:	1009883a 	mov	r4,r2
  220c6c:	01400304 	movi	r5,12
  220c70:	02211b80 	call	2211b8 <__mulsi3>
  220c74:	8085883a 	add	r2,r16,r2
  220c78:	10800204 	addi	r2,r2,8
  220c7c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  220c80:	040008b4 	movhi	r16,34
  220c84:	8404a504 	addi	r16,r16,4756
  220c88:	e0bfff17 	ldw	r2,-4(fp)
  220c8c:	1009883a 	mov	r4,r2
  220c90:	01400304 	movi	r5,12
  220c94:	02211b80 	call	2211b8 <__mulsi3>
  220c98:	8085883a 	add	r2,r16,r2
  220c9c:	10000015 	stw	zero,0(r2)
  }
}
  220ca0:	e037883a 	mov	sp,fp
  220ca4:	dfc00217 	ldw	ra,8(sp)
  220ca8:	df000117 	ldw	fp,4(sp)
  220cac:	dc000017 	ldw	r16,0(sp)
  220cb0:	dec00304 	addi	sp,sp,12
  220cb4:	f800283a 	ret

00220cb8 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
  220cb8:	deffff04 	addi	sp,sp,-4
  220cbc:	df000015 	stw	fp,0(sp)
  220cc0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  220cc4:	000170fa 	wrctl	ienable,zero
}
  220cc8:	e037883a 	mov	sp,fp
  220ccc:	df000017 	ldw	fp,0(sp)
  220cd0:	dec00104 	addi	sp,sp,4
  220cd4:	f800283a 	ret

00220cd8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  220cd8:	defffa04 	addi	sp,sp,-24
  220cdc:	dfc00515 	stw	ra,20(sp)
  220ce0:	df000415 	stw	fp,16(sp)
  220ce4:	df000404 	addi	fp,sp,16
  220ce8:	e13ffe15 	stw	r4,-8(fp)
  220cec:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
  220cf0:	e0bfff17 	ldw	r2,-4(fp)
  220cf4:	10800017 	ldw	r2,0(r2)
  220cf8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  220cfc:	e13ffe17 	ldw	r4,-8(fp)
  220d00:	0220fb80 	call	220fb8 <strlen>
  220d04:	10800044 	addi	r2,r2,1
  220d08:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  220d0c:	00000d06 	br	220d44 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  220d10:	e0bffc17 	ldw	r2,-16(fp)
  220d14:	10c00217 	ldw	r3,8(r2)
  220d18:	e0bffd17 	ldw	r2,-12(fp)
  220d1c:	1809883a 	mov	r4,r3
  220d20:	e17ffe17 	ldw	r5,-8(fp)
  220d24:	100d883a 	mov	r6,r2
  220d28:	0220f700 	call	220f70 <memcmp>
  220d2c:	1000021e 	bne	r2,zero,220d38 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  220d30:	e0bffc17 	ldw	r2,-16(fp)
  220d34:	00000706 	br	220d54 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  220d38:	e0bffc17 	ldw	r2,-16(fp)
  220d3c:	10800017 	ldw	r2,0(r2)
  220d40:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  220d44:	e0fffc17 	ldw	r3,-16(fp)
  220d48:	e0bfff17 	ldw	r2,-4(fp)
  220d4c:	18bff01e 	bne	r3,r2,220d10 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  220d50:	0005883a 	mov	r2,zero
}
  220d54:	e037883a 	mov	sp,fp
  220d58:	dfc00117 	ldw	ra,4(sp)
  220d5c:	df000017 	ldw	fp,0(sp)
  220d60:	dec00204 	addi	sp,sp,8
  220d64:	f800283a 	ret

00220d68 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  220d68:	defffb04 	addi	sp,sp,-20
  220d6c:	dfc00415 	stw	ra,16(sp)
  220d70:	df000315 	stw	fp,12(sp)
  220d74:	df000304 	addi	fp,sp,12
  220d78:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  220d7c:	008008b4 	movhi	r2,34
  220d80:	10853d04 	addi	r2,r2,5364
  220d84:	10800017 	ldw	r2,0(r2)
  220d88:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  220d8c:	00003106 	br	220e54 <alt_find_file+0xec>
  {
    len = strlen(next->name);
  220d90:	e0bffd17 	ldw	r2,-12(fp)
  220d94:	10800217 	ldw	r2,8(r2)
  220d98:	1009883a 	mov	r4,r2
  220d9c:	0220fb80 	call	220fb8 <strlen>
  220da0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  220da4:	e0bffd17 	ldw	r2,-12(fp)
  220da8:	10c00217 	ldw	r3,8(r2)
  220dac:	e0bffe17 	ldw	r2,-8(fp)
  220db0:	10bfffc4 	addi	r2,r2,-1
  220db4:	1885883a 	add	r2,r3,r2
  220db8:	10800003 	ldbu	r2,0(r2)
  220dbc:	10803fcc 	andi	r2,r2,255
  220dc0:	1080201c 	xori	r2,r2,128
  220dc4:	10bfe004 	addi	r2,r2,-128
  220dc8:	10800bd8 	cmpnei	r2,r2,47
  220dcc:	1000031e 	bne	r2,zero,220ddc <alt_find_file+0x74>
    {
      len -= 1;
  220dd0:	e0bffe17 	ldw	r2,-8(fp)
  220dd4:	10bfffc4 	addi	r2,r2,-1
  220dd8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  220ddc:	e0bffe17 	ldw	r2,-8(fp)
  220de0:	e0ffff17 	ldw	r3,-4(fp)
  220de4:	1885883a 	add	r2,r3,r2
  220de8:	10800003 	ldbu	r2,0(r2)
  220dec:	10803fcc 	andi	r2,r2,255
  220df0:	1080201c 	xori	r2,r2,128
  220df4:	10bfe004 	addi	r2,r2,-128
  220df8:	10800be0 	cmpeqi	r2,r2,47
  220dfc:	1000081e 	bne	r2,zero,220e20 <alt_find_file+0xb8>
  220e00:	e0bffe17 	ldw	r2,-8(fp)
  220e04:	e0ffff17 	ldw	r3,-4(fp)
  220e08:	1885883a 	add	r2,r3,r2
  220e0c:	10800003 	ldbu	r2,0(r2)
  220e10:	10803fcc 	andi	r2,r2,255
  220e14:	1080201c 	xori	r2,r2,128
  220e18:	10bfe004 	addi	r2,r2,-128
  220e1c:	10000a1e 	bne	r2,zero,220e48 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
  220e20:	e0bffd17 	ldw	r2,-12(fp)
  220e24:	10c00217 	ldw	r3,8(r2)
  220e28:	e0bffe17 	ldw	r2,-8(fp)
  220e2c:	1809883a 	mov	r4,r3
  220e30:	e17fff17 	ldw	r5,-4(fp)
  220e34:	100d883a 	mov	r6,r2
  220e38:	0220f700 	call	220f70 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  220e3c:	1000021e 	bne	r2,zero,220e48 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  220e40:	e0bffd17 	ldw	r2,-12(fp)
  220e44:	00000806 	br	220e68 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
  220e48:	e0bffd17 	ldw	r2,-12(fp)
  220e4c:	10800017 	ldw	r2,0(r2)
  220e50:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  220e54:	e0fffd17 	ldw	r3,-12(fp)
  220e58:	008008b4 	movhi	r2,34
  220e5c:	10853d04 	addi	r2,r2,5364
  220e60:	18bfcb1e 	bne	r3,r2,220d90 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  220e64:	0005883a 	mov	r2,zero
}
  220e68:	e037883a 	mov	sp,fp
  220e6c:	dfc00117 	ldw	ra,4(sp)
  220e70:	df000017 	ldw	fp,0(sp)
  220e74:	dec00204 	addi	sp,sp,8
  220e78:	f800283a 	ret

00220e7c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  220e7c:	defffa04 	addi	sp,sp,-24
  220e80:	dfc00515 	stw	ra,20(sp)
  220e84:	df000415 	stw	fp,16(sp)
  220e88:	dc000315 	stw	r16,12(sp)
  220e8c:	df000304 	addi	fp,sp,12
  220e90:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  220e94:	00bffa04 	movi	r2,-24
  220e98:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  220e9c:	e03ffd15 	stw	zero,-12(fp)
  220ea0:	00002106 	br	220f28 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
  220ea4:	040008b4 	movhi	r16,34
  220ea8:	8404a504 	addi	r16,r16,4756
  220eac:	e0bffd17 	ldw	r2,-12(fp)
  220eb0:	1009883a 	mov	r4,r2
  220eb4:	01400304 	movi	r5,12
  220eb8:	02211b80 	call	2211b8 <__mulsi3>
  220ebc:	8085883a 	add	r2,r16,r2
  220ec0:	10800017 	ldw	r2,0(r2)
  220ec4:	1000151e 	bne	r2,zero,220f1c <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
  220ec8:	040008b4 	movhi	r16,34
  220ecc:	8404a504 	addi	r16,r16,4756
  220ed0:	e0bffd17 	ldw	r2,-12(fp)
  220ed4:	1009883a 	mov	r4,r2
  220ed8:	01400304 	movi	r5,12
  220edc:	02211b80 	call	2211b8 <__mulsi3>
  220ee0:	8085883a 	add	r2,r16,r2
  220ee4:	e0ffff17 	ldw	r3,-4(fp)
  220ee8:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
  220eec:	008008b4 	movhi	r2,34
  220ef0:	10854104 	addi	r2,r2,5380
  220ef4:	10c00017 	ldw	r3,0(r2)
  220ef8:	e0bffd17 	ldw	r2,-12(fp)
  220efc:	1880040e 	bge	r3,r2,220f10 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
  220f00:	008008b4 	movhi	r2,34
  220f04:	10854104 	addi	r2,r2,5380
  220f08:	e0fffd17 	ldw	r3,-12(fp)
  220f0c:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
  220f10:	e0bffd17 	ldw	r2,-12(fp)
  220f14:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
  220f18:	00000606 	br	220f34 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  220f1c:	e0bffd17 	ldw	r2,-12(fp)
  220f20:	10800044 	addi	r2,r2,1
  220f24:	e0bffd15 	stw	r2,-12(fp)
  220f28:	e0bffd17 	ldw	r2,-12(fp)
  220f2c:	10800810 	cmplti	r2,r2,32
  220f30:	103fdc1e 	bne	r2,zero,220ea4 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  220f34:	e0bffe17 	ldw	r2,-8(fp)
}
  220f38:	e037883a 	mov	sp,fp
  220f3c:	dfc00217 	ldw	ra,8(sp)
  220f40:	df000117 	ldw	fp,4(sp)
  220f44:	dc000017 	ldw	r16,0(sp)
  220f48:	dec00304 	addi	sp,sp,12
  220f4c:	f800283a 	ret

00220f50 <exit>:
  220f50:	defffe04 	addi	sp,sp,-8
  220f54:	000b883a 	mov	r5,zero
  220f58:	dc000015 	stw	r16,0(sp)
  220f5c:	dfc00115 	stw	ra,4(sp)
  220f60:	2021883a 	mov	r16,r4
  220f64:	0220fe00 	call	220fe0 <__call_exitprocs>
  220f68:	8009883a 	mov	r4,r16
  220f6c:	02211e00 	call	2211e0 <_exit>

00220f70 <memcmp>:
  220f70:	30000d26 	beq	r6,zero,220fa8 <memcmp+0x38>
  220f74:	20c00003 	ldbu	r3,0(r4)
  220f78:	28800003 	ldbu	r2,0(r5)
  220f7c:	18800c1e 	bne	r3,r2,220fb0 <memcmp+0x40>
  220f80:	31bfff84 	addi	r6,r6,-2
  220f84:	01ffffc4 	movi	r7,-1
  220f88:	00000406 	br	220f9c <memcmp+0x2c>
  220f8c:	20c00003 	ldbu	r3,0(r4)
  220f90:	28800003 	ldbu	r2,0(r5)
  220f94:	31bfffc4 	addi	r6,r6,-1
  220f98:	1880051e 	bne	r3,r2,220fb0 <memcmp+0x40>
  220f9c:	21000044 	addi	r4,r4,1
  220fa0:	29400044 	addi	r5,r5,1
  220fa4:	31fff91e 	bne	r6,r7,220f8c <memcmp+0x1c>
  220fa8:	0005883a 	mov	r2,zero
  220fac:	f800283a 	ret
  220fb0:	1885c83a 	sub	r2,r3,r2
  220fb4:	f800283a 	ret

00220fb8 <strlen>:
  220fb8:	20800007 	ldb	r2,0(r4)
  220fbc:	10000626 	beq	r2,zero,220fd8 <strlen+0x20>
  220fc0:	2005883a 	mov	r2,r4
  220fc4:	10800044 	addi	r2,r2,1
  220fc8:	10c00007 	ldb	r3,0(r2)
  220fcc:	183ffd1e 	bne	r3,zero,220fc4 <strlen+0xc>
  220fd0:	1105c83a 	sub	r2,r2,r4
  220fd4:	f800283a 	ret
  220fd8:	0005883a 	mov	r2,zero
  220fdc:	f800283a 	ret

00220fe0 <__call_exitprocs>:
  220fe0:	008008b4 	movhi	r2,34
  220fe4:	10854304 	addi	r2,r2,5388
  220fe8:	10800017 	ldw	r2,0(r2)
  220fec:	defff204 	addi	sp,sp,-56
  220ff0:	df000c15 	stw	fp,48(sp)
  220ff4:	d8800015 	stw	r2,0(sp)
  220ff8:	10800c04 	addi	r2,r2,48
  220ffc:	dd400915 	stw	r21,36(sp)
  221000:	dfc00d15 	stw	ra,52(sp)
  221004:	ddc00b15 	stw	r23,44(sp)
  221008:	dd800a15 	stw	r22,40(sp)
  22100c:	dd000815 	stw	r20,32(sp)
  221010:	dcc00715 	stw	r19,28(sp)
  221014:	dc800615 	stw	r18,24(sp)
  221018:	dc400515 	stw	r17,20(sp)
  22101c:	dc000415 	stw	r16,16(sp)
  221020:	d9000115 	stw	r4,4(sp)
  221024:	2839883a 	mov	fp,r5
  221028:	d8800215 	stw	r2,8(sp)
  22102c:	057fffc4 	movi	r21,-1
  221030:	d8800017 	ldw	r2,0(sp)
  221034:	dd800217 	ldw	r22,8(sp)
  221038:	15c00c17 	ldw	r23,48(r2)
  22103c:	b8001b26 	beq	r23,zero,2210ac <__call_exitprocs+0xcc>
  221040:	b9000117 	ldw	r4,4(r23)
  221044:	bd002217 	ldw	r20,136(r23)
  221048:	243fffc4 	addi	r16,r4,-1
  22104c:	80001416 	blt	r16,zero,2210a0 <__call_exitprocs+0xc0>
  221050:	244007c4 	addi	r17,r4,31
  221054:	21000044 	addi	r4,r4,1
  221058:	8c63883a 	add	r17,r17,r17
  22105c:	8427883a 	add	r19,r16,r16
  221060:	2109883a 	add	r4,r4,r4
  221064:	8c63883a 	add	r17,r17,r17
  221068:	9ce7883a 	add	r19,r19,r19
  22106c:	2109883a 	add	r4,r4,r4
  221070:	a463883a 	add	r17,r20,r17
  221074:	a4e7883a 	add	r19,r20,r19
  221078:	b925883a 	add	r18,r23,r4
  22107c:	e0001726 	beq	fp,zero,2210dc <__call_exitprocs+0xfc>
  221080:	a0000226 	beq	r20,zero,22108c <__call_exitprocs+0xac>
  221084:	89400017 	ldw	r5,0(r17)
  221088:	2f001426 	beq	r5,fp,2210dc <__call_exitprocs+0xfc>
  22108c:	843fffc4 	addi	r16,r16,-1
  221090:	8c7fff04 	addi	r17,r17,-4
  221094:	9cffff04 	addi	r19,r19,-4
  221098:	94bfff04 	addi	r18,r18,-4
  22109c:	857ff71e 	bne	r16,r21,22107c <__call_exitprocs+0x9c>
  2210a0:	00800034 	movhi	r2,0
  2210a4:	10800004 	addi	r2,r2,0
  2210a8:	1000311e 	bne	r2,zero,221170 <__call_exitprocs+0x190>
  2210ac:	dfc00d17 	ldw	ra,52(sp)
  2210b0:	df000c17 	ldw	fp,48(sp)
  2210b4:	ddc00b17 	ldw	r23,44(sp)
  2210b8:	dd800a17 	ldw	r22,40(sp)
  2210bc:	dd400917 	ldw	r21,36(sp)
  2210c0:	dd000817 	ldw	r20,32(sp)
  2210c4:	dcc00717 	ldw	r19,28(sp)
  2210c8:	dc800617 	ldw	r18,24(sp)
  2210cc:	dc400517 	ldw	r17,20(sp)
  2210d0:	dc000417 	ldw	r16,16(sp)
  2210d4:	dec00e04 	addi	sp,sp,56
  2210d8:	f800283a 	ret
  2210dc:	b9000117 	ldw	r4,4(r23)
  2210e0:	92000017 	ldw	r8,0(r18)
  2210e4:	213fffc4 	addi	r4,r4,-1
  2210e8:	24001a26 	beq	r4,r16,221154 <__call_exitprocs+0x174>
  2210ec:	90000015 	stw	zero,0(r18)
  2210f0:	403fe626 	beq	r8,zero,22108c <__call_exitprocs+0xac>
  2210f4:	ba400117 	ldw	r9,4(r23)
  2210f8:	a0001226 	beq	r20,zero,221144 <__call_exitprocs+0x164>
  2210fc:	00800044 	movi	r2,1
  221100:	1408983a 	sll	r4,r2,r16
  221104:	a1404017 	ldw	r5,256(r20)
  221108:	214a703a 	and	r5,r4,r5
  22110c:	28000d26 	beq	r5,zero,221144 <__call_exitprocs+0x164>
  221110:	a1404117 	ldw	r5,260(r20)
  221114:	2148703a 	and	r4,r4,r5
  221118:	2000101e 	bne	r4,zero,22115c <__call_exitprocs+0x17c>
  22111c:	99400017 	ldw	r5,0(r19)
  221120:	d9000117 	ldw	r4,4(sp)
  221124:	da400315 	stw	r9,12(sp)
  221128:	403ee83a 	callr	r8
  22112c:	da400317 	ldw	r9,12(sp)
  221130:	b9000117 	ldw	r4,4(r23)
  221134:	227fbe1e 	bne	r4,r9,221030 <__call_exitprocs+0x50>
  221138:	b1000017 	ldw	r4,0(r22)
  22113c:	25ffd326 	beq	r4,r23,22108c <__call_exitprocs+0xac>
  221140:	003fbb06 	br	221030 <__call_exitprocs+0x50>
  221144:	da400315 	stw	r9,12(sp)
  221148:	403ee83a 	callr	r8
  22114c:	da400317 	ldw	r9,12(sp)
  221150:	003ff706 	br	221130 <__call_exitprocs+0x150>
  221154:	bc000115 	stw	r16,4(r23)
  221158:	003fe506 	br	2210f0 <__call_exitprocs+0x110>
  22115c:	99000017 	ldw	r4,0(r19)
  221160:	da400315 	stw	r9,12(sp)
  221164:	403ee83a 	callr	r8
  221168:	da400317 	ldw	r9,12(sp)
  22116c:	003ff006 	br	221130 <__call_exitprocs+0x150>
  221170:	b9000117 	ldw	r4,4(r23)
  221174:	20000e1e 	bne	r4,zero,2211b0 <__call_exitprocs+0x1d0>
  221178:	b9000017 	ldw	r4,0(r23)
  22117c:	20000826 	beq	r4,zero,2211a0 <__call_exitprocs+0x1c0>
  221180:	b1000015 	stw	r4,0(r22)
  221184:	a0000226 	beq	r20,zero,221190 <__call_exitprocs+0x1b0>
  221188:	a009883a 	mov	r4,r20
  22118c:	00000000 	call	0 <__alt_mem_vram>
  221190:	b809883a 	mov	r4,r23
  221194:	00000000 	call	0 <__alt_mem_vram>
  221198:	b5c00017 	ldw	r23,0(r22)
  22119c:	003fa706 	br	22103c <__call_exitprocs+0x5c>
  2211a0:	0007883a 	mov	r3,zero
  2211a4:	b82d883a 	mov	r22,r23
  2211a8:	182f883a 	mov	r23,r3
  2211ac:	003fa306 	br	22103c <__call_exitprocs+0x5c>
  2211b0:	b8c00017 	ldw	r3,0(r23)
  2211b4:	003ffb06 	br	2211a4 <__call_exitprocs+0x1c4>

002211b8 <__mulsi3>:
  2211b8:	0005883a 	mov	r2,zero
  2211bc:	20000726 	beq	r4,zero,2211dc <__mulsi3+0x24>
  2211c0:	20c0004c 	andi	r3,r4,1
  2211c4:	2008d07a 	srli	r4,r4,1
  2211c8:	18000126 	beq	r3,zero,2211d0 <__mulsi3+0x18>
  2211cc:	1145883a 	add	r2,r2,r5
  2211d0:	294b883a 	add	r5,r5,r5
  2211d4:	203ffa1e 	bne	r4,zero,2211c0 <__mulsi3+0x8>
  2211d8:	f800283a 	ret
  2211dc:	f800283a 	ret

002211e0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  2211e0:	defffc04 	addi	sp,sp,-16
  2211e4:	df000315 	stw	fp,12(sp)
  2211e8:	df000304 	addi	fp,sp,12
  2211ec:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  2211f0:	0001883a 	nop
  2211f4:	e0bfff17 	ldw	r2,-4(fp)
  2211f8:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
  2211fc:	e0bffd17 	ldw	r2,-12(fp)
  221200:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  221204:	e0bffe17 	ldw	r2,-8(fp)
  221208:	10000226 	beq	r2,zero,221214 <_exit+0x34>
    ALT_SIM_FAIL();
  22120c:	002af070 	cmpltui	zero,zero,43969
  221210:	00000106 	br	221218 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
  221214:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  221218:	003fff06 	br	221218 <_exit+0x38>
