
hello_world_2nd.elf:     file format elf32-littlenios2
hello_world_2nd.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x001201b8

Program Header:
    LOAD off    0x00001000 vaddr 0x00120000 paddr 0x00120000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00120020 paddr 0x00120020 align 2**12
         filesz 0x00002450 memsz 0x00002450 flags r-x
    LOAD off    0x00003470 vaddr 0x00122470 paddr 0x0012274c align 2**12
         filesz 0x000002dc memsz 0x000002dc flags rw-
    LOAD off    0x00003a28 vaddr 0x00122a28 paddr 0x00122a28 align 2**12
         filesz 0x00000000 memsz 0x000001a0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00120000  00120000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00120020  00120020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00002280  001201b8  001201b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000038  00122438  00122438  00003438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002dc  00122470  0012274c  00003470  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000001a0  00122a28  00122a28  00003a28  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  0000374c  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000005d0  00000000  00000000  00003770  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00007e34  00000000  00000000  00003d40  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00002911  00000000  00000000  0000bb74  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00002fa4  00000000  00000000  0000e485  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000854  00000000  00000000  0001142c  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00001632  00000000  00000000  00011c80  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00001d49  00000000  00000000  000132b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000030  00000000  00000000  00014ffc  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000288  00000000  00000000  00015030  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  00016d91  2**0
                  CONTENTS, READONLY
 17 .cpu          00000004  00000000  00000000  00016d94  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  00016d98  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00016d99  2**0
                  CONTENTS, READONLY
 20 .stderr_dev   00000004  00000000  00000000  00016d9a  2**0
                  CONTENTS, READONLY
 21 .stdin_dev    00000004  00000000  00000000  00016d9e  2**0
                  CONTENTS, READONLY
 22 .stdout_dev   00000004  00000000  00000000  00016da2  2**0
                  CONTENTS, READONLY
 23 .sopc_system_name 0000000e  00000000  00000000  00016da6  2**0
                  CONTENTS, READONLY
 24 .quartus_project_dir 00000026  00000000  00000000  00016db4  2**0
                  CONTENTS, READONLY
 25 .sopcinfo     000419eb  00000000  00000000  00016dda  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00120000 l    d  .entry	00000000 .entry
00120020 l    d  .exceptions	00000000 .exceptions
001201b8 l    d  .text	00000000 .text
00122438 l    d  .rodata	00000000 .rodata
00122470 l    d  .rwdata	00000000 .rwdata
00122a28 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Users/tago/Dropbox/OUT/EE52/software/hello_world_2nd_bsp//obj/HAL/src/crt0.o
00120200 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00120094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 obj/default/keys.o
00122470 l       .rwdata	00000000 curr_key
001202e0 l       .text	00000000 keys_handler_push1
001202e8 l       .text	00000000 keys_handler_push2
001202f0 l       .text	00000000 keys_handler_rot1r
001202f8 l       .text	00000000 keys_handler_rot1l
00120300 l       .text	00000000 keys_handler_rot2r
00120308 l       .text	00000000 keys_handler_rot2l
00120310 l       .text	00000000 keys_handler_done
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00122474 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00120c34 l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
0012102c l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00121190 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
001212cc l     F .text	00000038 alt_dev_reg
00122554 l     O .rwdata	0000002c jtag
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_close.c
001215b4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00121710 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0012173c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00121914 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00121a4c l     F .text	00000050 alt_get_errno
00121a9c l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
00121118 g     F .text	00000078 alt_main
00122a3c g     O .bss	00000100 alt_irq
0012274c g       *ABS*	00000000 __flash_rwdata_start
0012038c g     F .text	0000004c printf
00000000  w      *UND*	00000000 __errno
00120000 g     F .entry	0000001c __reset
00120020 g       *ABS*	00000000 __flash_exceptions_start
00120244 g       .text	00000000 keys_init
00122a28 g     O .bss	00000004 errno
00080000 g       *ABS*	00000000 __alt_mem_rom
00122a34 g     O .bss	00000004 alt_argv
0012a728 g       *ABS*	00000000 _gp
001225a8 g     O .rwdata	00000180 alt_fd_list
00121d3c g     F .text	00000090 alt_find_dev
001219d4 g     F .text	00000078 alt_io_redirect
00122438 g       *ABS*	00000000 __DTOR_END__
00121428 g     F .text	000000f4 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00120350 g     F .text	0000003c _printf_r
00120d54 g     F .text	00000008 __udivsi3
00121f94 g     F .text	0000008c alt_icache_flush
00120000 g       *ABS*	00000000 __alt_mem_ram
00122744 g     O .rwdata	00000004 alt_max_fd
00120340 g       .text	00000000 key_available
00122728 g     O .rwdata	00000004 _global_impure_ptr
00122bc8 g       *ABS*	00000000 __bss_end
00120f3c g     F .text	000000f0 alt_iic_isr_register
00120ef0 g     F .text	0000004c alt_ic_irq_enabled
00122a2c g     O .bss	00000004 alt_irq_active
001200ec g     F .exceptions	000000cc alt_irq_handler
00122580 g     O .rwdata	00000028 alt_dev_null
001216cc g     F .text	00000044 alt_dcache_flush_all
0012274c g       *ABS*	00000000 __ram_rwdata_end
0012273c g     O .rwdata	00000008 alt_dev_list
001211e0 g     F .text	000000ec write
00122470 g       *ABS*	00000000 __ram_rodata_end
00120d5c g     F .text	00000008 __umodsi3
00122bc8 g       *ABS*	00000000 end
00122438 g       *ABS*	00000000 __CTOR_LIST__
00140000 g       *ABS*	00000000 __alt_stack_pointer
0012151c g     F .text	00000098 altera_avalon_jtag_uart_write
001203d8 g     F .text	000006c4 ___vfprintf_internal_r
00122224 g     F .text	000001d8 __call_exitprocs
001201b8 g     F .text	0000004c _start
00121338 g     F .text	00000030 alt_sys_init
0012209c g     F .text	00000188 __register_exitproc
00122470 g       *ABS*	00000000 __ram_rwdata_start
00122438 g       *ABS*	00000000 __ram_rodata_start
00121368 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00121ee0 g     F .text	000000b4 alt_get_fd
00122054 g     F .text	00000048 memcmp
00122bc8 g       *ABS*	00000000 __alt_stack_base
00121dcc g     F .text	00000114 alt_find_file
0012178c g     F .text	000000a0 alt_dev_llist_insert
00120ac0 g     F .text	000000e0 __sfvwrite_small_dev
00122a28 g       *ABS*	00000000 __bss_start
00120204 g     F .text	00000040 main
00122a38 g     O .bss	00000004 alt_envp
001213c8 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00122b3c g     O .bss	0000008c _atexit0
00122748 g     O .rwdata	00000004 alt_errno
00120ca8 g     F .text	00000050 __divsi3
00122438 g       *ABS*	00000000 __CTOR_END__
00122438 g       *ABS*	00000000 __flash_rodata_start
00122438 g       *ABS*	00000000 __DTOR_LIST__
00121304 g     F .text	00000034 alt_irq_init
00121cbc g     F .text	00000060 alt_release_fd
00122020 g     F .text	00000014 atexit
00120bc8 g     F .text	0000006c _write_r
0012272c g     O .rwdata	00000004 _impure_ptr
00122a30 g     O .bss	00000004 alt_argc
00121888 g     F .text	0000005c _do_dtors
00120328 g       .text	00000000 getkey
00120020 g       .exceptions	00000000 alt_irq_entry
00122734 g     O .rwdata	00000008 alt_fs_list
00120020 g       *ABS*	00000000 __ram_exceptions_start
00120d64 g     F .text	00000050 alt_ic_isr_register
0012274c g       *ABS*	00000000 _edata
00122bc8 g       *ABS*	00000000 _end
001201b8 g       *ABS*	00000000 __ram_exceptions_end
00120e50 g     F .text	000000a0 alt_ic_irq_disable
00121d1c g     F .text	00000020 altera_nios2_qsys_irq_init
00122034 g     F .text	00000020 exit
00120cf8 g     F .text	0000005c __modsi3
00140000 g       *ABS*	00000000 __alt_data_end
00120020 g     F .exceptions	00000000 alt_exception
0012029c g       .text	00000000 keys_handler
001223fc g     F .text	0000003c _exit
00120ba0 g     F .text	00000028 strlen
00121b68 g     F .text	00000154 open
001218e4 g     F .text	00000030 alt_icache_flush_all
00122730 g     O .rwdata	00000004 alt_priority_mask
00120db4 g     F .text	0000009c alt_ic_irq_enable
00120a9c g     F .text	00000024 __vfprintf_internal
0012182c g     F .text	0000005c _do_ctors
00121604 g     F .text	000000c8 close
00121098 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

00120000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  120000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  120004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  120008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  12000c:	00bffd16 	blt	zero,r2,120004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  120010:	004004b4 	movhi	at,18
    ori r1, r1, %lo(_start)
  120014:	08406e14 	ori	at,at,440
    jmp r1
  120018:	0800683a 	jmp	at
  12001c:	00000000 	call	0 <__alt_mem_rom-0x80000>

Disassembly of section .exceptions:

00120020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  120020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  120024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  120028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  12002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  120030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  120034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  120038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  12003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  120040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  120044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  120048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  12004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  120050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  120054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  120058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  12005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  120060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  120064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  120068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  12006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  120070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  120074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  120078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  12007c:	10000326 	beq	r2,zero,12008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  120080:	20000226 	beq	r4,zero,12008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  120084:	01200ec0 	call	1200ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  120088:	00000306 	br	120098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  12008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  120090:	e8bfff17 	ldw	r2,-4(ea)

00120094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  120094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  120098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  12009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  1200a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  1200a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  1200a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  1200ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  1200b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  1200b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  1200b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  1200bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  1200c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  1200c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  1200c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  1200cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  1200d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  1200d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  1200d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  1200dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  1200e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  1200e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  1200e8:	ef80083a 	eret

001200ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  1200ec:	defff904 	addi	sp,sp,-28
  1200f0:	dfc00615 	stw	ra,24(sp)
  1200f4:	df000515 	stw	fp,20(sp)
  1200f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  1200fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  120100:	0005313a 	rdctl	r2,ipending
  120104:	e0bffe15 	stw	r2,-8(fp)

  return active;
  120108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  12010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
  120110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  120114:	00800044 	movi	r2,1
  120118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  12011c:	e0fffb17 	ldw	r3,-20(fp)
  120120:	e0bffc17 	ldw	r2,-16(fp)
  120124:	1884703a 	and	r2,r3,r2
  120128:	10001726 	beq	r2,zero,120188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  12012c:	00c004b4 	movhi	r3,18
  120130:	18ca8f04 	addi	r3,r3,10812
  120134:	e0bffd17 	ldw	r2,-12(fp)
  120138:	100490fa 	slli	r2,r2,3
  12013c:	1885883a 	add	r2,r3,r2
  120140:	10c00017 	ldw	r3,0(r2)
  120144:	010004b4 	movhi	r4,18
  120148:	210a8f04 	addi	r4,r4,10812
  12014c:	e0bffd17 	ldw	r2,-12(fp)
  120150:	100490fa 	slli	r2,r2,3
  120154:	2085883a 	add	r2,r4,r2
  120158:	10800104 	addi	r2,r2,4
  12015c:	10800017 	ldw	r2,0(r2)
  120160:	1009883a 	mov	r4,r2
  120164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
  120168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  12016c:	0005313a 	rdctl	r2,ipending
  120170:	e0bfff15 	stw	r2,-4(fp)

  return active;
  120174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
  120178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
  12017c:	e0bffb17 	ldw	r2,-20(fp)
  120180:	103fe31e 	bne	r2,zero,120110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  120184:	00000706 	br	1201a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
  120188:	e0bffc17 	ldw	r2,-16(fp)
  12018c:	1085883a 	add	r2,r2,r2
  120190:	e0bffc15 	stw	r2,-16(fp)
      i++;
  120194:	e0bffd17 	ldw	r2,-12(fp)
  120198:	10800044 	addi	r2,r2,1
  12019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  1201a0:	003fde06 	br	12011c <alt_irq_handler+0x30>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
  1201a4:	e037883a 	mov	sp,fp
  1201a8:	dfc00117 	ldw	ra,4(sp)
  1201ac:	df000017 	ldw	fp,0(sp)
  1201b0:	dec00204 	addi	sp,sp,8
  1201b4:	f800283a 	ret

Disassembly of section .text:

001201b8 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  1201b8:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  1201bc:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  1201c0:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
  1201c4:	00bffd16 	blt	zero,r2,1201bc <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  1201c8:	06c00534 	movhi	sp,20
    ori sp, sp, %lo(__alt_stack_pointer)
  1201cc:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  1201d0:	068004b4 	movhi	gp,18
    ori gp, gp, %lo(_gp)
  1201d4:	d6a9ca14 	ori	gp,gp,42792
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  1201d8:	008004b4 	movhi	r2,18
    ori r2, r2, %lo(__bss_start)
  1201dc:	108a8a14 	ori	r2,r2,10792

    movhi r3, %hi(__bss_end)
  1201e0:	00c004b4 	movhi	r3,18
    ori r3, r3, %lo(__bss_end)
  1201e4:	18caf214 	ori	r3,r3,11208

    beq r2, r3, 1f
  1201e8:	10c00326 	beq	r2,r3,1201f8 <_start+0x40>

0:
    stw zero, (r2)
  1201ec:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  1201f0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  1201f4:	10fffd36 	bltu	r2,r3,1201ec <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  1201f8:	01210980 	call	121098 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  1201fc:	01211180 	call	121118 <alt_main>

00120200 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  120200:	003fff06 	br	120200 <alt_after_alt_main>

00120204 <main>:
extern int key_available();
extern unsigned char getkey();
extern void keys_init();

int main()
{
  120204:	defffe04 	addi	sp,sp,-8
  120208:	dfc00115 	stw	ra,4(sp)
  12020c:	df000015 	stw	fp,0(sp)
  120210:	d839883a 	mov	fp,sp
    }
  printf("ROM: Success!\n");
#endif /* TEST_ROM */

#ifdef KEYS_TEST
  keys_init();
  120214:	01202440 	call	120244 <keys_init>
  120218:	00000106 	br	120220 <main+0x1c>
  while (1)
  {
	  if (key_available())
		  printf("Key pressed: %d\n", (int)getkey());
  }
  12021c:	0001883a 	nop

#ifdef KEYS_TEST
  keys_init();
  while (1)
  {
	  if (key_available())
  120220:	01203400 	call	120340 <key_available>
  120224:	103ffd26 	beq	r2,zero,12021c <main+0x18>
		  printf("Key pressed: %d\n", (int)getkey());
  120228:	01203280 	call	120328 <getkey>
  12022c:	10803fcc 	andi	r2,r2,255
  120230:	010004b4 	movhi	r4,18
  120234:	21090e04 	addi	r4,r4,9272
  120238:	100b883a 	mov	r5,r2
  12023c:	012038c0 	call	12038c <printf>
  }
  120240:	003ff606 	br	12021c <main+0x18>

00120244 <keys_init>:
    .section .text

/* keys_init */
    .global keys_init
keys_init:
    ADDI    sp, sp, NEG_WORD_SIZE  /* push return address */
  120244:	deffff04 	addi	sp,sp,-4
    STW     ra, 0(sp)
  120248:	dfc00015 	stw	ra,0(sp)
  12024c:	024004b4 	movhi	r9,18

    MOVIA   r9, curr_key           /* no key (r0) available at start */
  120250:	4a491c04 	addi	r9,r9,9328
    STB     r0, 0(r9)              /* so store it into variable curr_key */
  120254:	48000005 	stb	zero,0(r9)

	MOVHI   r8, %hi(PIO_0_BASE)    /* write to the PIO registers */
  120258:	02000534 	movhi	r8,20
    ORI 	r8, r8, %lo(PIO_0_BASE)
  12025c:	42040814 	ori	r8,r8,4128
    MOVI    r9, ENABLE_ALL         /*  the ENABLE_ALL value */
  120260:	02400fc4 	movi	r9,63
    STBIO   r9, EDGE_CAP_OF(r8)    /* sending general EOI to clear ints */
  120264:	42400325 	stbio	r9,12(r8)

    MOV     r4, r0                 /* argument ic_id is ignored */
  120268:	0009883a 	mov	r4,zero
    MOVI    r5, PIO_0_IRQ          /* second arg is IRQ num */
  12026c:	01400044 	movi	r5,1
  120270:	018004b4 	movhi	r6,18
    MOVIA   r6, keys_handler       /* third arg is int handler */
  120274:	3180a704 	addi	r6,r6,668
    MOV     r7, r0                 /* fourth arg is data struct (null) */
  120278:	000f883a 	mov	r7,zero
    ADDI    sp, sp, NEG_WORD_SIZE  /* fifth arg goes on stack */
  12027c:	deffff04 	addi	sp,sp,-4
    STW     r0, 0(sp)              /*  and is ignored (so 0) */
  120280:	d8000015 	stw	zero,0(sp)
    CALL    alt_ic_isr_register    /* finally, call setup function */
  120284:	0120d640 	call	120d64 <alt_ic_isr_register>
    ADDI    sp, sp, WORD_SIZE      /* clean up stack after call */
  120288:	dec00104 	addi	sp,sp,4

    LDW     ra, 0(sp)              /* pop return address */
  12028c:	dfc00017 	ldw	ra,0(sp)
    ADDI    sp, sp, WORD_SIZE
  120290:	dec00104 	addi	sp,sp,4

    STBIO   r9, INTMASK_OF(r8)     /* enable (unmask) interrupts */
  120294:	42400225 	stbio	r9,8(r8)

    RET                            /* and finally return */
  120298:	f800283a 	ret

0012029c <keys_handler>:


/* keys_handler */
    .global keys_handler
keys_handler:
    ADDI    sp, sp, NEG_WORD_SIZE   /* save r8 */
  12029c:	deffff04 	addi	sp,sp,-4
    STW     r8, 0(sp)
  1202a0:	da000015 	stw	r8,0(sp)

    MOVHI   et, %hi(PIO_0_BASE)  /* fetch PIO edge capture register */
  1202a4:	06000534 	movhi	et,20
    ORI 	et, et, %lo(PIO_0_BASE)
  1202a8:	c6040814 	ori	et,et,4128
    LDBIO   r8, EDGE_CAP_OF(et)
  1202ac:	c2000327 	ldbio	r8,12(et)

    STBIO   r8, EDGE_CAP_OF(et)  /* and write back to send EOI */
  1202b0:	c2000325 	stbio	r8,12(et)
                                 /* figure out what interrupt fired */
    MOVI    et, PUSH1_MASK       /* check if it was pushbutton 1 */
  1202b4:	06000804 	movi	et,32
    BEQ     r8, et, keys_handler_push1
  1202b8:	46000926 	beq	r8,et,1202e0 <keys_handler_push1>
    MOVI    et, PUSH2_MASK       /* check if it was pushbutton 2 */
  1202bc:	06000404 	movi	et,16
    BEQ     r8, et, keys_handler_push2
  1202c0:	46000926 	beq	r8,et,1202e8 <keys_handler_push2>
    MOVI    et, ROT1R_MASK       /* check if it was rotary enc 1 right */
  1202c4:	06000104 	movi	et,4
    BEQ     r8, et, keys_handler_rot1r
  1202c8:	46000926 	beq	r8,et,1202f0 <keys_handler_rot1r>
    MOVI    et, ROT1L_MASK       /* check if it was rotary enc 1 left */
  1202cc:	06000204 	movi	et,8
    BEQ     r8, et, keys_handler_rot1l
  1202d0:	46000926 	beq	r8,et,1202f8 <keys_handler_rot1l>
    MOVI    et, ROT2R_MASK       /* check if it was rotary enc 2 right */
  1202d4:	06000044 	movi	et,1
    BEQ     r8, et, keys_handler_rot2r
  1202d8:	46000926 	beq	r8,et,120300 <keys_handler_rot2r>
    JMPI    keys_handler_rot2l    /* else it must be rotary enc 2 left */
  1202dc:	01203081 	jmpi	120308 <keys_handler_rot2l>

001202e0 <keys_handler_push1>:

keys_handler_push1:               /* handle pushbutton 1 ints */
    MOVI    et, KEY_MENU          /*  translates into menu key */
  1202e0:	06000044 	movi	et,1
    JMPI    keys_handler_done
  1202e4:	01203101 	jmpi	120310 <keys_handler_done>

001202e8 <keys_handler_push2>:

keys_handler_push2:               /* handle pushbutton 2 ints */
    MOVI    et, KEY_MENU          /*  translates into menu key */
  1202e8:	06000044 	movi	et,1
    JMPI    keys_handler_done
  1202ec:	01203101 	jmpi	120310 <keys_handler_done>

001202f0 <keys_handler_rot1r>:

keys_handler_rot1r:               /* handle rotary enc 1 right ints */
    MOVI    et, KEY_DOWN          /*  translates into  up key */
  1202f0:	060000c4 	movi	et,3
    JMPI    keys_handler_done
  1202f4:	01203101 	jmpi	120310 <keys_handler_done>

001202f8 <keys_handler_rot1l>:

keys_handler_rot1l:               /* handle rotary enc 2 left ints */
    MOVI    et, KEY_UP            /*  translates into down key */
  1202f8:	06000084 	movi	et,2
    JMPI    keys_handler_done
  1202fc:	01203101 	jmpi	120310 <keys_handler_done>

00120300 <keys_handler_rot2r>:

keys_handler_rot2r:               /* handle rotary enc 2 right ints */
    MOVI    et, KEY_RIGHT         /*  translates into right key */
  120300:	06000144 	movi	et,5
    JMPI    keys_handler_done
  120304:	01203101 	jmpi	120310 <keys_handler_done>

00120308 <keys_handler_rot2l>:

keys_handler_rot2l:               /* handle rotary enc 2 left ints */
    MOVI    et, KEY_LEFT           /*  translates into left key */
  120308:	06000104 	movi	et,4
    JMPI    keys_handler_done
  12030c:	01203101 	jmpi	120310 <keys_handler_done>

00120310 <keys_handler_done>:
  120310:	020004b4 	movhi	r8,18

keys_handler_done:                /* handling completed */
	MOVIA   r8, curr_key          /* save to curr_key */
  120314:	42091c04 	addi	r8,r8,9328
    STB     et, 0(r8)             /*  the processed key */
  120318:	46000005 	stb	et,0(r8)

    LDW     r8, 0(sp)             /* restore r8 */
  12031c:	da000017 	ldw	r8,0(sp)
    ADDI    sp, sp, WORD_SIZE
  120320:	dec00104 	addi	sp,sp,4
    RET                           /* use eret to return from int handler */
  120324:	f800283a 	ret

00120328 <getkey>:
  120328:	020004b4 	movhi	r8,18


/* getKey */
    .global getkey
getkey:
    MOVIA   r8, curr_key      /* return current pending key */
  12032c:	42091c04 	addi	r8,r8,9328
    LDB     r2, 0(r8)
  120330:	40800007 	ldb	r2,0(r8)
    BEQ     r0, r2, getkey    /* if there is no key (curr_key == r0), block */
  120334:	00bffc26 	beq	zero,r2,120328 <getkey>

	STB     r0, 0(r8) 	      /* clear current key */
  120338:	40000005 	stb	zero,0(r8)
    RET                       /* return with current pending key in r2 */
  12033c:	f800283a 	ret

00120340 <key_available>:
  120340:	020004b4 	movhi	r8,18

/* key_available */
    .globl key_available
key_available:
    MOVIA   r8, curr_key       /* return current pending key */
  120344:	42091c04 	addi	r8,r8,9328
    LDB     r2, 0(r8)          /* will be zero (FALSE) if no key is pending */
  120348:	40800007 	ldb	r2,0(r8)

    RET                        /* return with boolean in r2 */
  12034c:	f800283a 	ret

00120350 <_printf_r>:
  120350:	defffd04 	addi	sp,sp,-12
  120354:	dfc00015 	stw	ra,0(sp)
  120358:	d9800115 	stw	r6,4(sp)
  12035c:	d9c00215 	stw	r7,8(sp)
  120360:	20800217 	ldw	r2,8(r4)
  120364:	00c004b4 	movhi	r3,18
  120368:	18c2b004 	addi	r3,r3,2752
  12036c:	280d883a 	mov	r6,r5
  120370:	10c00115 	stw	r3,4(r2)
  120374:	100b883a 	mov	r5,r2
  120378:	d9c00104 	addi	r7,sp,4
  12037c:	01203d80 	call	1203d8 <___vfprintf_internal_r>
  120380:	dfc00017 	ldw	ra,0(sp)
  120384:	dec00304 	addi	sp,sp,12
  120388:	f800283a 	ret

0012038c <printf>:
  12038c:	defffc04 	addi	sp,sp,-16
  120390:	dfc00015 	stw	ra,0(sp)
  120394:	d9400115 	stw	r5,4(sp)
  120398:	d9800215 	stw	r6,8(sp)
  12039c:	d9c00315 	stw	r7,12(sp)
  1203a0:	008004b4 	movhi	r2,18
  1203a4:	1089cb04 	addi	r2,r2,10028
  1203a8:	10800017 	ldw	r2,0(r2)
  1203ac:	00c004b4 	movhi	r3,18
  1203b0:	18c2b004 	addi	r3,r3,2752
  1203b4:	200b883a 	mov	r5,r4
  1203b8:	10800217 	ldw	r2,8(r2)
  1203bc:	d9800104 	addi	r6,sp,4
  1203c0:	10c00115 	stw	r3,4(r2)
  1203c4:	1009883a 	mov	r4,r2
  1203c8:	0120a9c0 	call	120a9c <__vfprintf_internal>
  1203cc:	dfc00017 	ldw	ra,0(sp)
  1203d0:	dec00404 	addi	sp,sp,16
  1203d4:	f800283a 	ret

001203d8 <___vfprintf_internal_r>:
  1203d8:	deffe204 	addi	sp,sp,-120
  1203dc:	d8c00804 	addi	r3,sp,32
  1203e0:	df001c15 	stw	fp,112(sp)
  1203e4:	ddc01b15 	stw	r23,108(sp)
  1203e8:	dd401915 	stw	r21,100(sp)
  1203ec:	dd001815 	stw	r20,96(sp)
  1203f0:	dcc01715 	stw	r19,92(sp)
  1203f4:	dc801615 	stw	r18,88(sp)
  1203f8:	dc001415 	stw	r16,80(sp)
  1203fc:	dfc01d15 	stw	ra,116(sp)
  120400:	dd801a15 	stw	r22,104(sp)
  120404:	dc401515 	stw	r17,84(sp)
  120408:	2039883a 	mov	fp,r4
  12040c:	d9c00e15 	stw	r7,56(sp)
  120410:	3021883a 	mov	r16,r6
  120414:	0025883a 	mov	r18,zero
  120418:	d8001315 	stw	zero,76(sp)
  12041c:	d8000d15 	stw	zero,52(sp)
  120420:	0029883a 	mov	r20,zero
  120424:	d8000b15 	stw	zero,44(sp)
  120428:	d8000c15 	stw	zero,48(sp)
  12042c:	d8001115 	stw	zero,68(sp)
  120430:	d8001015 	stw	zero,64(sp)
  120434:	002b883a 	mov	r21,zero
  120438:	04c00044 	movi	r19,1
  12043c:	d8c00a15 	stw	r3,40(sp)
  120440:	282f883a 	mov	r23,r5
  120444:	80c00003 	ldbu	r3,0(r16)
  120448:	84000044 	addi	r16,r16,1
  12044c:	18803fcc 	andi	r2,r3,255
  120450:	1080201c 	xori	r2,r2,128
  120454:	10bfe004 	addi	r2,r2,-128
  120458:	10001426 	beq	r2,zero,1204ac <___vfprintf_internal_r+0xd4>
  12045c:	acc02f26 	beq	r21,r19,12051c <___vfprintf_internal_r+0x144>
  120460:	9d401f16 	blt	r19,r21,1204e0 <___vfprintf_internal_r+0x108>
  120464:	a83ff71e 	bne	r21,zero,120444 <___vfprintf_internal_r+0x6c>
  120468:	01000944 	movi	r4,37
  12046c:	1100d526 	beq	r2,r4,1207c4 <___vfprintf_internal_r+0x3ec>
  120470:	b8800117 	ldw	r2,4(r23)
  120474:	d8c00905 	stb	r3,36(sp)
  120478:	e009883a 	mov	r4,fp
  12047c:	b80b883a 	mov	r5,r23
  120480:	d9800904 	addi	r6,sp,36
  120484:	01c00044 	movi	r7,1
  120488:	103ee83a 	callr	r2
  12048c:	10009c1e 	bne	r2,zero,120700 <___vfprintf_internal_r+0x328>
  120490:	80c00003 	ldbu	r3,0(r16)
  120494:	94800044 	addi	r18,r18,1
  120498:	84000044 	addi	r16,r16,1
  12049c:	18803fcc 	andi	r2,r3,255
  1204a0:	1080201c 	xori	r2,r2,128
  1204a4:	10bfe004 	addi	r2,r2,-128
  1204a8:	103fec1e 	bne	r2,zero,12045c <___vfprintf_internal_r+0x84>
  1204ac:	9005883a 	mov	r2,r18
  1204b0:	dfc01d17 	ldw	ra,116(sp)
  1204b4:	df001c17 	ldw	fp,112(sp)
  1204b8:	ddc01b17 	ldw	r23,108(sp)
  1204bc:	dd801a17 	ldw	r22,104(sp)
  1204c0:	dd401917 	ldw	r21,100(sp)
  1204c4:	dd001817 	ldw	r20,96(sp)
  1204c8:	dcc01717 	ldw	r19,92(sp)
  1204cc:	dc801617 	ldw	r18,88(sp)
  1204d0:	dc401517 	ldw	r17,84(sp)
  1204d4:	dc001417 	ldw	r16,80(sp)
  1204d8:	dec01e04 	addi	sp,sp,120
  1204dc:	f800283a 	ret
  1204e0:	01000084 	movi	r4,2
  1204e4:	a9001126 	beq	r21,r4,12052c <___vfprintf_internal_r+0x154>
  1204e8:	010000c4 	movi	r4,3
  1204ec:	a93fd51e 	bne	r21,r4,120444 <___vfprintf_internal_r+0x6c>
  1204f0:	193ff404 	addi	r4,r3,-48
  1204f4:	21003fcc 	andi	r4,r4,255
  1204f8:	01400244 	movi	r5,9
  1204fc:	29001936 	bltu	r5,r4,120564 <___vfprintf_internal_r+0x18c>
  120500:	d8c00b17 	ldw	r3,44(sp)
  120504:	00bfffc4 	movi	r2,-1
  120508:	1880e126 	beq	r3,r2,120890 <___vfprintf_internal_r+0x4b8>
  12050c:	188002a4 	muli	r2,r3,10
  120510:	2089883a 	add	r4,r4,r2
  120514:	d9000b15 	stw	r4,44(sp)
  120518:	003fca06 	br	120444 <___vfprintf_internal_r+0x6c>
  12051c:	01000c04 	movi	r4,48
  120520:	1100d626 	beq	r2,r4,12087c <___vfprintf_internal_r+0x4a4>
  120524:	01000944 	movi	r4,37
  120528:	1100f026 	beq	r2,r4,1208ec <___vfprintf_internal_r+0x514>
  12052c:	193ff404 	addi	r4,r3,-48
  120530:	21003fcc 	andi	r4,r4,255
  120534:	01400244 	movi	r5,9
  120538:	29000836 	bltu	r5,r4,12055c <___vfprintf_internal_r+0x184>
  12053c:	d8c00c17 	ldw	r3,48(sp)
  120540:	00bfffc4 	movi	r2,-1
  120544:	1880d026 	beq	r3,r2,120888 <___vfprintf_internal_r+0x4b0>
  120548:	188002a4 	muli	r2,r3,10
  12054c:	2089883a 	add	r4,r4,r2
  120550:	d9000c15 	stw	r4,48(sp)
  120554:	05400084 	movi	r21,2
  120558:	003fba06 	br	120444 <___vfprintf_internal_r+0x6c>
  12055c:	01000b84 	movi	r4,46
  120560:	1100a526 	beq	r2,r4,1207f8 <___vfprintf_internal_r+0x420>
  120564:	01001b04 	movi	r4,108
  120568:	1100a126 	beq	r2,r4,1207f0 <___vfprintf_internal_r+0x418>
  12056c:	d9400b17 	ldw	r5,44(sp)
  120570:	00bfffc4 	movi	r2,-1
  120574:	2880da26 	beq	r5,r2,1208e0 <___vfprintf_internal_r+0x508>
  120578:	d8001015 	stw	zero,64(sp)
  12057c:	18ffea04 	addi	r3,r3,-88
  120580:	18c03fcc 	andi	r3,r3,255
  120584:	00800804 	movi	r2,32
  120588:	10c0022e 	bgeu	r2,r3,120594 <___vfprintf_internal_r+0x1bc>
  12058c:	002b883a 	mov	r21,zero
  120590:	003fac06 	br	120444 <___vfprintf_internal_r+0x6c>
  120594:	18c7883a 	add	r3,r3,r3
  120598:	18c7883a 	add	r3,r3,r3
  12059c:	010004b4 	movhi	r4,18
  1205a0:	21016c04 	addi	r4,r4,1456
  1205a4:	1907883a 	add	r3,r3,r4
  1205a8:	18800017 	ldw	r2,0(r3)
  1205ac:	1000683a 	jmp	r2
  1205b0:	00120918 	cmpnei	zero,zero,18468
  1205b4:	0012058c 	andi	zero,zero,18454
  1205b8:	0012058c 	andi	zero,zero,18454
  1205bc:	0012058c 	andi	zero,zero,18454
  1205c0:	0012058c 	andi	zero,zero,18454
  1205c4:	0012058c 	andi	zero,zero,18454
  1205c8:	0012058c 	andi	zero,zero,18454
  1205cc:	0012058c 	andi	zero,zero,18454
  1205d0:	0012058c 	andi	zero,zero,18454
  1205d4:	0012058c 	andi	zero,zero,18454
  1205d8:	0012058c 	andi	zero,zero,18454
  1205dc:	00120928 	cmpgeui	zero,zero,18468
  1205e0:	00120634 	movhi	zero,18456
  1205e4:	0012058c 	andi	zero,zero,18454
  1205e8:	0012058c 	andi	zero,zero,18454
  1205ec:	0012058c 	andi	zero,zero,18454
  1205f0:	0012058c 	andi	zero,zero,18454
  1205f4:	00120634 	movhi	zero,18456
  1205f8:	0012058c 	andi	zero,zero,18454
  1205fc:	0012058c 	andi	zero,zero,18454
  120600:	0012058c 	andi	zero,zero,18454
  120604:	0012058c 	andi	zero,zero,18454
  120608:	0012058c 	andi	zero,zero,18454
  12060c:	00120708 	cmpgei	zero,zero,18460
  120610:	0012058c 	andi	zero,zero,18454
  120614:	0012058c 	andi	zero,zero,18454
  120618:	0012058c 	andi	zero,zero,18454
  12061c:	00120970 	cmpltui	zero,zero,18469
  120620:	0012058c 	andi	zero,zero,18454
  120624:	0012070c 	andi	zero,zero,18460
  120628:	0012058c 	andi	zero,zero,18454
  12062c:	0012058c 	andi	zero,zero,18454
  120630:	00120920 	cmpeqi	zero,zero,18468
  120634:	d8c00d17 	ldw	r3,52(sp)
  120638:	18003426 	beq	r3,zero,12070c <___vfprintf_internal_r+0x334>
  12063c:	d9000e17 	ldw	r4,56(sp)
  120640:	00c00044 	movi	r3,1
  120644:	25800017 	ldw	r22,0(r4)
  120648:	21000104 	addi	r4,r4,4
  12064c:	d9000e15 	stw	r4,56(sp)
  120650:	d8c00d15 	stw	r3,52(sp)
  120654:	b0010b16 	blt	r22,zero,120a84 <___vfprintf_internal_r+0x6ac>
  120658:	d8001215 	stw	zero,72(sp)
  12065c:	d82b883a 	mov	r21,sp
  120660:	b000321e 	bne	r22,zero,12072c <___vfprintf_internal_r+0x354>
  120664:	d8c00b17 	ldw	r3,44(sp)
  120668:	d809883a 	mov	r4,sp
  12066c:	00c00b0e 	bge	zero,r3,12069c <___vfprintf_internal_r+0x2c4>
  120670:	d8800b17 	ldw	r2,44(sp)
  120674:	d82b883a 	mov	r21,sp
  120678:	00c00c04 	movi	r3,48
  12067c:	00000206 	br	120688 <___vfprintf_internal_r+0x2b0>
  120680:	d9400a17 	ldw	r5,40(sp)
  120684:	a9400426 	beq	r21,r5,120698 <___vfprintf_internal_r+0x2c0>
  120688:	a8c00005 	stb	r3,0(r21)
  12068c:	10bfffc4 	addi	r2,r2,-1
  120690:	ad400044 	addi	r21,r21,1
  120694:	103ffa1e 	bne	r2,zero,120680 <___vfprintf_internal_r+0x2a8>
  120698:	a92dc83a 	sub	r22,r21,r4
  12069c:	d8c01217 	ldw	r3,72(sp)
  1206a0:	b0c5883a 	add	r2,r22,r3
  1206a4:	d8c00c17 	ldw	r3,48(sp)
  1206a8:	1885c83a 	sub	r2,r3,r2
  1206ac:	d8c01017 	ldw	r3,64(sp)
  1206b0:	d8800f15 	stw	r2,60(sp)
  1206b4:	18007826 	beq	r3,zero,120898 <___vfprintf_internal_r+0x4c0>
  1206b8:	d8c01217 	ldw	r3,72(sp)
  1206bc:	1800e41e 	bne	r3,zero,120a50 <___vfprintf_internal_r+0x678>
  1206c0:	d8c00f17 	ldw	r3,60(sp)
  1206c4:	00c05c0e 	bge	zero,r3,120838 <___vfprintf_internal_r+0x460>
  1206c8:	00800c04 	movi	r2,48
  1206cc:	d88008c5 	stb	r2,35(sp)
  1206d0:	1c7fffc4 	addi	r17,r3,-1
  1206d4:	00000306 	br	1206e4 <___vfprintf_internal_r+0x30c>
  1206d8:	8c7fffc4 	addi	r17,r17,-1
  1206dc:	013fffc4 	movi	r4,-1
  1206e0:	8900eb26 	beq	r17,r4,120a90 <___vfprintf_internal_r+0x6b8>
  1206e4:	b8800117 	ldw	r2,4(r23)
  1206e8:	e009883a 	mov	r4,fp
  1206ec:	b80b883a 	mov	r5,r23
  1206f0:	d98008c4 	addi	r6,sp,35
  1206f4:	01c00044 	movi	r7,1
  1206f8:	103ee83a 	callr	r2
  1206fc:	103ff626 	beq	r2,zero,1206d8 <___vfprintf_internal_r+0x300>
  120700:	04bfffc4 	movi	r18,-1
  120704:	003f6906 	br	1204ac <___vfprintf_internal_r+0xd4>
  120708:	05000204 	movi	r20,8
  12070c:	d9400e17 	ldw	r5,56(sp)
  120710:	2d800017 	ldw	r22,0(r5)
  120714:	29400104 	addi	r5,r5,4
  120718:	d9400e15 	stw	r5,56(sp)
  12071c:	d8000d15 	stw	zero,52(sp)
  120720:	d8001215 	stw	zero,72(sp)
  120724:	d82b883a 	mov	r21,sp
  120728:	b03fce26 	beq	r22,zero,120664 <___vfprintf_internal_r+0x28c>
  12072c:	9005883a 	mov	r2,r18
  120730:	dc000f15 	stw	r16,60(sp)
  120734:	a025883a 	mov	r18,r20
  120738:	04400244 	movi	r17,9
  12073c:	dc001317 	ldw	r16,76(sp)
  120740:	1029883a 	mov	r20,r2
  120744:	00000506 	br	12075c <___vfprintf_internal_r+0x384>
  120748:	b5800c04 	addi	r22,r22,48
  12074c:	ad800005 	stb	r22,0(r21)
  120750:	102d883a 	mov	r22,r2
  120754:	ad400044 	addi	r21,r21,1
  120758:	10000c26 	beq	r2,zero,12078c <___vfprintf_internal_r+0x3b4>
  12075c:	b009883a 	mov	r4,r22
  120760:	900b883a 	mov	r5,r18
  120764:	0120d540 	call	120d54 <__udivsi3>
  120768:	9089383a 	mul	r4,r18,r2
  12076c:	b12dc83a 	sub	r22,r22,r4
  120770:	8dbff50e 	bge	r17,r22,120748 <___vfprintf_internal_r+0x370>
  120774:	80001126 	beq	r16,zero,1207bc <___vfprintf_internal_r+0x3e4>
  120778:	b5800dc4 	addi	r22,r22,55
  12077c:	ad800005 	stb	r22,0(r21)
  120780:	102d883a 	mov	r22,r2
  120784:	ad400044 	addi	r21,r21,1
  120788:	103ff41e 	bne	r2,zero,12075c <___vfprintf_internal_r+0x384>
  12078c:	d8c00b17 	ldw	r3,44(sp)
  120790:	a005883a 	mov	r2,r20
  120794:	aeedc83a 	sub	r22,r21,sp
  120798:	9029883a 	mov	r20,r18
  12079c:	1025883a 	mov	r18,r2
  1207a0:	1d85c83a 	sub	r2,r3,r22
  1207a4:	dc000f17 	ldw	r16,60(sp)
  1207a8:	d809883a 	mov	r4,sp
  1207ac:	00bfbb0e 	bge	zero,r2,12069c <___vfprintf_internal_r+0x2c4>
  1207b0:	d8c00a17 	ldw	r3,40(sp)
  1207b4:	a8ffb036 	bltu	r21,r3,120678 <___vfprintf_internal_r+0x2a0>
  1207b8:	003fb806 	br	12069c <___vfprintf_internal_r+0x2c4>
  1207bc:	b58015c4 	addi	r22,r22,87
  1207c0:	003fe206 	br	12074c <___vfprintf_internal_r+0x374>
  1207c4:	00c00044 	movi	r3,1
  1207c8:	d8c00d15 	stw	r3,52(sp)
  1207cc:	00ffffc4 	movi	r3,-1
  1207d0:	d8c00b15 	stw	r3,44(sp)
  1207d4:	d8001315 	stw	zero,76(sp)
  1207d8:	05000284 	movi	r20,10
  1207dc:	d8c00c15 	stw	r3,48(sp)
  1207e0:	d8001115 	stw	zero,68(sp)
  1207e4:	d8001015 	stw	zero,64(sp)
  1207e8:	dd400d17 	ldw	r21,52(sp)
  1207ec:	003f1506 	br	120444 <___vfprintf_internal_r+0x6c>
  1207f0:	00c00044 	movi	r3,1
  1207f4:	d8c01115 	stw	r3,68(sp)
  1207f8:	054000c4 	movi	r21,3
  1207fc:	003f1106 	br	120444 <___vfprintf_internal_r+0x6c>
  120800:	d8c00f17 	ldw	r3,60(sp)
  120804:	90e5883a 	add	r18,r18,r3
  120808:	d8c01217 	ldw	r3,72(sp)
  12080c:	18000a26 	beq	r3,zero,120838 <___vfprintf_internal_r+0x460>
  120810:	b8800117 	ldw	r2,4(r23)
  120814:	00c00b44 	movi	r3,45
  120818:	d8c00905 	stb	r3,36(sp)
  12081c:	e009883a 	mov	r4,fp
  120820:	b80b883a 	mov	r5,r23
  120824:	d9800904 	addi	r6,sp,36
  120828:	01c00044 	movi	r7,1
  12082c:	103ee83a 	callr	r2
  120830:	103fb31e 	bne	r2,zero,120700 <___vfprintf_internal_r+0x328>
  120834:	94800044 	addi	r18,r18,1
  120838:	ada3c83a 	sub	r17,r21,r22
  12083c:	05800316 	blt	zero,r22,12084c <___vfprintf_internal_r+0x474>
  120840:	003f5206 	br	12058c <___vfprintf_internal_r+0x1b4>
  120844:	94800044 	addi	r18,r18,1
  120848:	ac7f5026 	beq	r21,r17,12058c <___vfprintf_internal_r+0x1b4>
  12084c:	ad7fffc4 	addi	r21,r21,-1
  120850:	a8c00003 	ldbu	r3,0(r21)
  120854:	b8800117 	ldw	r2,4(r23)
  120858:	e009883a 	mov	r4,fp
  12085c:	d8c00905 	stb	r3,36(sp)
  120860:	b80b883a 	mov	r5,r23
  120864:	d9800904 	addi	r6,sp,36
  120868:	01c00044 	movi	r7,1
  12086c:	103ee83a 	callr	r2
  120870:	103ff426 	beq	r2,zero,120844 <___vfprintf_internal_r+0x46c>
  120874:	04bfffc4 	movi	r18,-1
  120878:	003f0c06 	br	1204ac <___vfprintf_internal_r+0xd4>
  12087c:	dd401015 	stw	r21,64(sp)
  120880:	05400084 	movi	r21,2
  120884:	003eef06 	br	120444 <___vfprintf_internal_r+0x6c>
  120888:	0005883a 	mov	r2,zero
  12088c:	003f2f06 	br	12054c <___vfprintf_internal_r+0x174>
  120890:	0005883a 	mov	r2,zero
  120894:	003f1e06 	br	120510 <___vfprintf_internal_r+0x138>
  120898:	d8c00f17 	ldw	r3,60(sp)
  12089c:	00ffda0e 	bge	zero,r3,120808 <___vfprintf_internal_r+0x430>
  1208a0:	00800804 	movi	r2,32
  1208a4:	d8800885 	stb	r2,34(sp)
  1208a8:	1c7fffc4 	addi	r17,r3,-1
  1208ac:	00000306 	br	1208bc <___vfprintf_internal_r+0x4e4>
  1208b0:	8c7fffc4 	addi	r17,r17,-1
  1208b4:	013fffc4 	movi	r4,-1
  1208b8:	893fd126 	beq	r17,r4,120800 <___vfprintf_internal_r+0x428>
  1208bc:	b8800117 	ldw	r2,4(r23)
  1208c0:	e009883a 	mov	r4,fp
  1208c4:	b80b883a 	mov	r5,r23
  1208c8:	d9800884 	addi	r6,sp,34
  1208cc:	01c00044 	movi	r7,1
  1208d0:	103ee83a 	callr	r2
  1208d4:	103ff626 	beq	r2,zero,1208b0 <___vfprintf_internal_r+0x4d8>
  1208d8:	04bfffc4 	movi	r18,-1
  1208dc:	003ef306 	br	1204ac <___vfprintf_internal_r+0xd4>
  1208e0:	00800044 	movi	r2,1
  1208e4:	d8800b15 	stw	r2,44(sp)
  1208e8:	003f2406 	br	12057c <___vfprintf_internal_r+0x1a4>
  1208ec:	b8c00117 	ldw	r3,4(r23)
  1208f0:	d8800905 	stb	r2,36(sp)
  1208f4:	e009883a 	mov	r4,fp
  1208f8:	b80b883a 	mov	r5,r23
  1208fc:	d9800904 	addi	r6,sp,36
  120900:	a80f883a 	mov	r7,r21
  120904:	183ee83a 	callr	r3
  120908:	103f7d1e 	bne	r2,zero,120700 <___vfprintf_internal_r+0x328>
  12090c:	94800044 	addi	r18,r18,1
  120910:	002b883a 	mov	r21,zero
  120914:	003ecb06 	br	120444 <___vfprintf_internal_r+0x6c>
  120918:	00c00044 	movi	r3,1
  12091c:	d8c01315 	stw	r3,76(sp)
  120920:	05000404 	movi	r20,16
  120924:	003f7906 	br	12070c <___vfprintf_internal_r+0x334>
  120928:	d8c00c17 	ldw	r3,48(sp)
  12092c:	98c0380e 	bge	r19,r3,120a10 <___vfprintf_internal_r+0x638>
  120930:	1dbfffc4 	addi	r22,r3,-1
  120934:	00800804 	movi	r2,32
  120938:	d8800845 	stb	r2,33(sp)
  12093c:	b023883a 	mov	r17,r22
  120940:	057fffc4 	movi	r21,-1
  120944:	8c7fffc4 	addi	r17,r17,-1
  120948:	8d403026 	beq	r17,r21,120a0c <___vfprintf_internal_r+0x634>
  12094c:	b8800117 	ldw	r2,4(r23)
  120950:	e009883a 	mov	r4,fp
  120954:	b80b883a 	mov	r5,r23
  120958:	d9800844 	addi	r6,sp,33
  12095c:	01c00044 	movi	r7,1
  120960:	103ee83a 	callr	r2
  120964:	103ff726 	beq	r2,zero,120944 <___vfprintf_internal_r+0x56c>
  120968:	04bfffc4 	movi	r18,-1
  12096c:	003ecf06 	br	1204ac <___vfprintf_internal_r+0xd4>
  120970:	d9000e17 	ldw	r4,56(sp)
  120974:	d8c00e17 	ldw	r3,56(sp)
  120978:	21000017 	ldw	r4,0(r4)
  12097c:	18c00104 	addi	r3,r3,4
  120980:	d8c00e15 	stw	r3,56(sp)
  120984:	d9000f15 	stw	r4,60(sp)
  120988:	0120ba00 	call	120ba0 <strlen>
  12098c:	d8c00c17 	ldw	r3,48(sp)
  120990:	102d883a 	mov	r22,r2
  120994:	1887c83a 	sub	r3,r3,r2
  120998:	d8c01215 	stw	r3,72(sp)
  12099c:	00c0110e 	bge	zero,r3,1209e4 <___vfprintf_internal_r+0x60c>
  1209a0:	00800804 	movi	r2,32
  1209a4:	d8800805 	stb	r2,32(sp)
  1209a8:	1c7fffc4 	addi	r17,r3,-1
  1209ac:	057fffc4 	movi	r21,-1
  1209b0:	00000206 	br	1209bc <___vfprintf_internal_r+0x5e4>
  1209b4:	8c7fffc4 	addi	r17,r17,-1
  1209b8:	8d400826 	beq	r17,r21,1209dc <___vfprintf_internal_r+0x604>
  1209bc:	b8800117 	ldw	r2,4(r23)
  1209c0:	e009883a 	mov	r4,fp
  1209c4:	b80b883a 	mov	r5,r23
  1209c8:	d9800804 	addi	r6,sp,32
  1209cc:	01c00044 	movi	r7,1
  1209d0:	103ee83a 	callr	r2
  1209d4:	103ff726 	beq	r2,zero,1209b4 <___vfprintf_internal_r+0x5dc>
  1209d8:	003f4906 	br	120700 <___vfprintf_internal_r+0x328>
  1209dc:	d8c01217 	ldw	r3,72(sp)
  1209e0:	90e5883a 	add	r18,r18,r3
  1209e4:	b8800117 	ldw	r2,4(r23)
  1209e8:	d9800f17 	ldw	r6,60(sp)
  1209ec:	e009883a 	mov	r4,fp
  1209f0:	b80b883a 	mov	r5,r23
  1209f4:	b00f883a 	mov	r7,r22
  1209f8:	103ee83a 	callr	r2
  1209fc:	103f401e 	bne	r2,zero,120700 <___vfprintf_internal_r+0x328>
  120a00:	95a5883a 	add	r18,r18,r22
  120a04:	002b883a 	mov	r21,zero
  120a08:	003e8e06 	br	120444 <___vfprintf_internal_r+0x6c>
  120a0c:	95a5883a 	add	r18,r18,r22
  120a10:	d9000e17 	ldw	r4,56(sp)
  120a14:	b8800117 	ldw	r2,4(r23)
  120a18:	b80b883a 	mov	r5,r23
  120a1c:	20c00017 	ldw	r3,0(r4)
  120a20:	d9800904 	addi	r6,sp,36
  120a24:	e009883a 	mov	r4,fp
  120a28:	d8c00905 	stb	r3,36(sp)
  120a2c:	d8c00e17 	ldw	r3,56(sp)
  120a30:	01c00044 	movi	r7,1
  120a34:	1c400104 	addi	r17,r3,4
  120a38:	103ee83a 	callr	r2
  120a3c:	103f301e 	bne	r2,zero,120700 <___vfprintf_internal_r+0x328>
  120a40:	94800044 	addi	r18,r18,1
  120a44:	dc400e15 	stw	r17,56(sp)
  120a48:	002b883a 	mov	r21,zero
  120a4c:	003e7d06 	br	120444 <___vfprintf_internal_r+0x6c>
  120a50:	b8800117 	ldw	r2,4(r23)
  120a54:	00c00b44 	movi	r3,45
  120a58:	d8c00905 	stb	r3,36(sp)
  120a5c:	e009883a 	mov	r4,fp
  120a60:	b80b883a 	mov	r5,r23
  120a64:	d9800904 	addi	r6,sp,36
  120a68:	01c00044 	movi	r7,1
  120a6c:	103ee83a 	callr	r2
  120a70:	103f231e 	bne	r2,zero,120700 <___vfprintf_internal_r+0x328>
  120a74:	d8c00f17 	ldw	r3,60(sp)
  120a78:	94800044 	addi	r18,r18,1
  120a7c:	00ff1216 	blt	zero,r3,1206c8 <___vfprintf_internal_r+0x2f0>
  120a80:	003f6d06 	br	120838 <___vfprintf_internal_r+0x460>
  120a84:	05adc83a 	sub	r22,zero,r22
  120a88:	d8c01215 	stw	r3,72(sp)
  120a8c:	003f2506 	br	120724 <___vfprintf_internal_r+0x34c>
  120a90:	d8c00f17 	ldw	r3,60(sp)
  120a94:	90e5883a 	add	r18,r18,r3
  120a98:	003f6706 	br	120838 <___vfprintf_internal_r+0x460>

00120a9c <__vfprintf_internal>:
  120a9c:	008004b4 	movhi	r2,18
  120aa0:	1089cb04 	addi	r2,r2,10028
  120aa4:	2007883a 	mov	r3,r4
  120aa8:	11000017 	ldw	r4,0(r2)
  120aac:	2805883a 	mov	r2,r5
  120ab0:	300f883a 	mov	r7,r6
  120ab4:	180b883a 	mov	r5,r3
  120ab8:	100d883a 	mov	r6,r2
  120abc:	01203d81 	jmpi	1203d8 <___vfprintf_internal_r>

00120ac0 <__sfvwrite_small_dev>:
  120ac0:	2880000b 	ldhu	r2,0(r5)
  120ac4:	defffa04 	addi	sp,sp,-24
  120ac8:	dcc00315 	stw	r19,12(sp)
  120acc:	10c0020c 	andi	r3,r2,8
  120ad0:	18ffffcc 	andi	r3,r3,65535
  120ad4:	18e0001c 	xori	r3,r3,32768
  120ad8:	dc800215 	stw	r18,8(sp)
  120adc:	dc400115 	stw	r17,4(sp)
  120ae0:	dfc00515 	stw	ra,20(sp)
  120ae4:	dd000415 	stw	r20,16(sp)
  120ae8:	dc000015 	stw	r16,0(sp)
  120aec:	18e00004 	addi	r3,r3,-32768
  120af0:	2825883a 	mov	r18,r5
  120af4:	2027883a 	mov	r19,r4
  120af8:	3023883a 	mov	r17,r6
  120afc:	18002626 	beq	r3,zero,120b98 <__sfvwrite_small_dev+0xd8>
  120b00:	2940008f 	ldh	r5,2(r5)
  120b04:	28001016 	blt	r5,zero,120b48 <__sfvwrite_small_dev+0x88>
  120b08:	01c01a0e 	bge	zero,r7,120b74 <__sfvwrite_small_dev+0xb4>
  120b0c:	3821883a 	mov	r16,r7
  120b10:	05010004 	movi	r20,1024
  120b14:	00000306 	br	120b24 <__sfvwrite_small_dev+0x64>
  120b18:	88a3883a 	add	r17,r17,r2
  120b1c:	0400150e 	bge	zero,r16,120b74 <__sfvwrite_small_dev+0xb4>
  120b20:	9140008f 	ldh	r5,2(r18)
  120b24:	880d883a 	mov	r6,r17
  120b28:	9809883a 	mov	r4,r19
  120b2c:	800f883a 	mov	r7,r16
  120b30:	a400010e 	bge	r20,r16,120b38 <__sfvwrite_small_dev+0x78>
  120b34:	01c10004 	movi	r7,1024
  120b38:	0120bc80 	call	120bc8 <_write_r>
  120b3c:	80a1c83a 	sub	r16,r16,r2
  120b40:	00bff516 	blt	zero,r2,120b18 <__sfvwrite_small_dev+0x58>
  120b44:	9080000b 	ldhu	r2,0(r18)
  120b48:	10801014 	ori	r2,r2,64
  120b4c:	9080000d 	sth	r2,0(r18)
  120b50:	00bfffc4 	movi	r2,-1
  120b54:	dfc00517 	ldw	ra,20(sp)
  120b58:	dd000417 	ldw	r20,16(sp)
  120b5c:	dcc00317 	ldw	r19,12(sp)
  120b60:	dc800217 	ldw	r18,8(sp)
  120b64:	dc400117 	ldw	r17,4(sp)
  120b68:	dc000017 	ldw	r16,0(sp)
  120b6c:	dec00604 	addi	sp,sp,24
  120b70:	f800283a 	ret
  120b74:	0005883a 	mov	r2,zero
  120b78:	dfc00517 	ldw	ra,20(sp)
  120b7c:	dd000417 	ldw	r20,16(sp)
  120b80:	dcc00317 	ldw	r19,12(sp)
  120b84:	dc800217 	ldw	r18,8(sp)
  120b88:	dc400117 	ldw	r17,4(sp)
  120b8c:	dc000017 	ldw	r16,0(sp)
  120b90:	dec00604 	addi	sp,sp,24
  120b94:	f800283a 	ret
  120b98:	00bfffc4 	movi	r2,-1
  120b9c:	003fed06 	br	120b54 <__sfvwrite_small_dev+0x94>

00120ba0 <strlen>:
  120ba0:	20800007 	ldb	r2,0(r4)
  120ba4:	10000626 	beq	r2,zero,120bc0 <strlen+0x20>
  120ba8:	2005883a 	mov	r2,r4
  120bac:	10800044 	addi	r2,r2,1
  120bb0:	10c00007 	ldb	r3,0(r2)
  120bb4:	183ffd1e 	bne	r3,zero,120bac <strlen+0xc>
  120bb8:	1105c83a 	sub	r2,r2,r4
  120bbc:	f800283a 	ret
  120bc0:	0005883a 	mov	r2,zero
  120bc4:	f800283a 	ret

00120bc8 <_write_r>:
  120bc8:	defffd04 	addi	sp,sp,-12
  120bcc:	dc400115 	stw	r17,4(sp)
  120bd0:	dc000015 	stw	r16,0(sp)
  120bd4:	2023883a 	mov	r17,r4
  120bd8:	040004b4 	movhi	r16,18
  120bdc:	840a8a04 	addi	r16,r16,10792
  120be0:	2809883a 	mov	r4,r5
  120be4:	300b883a 	mov	r5,r6
  120be8:	380d883a 	mov	r6,r7
  120bec:	dfc00215 	stw	ra,8(sp)
  120bf0:	80000015 	stw	zero,0(r16)
  120bf4:	01211e00 	call	1211e0 <write>
  120bf8:	00ffffc4 	movi	r3,-1
  120bfc:	10c00526 	beq	r2,r3,120c14 <_write_r+0x4c>
  120c00:	dfc00217 	ldw	ra,8(sp)
  120c04:	dc400117 	ldw	r17,4(sp)
  120c08:	dc000017 	ldw	r16,0(sp)
  120c0c:	dec00304 	addi	sp,sp,12
  120c10:	f800283a 	ret
  120c14:	80c00017 	ldw	r3,0(r16)
  120c18:	183ff926 	beq	r3,zero,120c00 <_write_r+0x38>
  120c1c:	88c00015 	stw	r3,0(r17)
  120c20:	dfc00217 	ldw	ra,8(sp)
  120c24:	dc400117 	ldw	r17,4(sp)
  120c28:	dc000017 	ldw	r16,0(sp)
  120c2c:	dec00304 	addi	sp,sp,12
  120c30:	f800283a 	ret

00120c34 <udivmodsi4>:
  120c34:	2005883a 	mov	r2,r4
  120c38:	2900182e 	bgeu	r5,r4,120c9c <udivmodsi4+0x68>
  120c3c:	28001716 	blt	r5,zero,120c9c <udivmodsi4+0x68>
  120c40:	01000804 	movi	r4,32
  120c44:	00c00044 	movi	r3,1
  120c48:	00000206 	br	120c54 <udivmodsi4+0x20>
  120c4c:	20001126 	beq	r4,zero,120c94 <udivmodsi4+0x60>
  120c50:	28000516 	blt	r5,zero,120c68 <udivmodsi4+0x34>
  120c54:	294b883a 	add	r5,r5,r5
  120c58:	213fffc4 	addi	r4,r4,-1
  120c5c:	18c7883a 	add	r3,r3,r3
  120c60:	28bffa36 	bltu	r5,r2,120c4c <udivmodsi4+0x18>
  120c64:	18000b26 	beq	r3,zero,120c94 <udivmodsi4+0x60>
  120c68:	0009883a 	mov	r4,zero
  120c6c:	11400236 	bltu	r2,r5,120c78 <udivmodsi4+0x44>
  120c70:	1145c83a 	sub	r2,r2,r5
  120c74:	20c8b03a 	or	r4,r4,r3
  120c78:	1806d07a 	srli	r3,r3,1
  120c7c:	280ad07a 	srli	r5,r5,1
  120c80:	183ffa1e 	bne	r3,zero,120c6c <udivmodsi4+0x38>
  120c84:	3000021e 	bne	r6,zero,120c90 <udivmodsi4+0x5c>
  120c88:	2005883a 	mov	r2,r4
  120c8c:	f800283a 	ret
  120c90:	f800283a 	ret
  120c94:	0009883a 	mov	r4,zero
  120c98:	003ffa06 	br	120c84 <udivmodsi4+0x50>
  120c9c:	00c00044 	movi	r3,1
  120ca0:	0009883a 	mov	r4,zero
  120ca4:	003ff106 	br	120c6c <udivmodsi4+0x38>

00120ca8 <__divsi3>:
  120ca8:	defffe04 	addi	sp,sp,-8
  120cac:	dfc00115 	stw	ra,4(sp)
  120cb0:	dc000015 	stw	r16,0(sp)
  120cb4:	20000a16 	blt	r4,zero,120ce0 <__divsi3+0x38>
  120cb8:	0021883a 	mov	r16,zero
  120cbc:	28000b16 	blt	r5,zero,120cec <__divsi3+0x44>
  120cc0:	000d883a 	mov	r6,zero
  120cc4:	0120c340 	call	120c34 <udivmodsi4>
  120cc8:	80000126 	beq	r16,zero,120cd0 <__divsi3+0x28>
  120ccc:	0085c83a 	sub	r2,zero,r2
  120cd0:	dfc00117 	ldw	ra,4(sp)
  120cd4:	dc000017 	ldw	r16,0(sp)
  120cd8:	dec00204 	addi	sp,sp,8
  120cdc:	f800283a 	ret
  120ce0:	0109c83a 	sub	r4,zero,r4
  120ce4:	04000044 	movi	r16,1
  120ce8:	283ff50e 	bge	r5,zero,120cc0 <__divsi3+0x18>
  120cec:	014bc83a 	sub	r5,zero,r5
  120cf0:	8400005c 	xori	r16,r16,1
  120cf4:	003ff206 	br	120cc0 <__divsi3+0x18>

00120cf8 <__modsi3>:
  120cf8:	deffff04 	addi	sp,sp,-4
  120cfc:	dfc00015 	stw	ra,0(sp)
  120d00:	20000516 	blt	r4,zero,120d18 <__modsi3+0x20>
  120d04:	28000c16 	blt	r5,zero,120d38 <__modsi3+0x40>
  120d08:	01800044 	movi	r6,1
  120d0c:	dfc00017 	ldw	ra,0(sp)
  120d10:	dec00104 	addi	sp,sp,4
  120d14:	0120c341 	jmpi	120c34 <udivmodsi4>
  120d18:	0109c83a 	sub	r4,zero,r4
  120d1c:	28000b16 	blt	r5,zero,120d4c <__modsi3+0x54>
  120d20:	01800044 	movi	r6,1
  120d24:	0120c340 	call	120c34 <udivmodsi4>
  120d28:	0085c83a 	sub	r2,zero,r2
  120d2c:	dfc00017 	ldw	ra,0(sp)
  120d30:	dec00104 	addi	sp,sp,4
  120d34:	f800283a 	ret
  120d38:	014bc83a 	sub	r5,zero,r5
  120d3c:	01800044 	movi	r6,1
  120d40:	dfc00017 	ldw	ra,0(sp)
  120d44:	dec00104 	addi	sp,sp,4
  120d48:	0120c341 	jmpi	120c34 <udivmodsi4>
  120d4c:	014bc83a 	sub	r5,zero,r5
  120d50:	003ff306 	br	120d20 <__modsi3+0x28>

00120d54 <__udivsi3>:
  120d54:	000d883a 	mov	r6,zero
  120d58:	0120c341 	jmpi	120c34 <udivmodsi4>

00120d5c <__umodsi3>:
  120d5c:	01800044 	movi	r6,1
  120d60:	0120c341 	jmpi	120c34 <udivmodsi4>

00120d64 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  120d64:	defff904 	addi	sp,sp,-28
  120d68:	dfc00615 	stw	ra,24(sp)
  120d6c:	df000515 	stw	fp,20(sp)
  120d70:	df000504 	addi	fp,sp,20
  120d74:	e13ffc15 	stw	r4,-16(fp)
  120d78:	e17ffd15 	stw	r5,-12(fp)
  120d7c:	e1bffe15 	stw	r6,-8(fp)
  120d80:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  120d84:	e0800217 	ldw	r2,8(fp)
  120d88:	d8800015 	stw	r2,0(sp)
  120d8c:	e13ffc17 	ldw	r4,-16(fp)
  120d90:	e17ffd17 	ldw	r5,-12(fp)
  120d94:	e1bffe17 	ldw	r6,-8(fp)
  120d98:	e1ffff17 	ldw	r7,-4(fp)
  120d9c:	0120f3c0 	call	120f3c <alt_iic_isr_register>
}  
  120da0:	e037883a 	mov	sp,fp
  120da4:	dfc00117 	ldw	ra,4(sp)
  120da8:	df000017 	ldw	fp,0(sp)
  120dac:	dec00204 	addi	sp,sp,8
  120db0:	f800283a 	ret

00120db4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  120db4:	defff904 	addi	sp,sp,-28
  120db8:	df000615 	stw	fp,24(sp)
  120dbc:	df000604 	addi	fp,sp,24
  120dc0:	e13ffe15 	stw	r4,-8(fp)
  120dc4:	e17fff15 	stw	r5,-4(fp)
  120dc8:	e0bfff17 	ldw	r2,-4(fp)
  120dcc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  120dd0:	0005303a 	rdctl	r2,status
  120dd4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  120dd8:	e0fffb17 	ldw	r3,-20(fp)
  120ddc:	00bfff84 	movi	r2,-2
  120de0:	1884703a 	and	r2,r3,r2
  120de4:	1001703a 	wrctl	status,r2
  
  return context;
  120de8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  120dec:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
  120df0:	e0bffa17 	ldw	r2,-24(fp)
  120df4:	00c00044 	movi	r3,1
  120df8:	1884983a 	sll	r2,r3,r2
  120dfc:	1007883a 	mov	r3,r2
  120e00:	008004b4 	movhi	r2,18
  120e04:	108a8b04 	addi	r2,r2,10796
  120e08:	10800017 	ldw	r2,0(r2)
  120e0c:	1886b03a 	or	r3,r3,r2
  120e10:	008004b4 	movhi	r2,18
  120e14:	108a8b04 	addi	r2,r2,10796
  120e18:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  120e1c:	008004b4 	movhi	r2,18
  120e20:	108a8b04 	addi	r2,r2,10796
  120e24:	10800017 	ldw	r2,0(r2)
  120e28:	100170fa 	wrctl	ienable,r2
  120e2c:	e0bffc17 	ldw	r2,-16(fp)
  120e30:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  120e34:	e0bffd17 	ldw	r2,-12(fp)
  120e38:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  120e3c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
  120e40:	e037883a 	mov	sp,fp
  120e44:	df000017 	ldw	fp,0(sp)
  120e48:	dec00104 	addi	sp,sp,4
  120e4c:	f800283a 	ret

00120e50 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  120e50:	defff904 	addi	sp,sp,-28
  120e54:	df000615 	stw	fp,24(sp)
  120e58:	df000604 	addi	fp,sp,24
  120e5c:	e13ffe15 	stw	r4,-8(fp)
  120e60:	e17fff15 	stw	r5,-4(fp)
  120e64:	e0bfff17 	ldw	r2,-4(fp)
  120e68:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  120e6c:	0005303a 	rdctl	r2,status
  120e70:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  120e74:	e0fffb17 	ldw	r3,-20(fp)
  120e78:	00bfff84 	movi	r2,-2
  120e7c:	1884703a 	and	r2,r3,r2
  120e80:	1001703a 	wrctl	status,r2
  
  return context;
  120e84:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  120e88:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
  120e8c:	e0bffa17 	ldw	r2,-24(fp)
  120e90:	00c00044 	movi	r3,1
  120e94:	1884983a 	sll	r2,r3,r2
  120e98:	0084303a 	nor	r2,zero,r2
  120e9c:	1007883a 	mov	r3,r2
  120ea0:	008004b4 	movhi	r2,18
  120ea4:	108a8b04 	addi	r2,r2,10796
  120ea8:	10800017 	ldw	r2,0(r2)
  120eac:	1886703a 	and	r3,r3,r2
  120eb0:	008004b4 	movhi	r2,18
  120eb4:	108a8b04 	addi	r2,r2,10796
  120eb8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  120ebc:	008004b4 	movhi	r2,18
  120ec0:	108a8b04 	addi	r2,r2,10796
  120ec4:	10800017 	ldw	r2,0(r2)
  120ec8:	100170fa 	wrctl	ienable,r2
  120ecc:	e0bffc17 	ldw	r2,-16(fp)
  120ed0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  120ed4:	e0bffd17 	ldw	r2,-12(fp)
  120ed8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  120edc:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
  120ee0:	e037883a 	mov	sp,fp
  120ee4:	df000017 	ldw	fp,0(sp)
  120ee8:	dec00104 	addi	sp,sp,4
  120eec:	f800283a 	ret

00120ef0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  120ef0:	defffc04 	addi	sp,sp,-16
  120ef4:	df000315 	stw	fp,12(sp)
  120ef8:	df000304 	addi	fp,sp,12
  120efc:	e13ffe15 	stw	r4,-8(fp)
  120f00:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  120f04:	000530fa 	rdctl	r2,ienable
  120f08:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  120f0c:	e0bfff17 	ldw	r2,-4(fp)
  120f10:	00c00044 	movi	r3,1
  120f14:	1884983a 	sll	r2,r3,r2
  120f18:	1007883a 	mov	r3,r2
  120f1c:	e0bffd17 	ldw	r2,-12(fp)
  120f20:	1884703a 	and	r2,r3,r2
  120f24:	1004c03a 	cmpne	r2,r2,zero
  120f28:	10803fcc 	andi	r2,r2,255
}
  120f2c:	e037883a 	mov	sp,fp
  120f30:	df000017 	ldw	fp,0(sp)
  120f34:	dec00104 	addi	sp,sp,4
  120f38:	f800283a 	ret

00120f3c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  120f3c:	defff504 	addi	sp,sp,-44
  120f40:	dfc00a15 	stw	ra,40(sp)
  120f44:	df000915 	stw	fp,36(sp)
  120f48:	df000904 	addi	fp,sp,36
  120f4c:	e13ffc15 	stw	r4,-16(fp)
  120f50:	e17ffd15 	stw	r5,-12(fp)
  120f54:	e1bffe15 	stw	r6,-8(fp)
  120f58:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
  120f5c:	00bffa84 	movi	r2,-22
  120f60:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  120f64:	e0bffd17 	ldw	r2,-12(fp)
  120f68:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  120f6c:	e0bff817 	ldw	r2,-32(fp)
  120f70:	10800808 	cmpgei	r2,r2,32
  120f74:	1000271e 	bne	r2,zero,121014 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  120f78:	0005303a 	rdctl	r2,status
  120f7c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  120f80:	e0fffa17 	ldw	r3,-24(fp)
  120f84:	00bfff84 	movi	r2,-2
  120f88:	1884703a 	and	r2,r3,r2
  120f8c:	1001703a 	wrctl	status,r2
  
  return context;
  120f90:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  120f94:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
  120f98:	00c004b4 	movhi	r3,18
  120f9c:	18ca8f04 	addi	r3,r3,10812
  120fa0:	e0bff817 	ldw	r2,-32(fp)
  120fa4:	100490fa 	slli	r2,r2,3
  120fa8:	1885883a 	add	r2,r3,r2
  120fac:	e0fffe17 	ldw	r3,-8(fp)
  120fb0:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
  120fb4:	00c004b4 	movhi	r3,18
  120fb8:	18ca8f04 	addi	r3,r3,10812
  120fbc:	e0bff817 	ldw	r2,-32(fp)
  120fc0:	100490fa 	slli	r2,r2,3
  120fc4:	1885883a 	add	r2,r3,r2
  120fc8:	10800104 	addi	r2,r2,4
  120fcc:	e0ffff17 	ldw	r3,-4(fp)
  120fd0:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  120fd4:	e0bffe17 	ldw	r2,-8(fp)
  120fd8:	10000526 	beq	r2,zero,120ff0 <alt_iic_isr_register+0xb4>
  120fdc:	e0bff817 	ldw	r2,-32(fp)
  120fe0:	e13ffc17 	ldw	r4,-16(fp)
  120fe4:	100b883a 	mov	r5,r2
  120fe8:	0120db40 	call	120db4 <alt_ic_irq_enable>
  120fec:	00000406 	br	121000 <alt_iic_isr_register+0xc4>
  120ff0:	e0bff817 	ldw	r2,-32(fp)
  120ff4:	e13ffc17 	ldw	r4,-16(fp)
  120ff8:	100b883a 	mov	r5,r2
  120ffc:	0120e500 	call	120e50 <alt_ic_irq_disable>
  121000:	e0bff715 	stw	r2,-36(fp)
  121004:	e0bff917 	ldw	r2,-28(fp)
  121008:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  12100c:	e0bffb17 	ldw	r2,-20(fp)
  121010:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  121014:	e0bff717 	ldw	r2,-36(fp)
}
  121018:	e037883a 	mov	sp,fp
  12101c:	dfc00117 	ldw	ra,4(sp)
  121020:	df000017 	ldw	fp,0(sp)
  121024:	dec00204 	addi	sp,sp,8
  121028:	f800283a 	ret

0012102c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  12102c:	defffc04 	addi	sp,sp,-16
  121030:	df000315 	stw	fp,12(sp)
  121034:	df000304 	addi	fp,sp,12
  121038:	e13ffd15 	stw	r4,-12(fp)
  12103c:	e17ffe15 	stw	r5,-8(fp)
  121040:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  121044:	e0fffe17 	ldw	r3,-8(fp)
  121048:	e0bffd17 	ldw	r2,-12(fp)
  12104c:	18800e26 	beq	r3,r2,121088 <alt_load_section+0x5c>
  {
    while( to != end )
  121050:	00000a06 	br	12107c <alt_load_section+0x50>
    {
      *to++ = *from++;
  121054:	e0bffd17 	ldw	r2,-12(fp)
  121058:	10c00017 	ldw	r3,0(r2)
  12105c:	e0bffe17 	ldw	r2,-8(fp)
  121060:	10c00015 	stw	r3,0(r2)
  121064:	e0bffe17 	ldw	r2,-8(fp)
  121068:	10800104 	addi	r2,r2,4
  12106c:	e0bffe15 	stw	r2,-8(fp)
  121070:	e0bffd17 	ldw	r2,-12(fp)
  121074:	10800104 	addi	r2,r2,4
  121078:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  12107c:	e0fffe17 	ldw	r3,-8(fp)
  121080:	e0bfff17 	ldw	r2,-4(fp)
  121084:	18bff31e 	bne	r3,r2,121054 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
  121088:	e037883a 	mov	sp,fp
  12108c:	df000017 	ldw	fp,0(sp)
  121090:	dec00104 	addi	sp,sp,4
  121094:	f800283a 	ret

00121098 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  121098:	defffe04 	addi	sp,sp,-8
  12109c:	dfc00115 	stw	ra,4(sp)
  1210a0:	df000015 	stw	fp,0(sp)
  1210a4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  1210a8:	010004b4 	movhi	r4,18
  1210ac:	2109d304 	addi	r4,r4,10060
  1210b0:	014004b4 	movhi	r5,18
  1210b4:	29491c04 	addi	r5,r5,9328
  1210b8:	018004b4 	movhi	r6,18
  1210bc:	3189d304 	addi	r6,r6,10060
  1210c0:	012102c0 	call	12102c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  1210c4:	010004b4 	movhi	r4,18
  1210c8:	21000804 	addi	r4,r4,32
  1210cc:	014004b4 	movhi	r5,18
  1210d0:	29400804 	addi	r5,r5,32
  1210d4:	018004b4 	movhi	r6,18
  1210d8:	31806e04 	addi	r6,r6,440
  1210dc:	012102c0 	call	12102c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  1210e0:	010004b4 	movhi	r4,18
  1210e4:	21090e04 	addi	r4,r4,9272
  1210e8:	014004b4 	movhi	r5,18
  1210ec:	29490e04 	addi	r5,r5,9272
  1210f0:	018004b4 	movhi	r6,18
  1210f4:	31891c04 	addi	r6,r6,9328
  1210f8:	012102c0 	call	12102c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  1210fc:	01216cc0 	call	1216cc <alt_dcache_flush_all>
  alt_icache_flush_all();
  121100:	01218e40 	call	1218e4 <alt_icache_flush_all>
}
  121104:	e037883a 	mov	sp,fp
  121108:	dfc00117 	ldw	ra,4(sp)
  12110c:	df000017 	ldw	fp,0(sp)
  121110:	dec00204 	addi	sp,sp,8
  121114:	f800283a 	ret

00121118 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  121118:	defffd04 	addi	sp,sp,-12
  12111c:	dfc00215 	stw	ra,8(sp)
  121120:	df000115 	stw	fp,4(sp)
  121124:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  121128:	0009883a 	mov	r4,zero
  12112c:	01213040 	call	121304 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  121130:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  121134:	01213380 	call	121338 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  121138:	010004b4 	movhi	r4,18
  12113c:	21091304 	addi	r4,r4,9292
  121140:	014004b4 	movhi	r5,18
  121144:	29491304 	addi	r5,r5,9292
  121148:	018004b4 	movhi	r6,18
  12114c:	31891304 	addi	r6,r6,9292
  121150:	01219d40 	call	1219d4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  121154:	012182c0 	call	12182c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  121158:	010004b4 	movhi	r4,18
  12115c:	21062204 	addi	r4,r4,6280
  121160:	01220200 	call	122020 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  121164:	d120c217 	ldw	r4,-31992(gp)
  121168:	d0e0c317 	ldw	r3,-31988(gp)
  12116c:	d0a0c417 	ldw	r2,-31984(gp)
  121170:	180b883a 	mov	r5,r3
  121174:	100d883a 	mov	r6,r2
  121178:	01202040 	call	120204 <main>
  12117c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  121180:	01000044 	movi	r4,1
  121184:	01216040 	call	121604 <close>
  exit (result);
  121188:	e13fff17 	ldw	r4,-4(fp)
  12118c:	01220340 	call	122034 <exit>

00121190 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  121190:	defffe04 	addi	sp,sp,-8
  121194:	dfc00115 	stw	ra,4(sp)
  121198:	df000015 	stw	fp,0(sp)
  12119c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  1211a0:	008004b4 	movhi	r2,18
  1211a4:	1089d204 	addi	r2,r2,10056
  1211a8:	10800017 	ldw	r2,0(r2)
  1211ac:	10000526 	beq	r2,zero,1211c4 <alt_get_errno+0x34>
  1211b0:	008004b4 	movhi	r2,18
  1211b4:	1089d204 	addi	r2,r2,10056
  1211b8:	10800017 	ldw	r2,0(r2)
  1211bc:	103ee83a 	callr	r2
  1211c0:	00000206 	br	1211cc <alt_get_errno+0x3c>
  1211c4:	008004b4 	movhi	r2,18
  1211c8:	108a8a04 	addi	r2,r2,10792
}
  1211cc:	e037883a 	mov	sp,fp
  1211d0:	dfc00117 	ldw	ra,4(sp)
  1211d4:	df000017 	ldw	fp,0(sp)
  1211d8:	dec00204 	addi	sp,sp,8
  1211dc:	f800283a 	ret

001211e0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  1211e0:	defff904 	addi	sp,sp,-28
  1211e4:	dfc00615 	stw	ra,24(sp)
  1211e8:	df000515 	stw	fp,20(sp)
  1211ec:	df000504 	addi	fp,sp,20
  1211f0:	e13ffd15 	stw	r4,-12(fp)
  1211f4:	e17ffe15 	stw	r5,-8(fp)
  1211f8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  1211fc:	e0bffd17 	ldw	r2,-12(fp)
  121200:	10000616 	blt	r2,zero,12121c <write+0x3c>
  121204:	e0bffd17 	ldw	r2,-12(fp)
  121208:	10c00324 	muli	r3,r2,12
  12120c:	008004b4 	movhi	r2,18
  121210:	10896a04 	addi	r2,r2,9640
  121214:	1885883a 	add	r2,r3,r2
  121218:	00000106 	br	121220 <write+0x40>
  12121c:	0005883a 	mov	r2,zero
  121220:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  121224:	e0bffb17 	ldw	r2,-20(fp)
  121228:	10001f26 	beq	r2,zero,1212a8 <write+0xc8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  12122c:	e0bffb17 	ldw	r2,-20(fp)
  121230:	10800217 	ldw	r2,8(r2)
  121234:	108000cc 	andi	r2,r2,3
  121238:	10001726 	beq	r2,zero,121298 <write+0xb8>
  12123c:	e0bffb17 	ldw	r2,-20(fp)
  121240:	10800017 	ldw	r2,0(r2)
  121244:	10800617 	ldw	r2,24(r2)
  121248:	10001326 	beq	r2,zero,121298 <write+0xb8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  12124c:	e0bffb17 	ldw	r2,-20(fp)
  121250:	10800017 	ldw	r2,0(r2)
  121254:	10c00617 	ldw	r3,24(r2)
  121258:	e0bfff17 	ldw	r2,-4(fp)
  12125c:	e13ffb17 	ldw	r4,-20(fp)
  121260:	e17ffe17 	ldw	r5,-8(fp)
  121264:	100d883a 	mov	r6,r2
  121268:	183ee83a 	callr	r3
  12126c:	e0bffc15 	stw	r2,-16(fp)
  121270:	e0bffc17 	ldw	r2,-16(fp)
  121274:	1000060e 	bge	r2,zero,121290 <write+0xb0>
      {
        ALT_ERRNO = -rval;
  121278:	01211900 	call	121190 <alt_get_errno>
  12127c:	e0fffc17 	ldw	r3,-16(fp)
  121280:	00c7c83a 	sub	r3,zero,r3
  121284:	10c00015 	stw	r3,0(r2)
        return -1;
  121288:	00bfffc4 	movi	r2,-1
  12128c:	00000a06 	br	1212b8 <write+0xd8>
      }
      return rval;
  121290:	e0bffc17 	ldw	r2,-16(fp)
  121294:	00000806 	br	1212b8 <write+0xd8>
    }
    else
    {
      ALT_ERRNO = EACCES;
  121298:	01211900 	call	121190 <alt_get_errno>
  12129c:	00c00344 	movi	r3,13
  1212a0:	10c00015 	stw	r3,0(r2)
  1212a4:	00000306 	br	1212b4 <write+0xd4>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  1212a8:	01211900 	call	121190 <alt_get_errno>
  1212ac:	00c01444 	movi	r3,81
  1212b0:	10c00015 	stw	r3,0(r2)
  }
  return -1;
  1212b4:	00bfffc4 	movi	r2,-1
}
  1212b8:	e037883a 	mov	sp,fp
  1212bc:	dfc00117 	ldw	ra,4(sp)
  1212c0:	df000017 	ldw	fp,0(sp)
  1212c4:	dec00204 	addi	sp,sp,8
  1212c8:	f800283a 	ret

001212cc <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  1212cc:	defffd04 	addi	sp,sp,-12
  1212d0:	dfc00215 	stw	ra,8(sp)
  1212d4:	df000115 	stw	fp,4(sp)
  1212d8:	df000104 	addi	fp,sp,4
  1212dc:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  1212e0:	e13fff17 	ldw	r4,-4(fp)
  1212e4:	014004b4 	movhi	r5,18
  1212e8:	2949cf04 	addi	r5,r5,10044
  1212ec:	012178c0 	call	12178c <alt_dev_llist_insert>
}
  1212f0:	e037883a 	mov	sp,fp
  1212f4:	dfc00117 	ldw	ra,4(sp)
  1212f8:	df000017 	ldw	fp,0(sp)
  1212fc:	dec00204 	addi	sp,sp,8
  121300:	f800283a 	ret

00121304 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  121304:	defffd04 	addi	sp,sp,-12
  121308:	dfc00215 	stw	ra,8(sp)
  12130c:	df000115 	stw	fp,4(sp)
  121310:	df000104 	addi	fp,sp,4
  121314:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS, nios);
  121318:	0121d1c0 	call	121d1c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  12131c:	00800044 	movi	r2,1
  121320:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  121324:	e037883a 	mov	sp,fp
  121328:	dfc00117 	ldw	ra,4(sp)
  12132c:	df000017 	ldw	fp,0(sp)
  121330:	dec00204 	addi	sp,sp,8
  121334:	f800283a 	ret

00121338 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  121338:	defffe04 	addi	sp,sp,-8
  12133c:	dfc00115 	stw	ra,4(sp)
  121340:	df000015 	stw	fp,0(sp)
  121344:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG, jtag);
  121348:	010004b4 	movhi	r4,18
  12134c:	21095504 	addi	r4,r4,9556
  121350:	01212cc0 	call	1212cc <alt_dev_reg>
}
  121354:	e037883a 	mov	sp,fp
  121358:	dfc00117 	ldw	ra,4(sp)
  12135c:	df000017 	ldw	fp,0(sp)
  121360:	dec00204 	addi	sp,sp,8
  121364:	f800283a 	ret

00121368 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  121368:	defffa04 	addi	sp,sp,-24
  12136c:	dfc00515 	stw	ra,20(sp)
  121370:	df000415 	stw	fp,16(sp)
  121374:	df000404 	addi	fp,sp,16
  121378:	e13ffd15 	stw	r4,-12(fp)
  12137c:	e17ffe15 	stw	r5,-8(fp)
  121380:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  121384:	e0bffd17 	ldw	r2,-12(fp)
  121388:	10800017 	ldw	r2,0(r2)
  12138c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  121390:	e0bffc17 	ldw	r2,-16(fp)
  121394:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
  121398:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  12139c:	10800217 	ldw	r2,8(r2)
  1213a0:	1809883a 	mov	r4,r3
  1213a4:	e17ffe17 	ldw	r5,-8(fp)
  1213a8:	e1bfff17 	ldw	r6,-4(fp)
  1213ac:	100f883a 	mov	r7,r2
  1213b0:	01214280 	call	121428 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  1213b4:	e037883a 	mov	sp,fp
  1213b8:	dfc00117 	ldw	ra,4(sp)
  1213bc:	df000017 	ldw	fp,0(sp)
  1213c0:	dec00204 	addi	sp,sp,8
  1213c4:	f800283a 	ret

001213c8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  1213c8:	defffa04 	addi	sp,sp,-24
  1213cc:	dfc00515 	stw	ra,20(sp)
  1213d0:	df000415 	stw	fp,16(sp)
  1213d4:	df000404 	addi	fp,sp,16
  1213d8:	e13ffd15 	stw	r4,-12(fp)
  1213dc:	e17ffe15 	stw	r5,-8(fp)
  1213e0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  1213e4:	e0bffd17 	ldw	r2,-12(fp)
  1213e8:	10800017 	ldw	r2,0(r2)
  1213ec:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  1213f0:	e0bffc17 	ldw	r2,-16(fp)
  1213f4:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
  1213f8:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  1213fc:	10800217 	ldw	r2,8(r2)
  121400:	1809883a 	mov	r4,r3
  121404:	e17ffe17 	ldw	r5,-8(fp)
  121408:	e1bfff17 	ldw	r6,-4(fp)
  12140c:	100f883a 	mov	r7,r2
  121410:	012151c0 	call	12151c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  121414:	e037883a 	mov	sp,fp
  121418:	dfc00117 	ldw	ra,4(sp)
  12141c:	df000017 	ldw	fp,0(sp)
  121420:	dec00204 	addi	sp,sp,8
  121424:	f800283a 	ret

00121428 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
  121428:	defff704 	addi	sp,sp,-36
  12142c:	df000815 	stw	fp,32(sp)
  121430:	df000804 	addi	fp,sp,32
  121434:	e13ffc15 	stw	r4,-16(fp)
  121438:	e17ffd15 	stw	r5,-12(fp)
  12143c:	e1bffe15 	stw	r6,-8(fp)
  121440:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
  121444:	e0bffc17 	ldw	r2,-16(fp)
  121448:	10800017 	ldw	r2,0(r2)
  12144c:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
  121450:	e0bffd17 	ldw	r2,-12(fp)
  121454:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
  121458:	e0bffe17 	ldw	r2,-8(fp)
  12145c:	e0fffd17 	ldw	r3,-12(fp)
  121460:	1885883a 	add	r2,r3,r2
  121464:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
  121468:	00001406 	br	1214bc <altera_avalon_jtag_uart_read+0x94>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  12146c:	e0bff917 	ldw	r2,-28(fp)
  121470:	10800037 	ldwio	r2,0(r2)
  121474:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
  121478:	e0bffb17 	ldw	r2,-20(fp)
  12147c:	10a0000c 	andi	r2,r2,32768
  121480:	10000826 	beq	r2,zero,1214a4 <altera_avalon_jtag_uart_read+0x7c>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  121484:	e0bffb17 	ldw	r2,-20(fp)
  121488:	1007883a 	mov	r3,r2
  12148c:	e0bff817 	ldw	r2,-32(fp)
  121490:	10c00005 	stb	r3,0(r2)
  121494:	e0bff817 	ldw	r2,-32(fp)
  121498:	10800044 	addi	r2,r2,1
  12149c:	e0bff815 	stw	r2,-32(fp)
  1214a0:	00000606 	br	1214bc <altera_avalon_jtag_uart_read+0x94>
    else if (ptr != buffer)
  1214a4:	e0fff817 	ldw	r3,-32(fp)
  1214a8:	e0bffd17 	ldw	r2,-12(fp)
  1214ac:	1880071e 	bne	r3,r2,1214cc <altera_avalon_jtag_uart_read+0xa4>
      break;
    else if(flags & O_NONBLOCK)
  1214b0:	e0bfff17 	ldw	r2,-4(fp)
  1214b4:	1090000c 	andi	r2,r2,16384
  1214b8:	1000061e 	bne	r2,zero,1214d4 <altera_avalon_jtag_uart_read+0xac>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
  1214bc:	e0fff817 	ldw	r3,-32(fp)
  1214c0:	e0bffa17 	ldw	r2,-24(fp)
  1214c4:	18bfe936 	bltu	r3,r2,12146c <altera_avalon_jtag_uart_read+0x44>
  1214c8:	00000306 	br	1214d8 <altera_avalon_jtag_uart_read+0xb0>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
  1214cc:	0001883a 	nop
  1214d0:	00000106 	br	1214d8 <altera_avalon_jtag_uart_read+0xb0>
    else if(flags & O_NONBLOCK)
      break;   
  1214d4:	0001883a 	nop
    
  }

  if (ptr != buffer)
  1214d8:	e0fff817 	ldw	r3,-32(fp)
  1214dc:	e0bffd17 	ldw	r2,-12(fp)
  1214e0:	18800426 	beq	r3,r2,1214f4 <altera_avalon_jtag_uart_read+0xcc>
    return ptr - buffer;
  1214e4:	e0fff817 	ldw	r3,-32(fp)
  1214e8:	e0bffd17 	ldw	r2,-12(fp)
  1214ec:	1885c83a 	sub	r2,r3,r2
  1214f0:	00000606 	br	12150c <altera_avalon_jtag_uart_read+0xe4>
  else if (flags & O_NONBLOCK)
  1214f4:	e0bfff17 	ldw	r2,-4(fp)
  1214f8:	1090000c 	andi	r2,r2,16384
  1214fc:	10000226 	beq	r2,zero,121508 <altera_avalon_jtag_uart_read+0xe0>
    return -EWOULDBLOCK;
  121500:	00bffd44 	movi	r2,-11
  121504:	00000106 	br	12150c <altera_avalon_jtag_uart_read+0xe4>
  else
    return -EIO;
  121508:	00bffec4 	movi	r2,-5
}
  12150c:	e037883a 	mov	sp,fp
  121510:	df000017 	ldw	fp,0(sp)
  121514:	dec00104 	addi	sp,sp,4
  121518:	f800283a 	ret

0012151c <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  12151c:	defff904 	addi	sp,sp,-28
  121520:	df000615 	stw	fp,24(sp)
  121524:	df000604 	addi	fp,sp,24
  121528:	e13ffc15 	stw	r4,-16(fp)
  12152c:	e17ffd15 	stw	r5,-12(fp)
  121530:	e1bffe15 	stw	r6,-8(fp)
  121534:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
  121538:	e0bffc17 	ldw	r2,-16(fp)
  12153c:	10800017 	ldw	r2,0(r2)
  121540:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
  121544:	e0bffe17 	ldw	r2,-8(fp)
  121548:	e0fffd17 	ldw	r3,-12(fp)
  12154c:	1885883a 	add	r2,r3,r2
  121550:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
  121554:	00000f06 	br	121594 <altera_avalon_jtag_uart_write+0x78>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
  121558:	e0bffa17 	ldw	r2,-24(fp)
  12155c:	10800104 	addi	r2,r2,4
  121560:	10800037 	ldwio	r2,0(r2)
  121564:	10bfffec 	andhi	r2,r2,65535
  121568:	10000a26 	beq	r2,zero,121594 <altera_avalon_jtag_uart_write+0x78>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
  12156c:	e0bffa17 	ldw	r2,-24(fp)
  121570:	e0fffd17 	ldw	r3,-12(fp)
  121574:	18c00003 	ldbu	r3,0(r3)
  121578:	18c03fcc 	andi	r3,r3,255
  12157c:	18c0201c 	xori	r3,r3,128
  121580:	18ffe004 	addi	r3,r3,-128
  121584:	e13ffd17 	ldw	r4,-12(fp)
  121588:	21000044 	addi	r4,r4,1
  12158c:	e13ffd15 	stw	r4,-12(fp)
  121590:	10c00035 	stwio	r3,0(r2)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
  121594:	e0fffd17 	ldw	r3,-12(fp)
  121598:	e0bffb17 	ldw	r2,-20(fp)
  12159c:	18bfee36 	bltu	r3,r2,121558 <altera_avalon_jtag_uart_write+0x3c>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
  1215a0:	e0bffe17 	ldw	r2,-8(fp)
}
  1215a4:	e037883a 	mov	sp,fp
  1215a8:	df000017 	ldw	fp,0(sp)
  1215ac:	dec00104 	addi	sp,sp,4
  1215b0:	f800283a 	ret

001215b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  1215b4:	defffe04 	addi	sp,sp,-8
  1215b8:	dfc00115 	stw	ra,4(sp)
  1215bc:	df000015 	stw	fp,0(sp)
  1215c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  1215c4:	008004b4 	movhi	r2,18
  1215c8:	1089d204 	addi	r2,r2,10056
  1215cc:	10800017 	ldw	r2,0(r2)
  1215d0:	10000526 	beq	r2,zero,1215e8 <alt_get_errno+0x34>
  1215d4:	008004b4 	movhi	r2,18
  1215d8:	1089d204 	addi	r2,r2,10056
  1215dc:	10800017 	ldw	r2,0(r2)
  1215e0:	103ee83a 	callr	r2
  1215e4:	00000206 	br	1215f0 <alt_get_errno+0x3c>
  1215e8:	008004b4 	movhi	r2,18
  1215ec:	108a8a04 	addi	r2,r2,10792
}
  1215f0:	e037883a 	mov	sp,fp
  1215f4:	dfc00117 	ldw	ra,4(sp)
  1215f8:	df000017 	ldw	fp,0(sp)
  1215fc:	dec00204 	addi	sp,sp,8
  121600:	f800283a 	ret

00121604 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  121604:	defffb04 	addi	sp,sp,-20
  121608:	dfc00415 	stw	ra,16(sp)
  12160c:	df000315 	stw	fp,12(sp)
  121610:	df000304 	addi	fp,sp,12
  121614:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  121618:	e0bfff17 	ldw	r2,-4(fp)
  12161c:	10000616 	blt	r2,zero,121638 <close+0x34>
  121620:	e0bfff17 	ldw	r2,-4(fp)
  121624:	10c00324 	muli	r3,r2,12
  121628:	008004b4 	movhi	r2,18
  12162c:	10896a04 	addi	r2,r2,9640
  121630:	1885883a 	add	r2,r3,r2
  121634:	00000106 	br	12163c <close+0x38>
  121638:	0005883a 	mov	r2,zero
  12163c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
  121640:	e0bffd17 	ldw	r2,-12(fp)
  121644:	10001826 	beq	r2,zero,1216a8 <close+0xa4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  121648:	e0bffd17 	ldw	r2,-12(fp)
  12164c:	10800017 	ldw	r2,0(r2)
  121650:	10800417 	ldw	r2,16(r2)
  121654:	10000626 	beq	r2,zero,121670 <close+0x6c>
  121658:	e0bffd17 	ldw	r2,-12(fp)
  12165c:	10800017 	ldw	r2,0(r2)
  121660:	10800417 	ldw	r2,16(r2)
  121664:	e13ffd17 	ldw	r4,-12(fp)
  121668:	103ee83a 	callr	r2
  12166c:	00000106 	br	121674 <close+0x70>
  121670:	0005883a 	mov	r2,zero
  121674:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  121678:	e13fff17 	ldw	r4,-4(fp)
  12167c:	0121cbc0 	call	121cbc <alt_release_fd>
    if (rval < 0)
  121680:	e0bffe17 	ldw	r2,-8(fp)
  121684:	1000060e 	bge	r2,zero,1216a0 <close+0x9c>
    {
      ALT_ERRNO = -rval;
  121688:	01215b40 	call	1215b4 <alt_get_errno>
  12168c:	e0fffe17 	ldw	r3,-8(fp)
  121690:	00c7c83a 	sub	r3,zero,r3
  121694:	10c00015 	stw	r3,0(r2)
      return -1;
  121698:	00bfffc4 	movi	r2,-1
  12169c:	00000606 	br	1216b8 <close+0xb4>
    }
    return 0;
  1216a0:	0005883a 	mov	r2,zero
  1216a4:	00000406 	br	1216b8 <close+0xb4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  1216a8:	01215b40 	call	1215b4 <alt_get_errno>
  1216ac:	00c01444 	movi	r3,81
  1216b0:	10c00015 	stw	r3,0(r2)
    return -1;
  1216b4:	00bfffc4 	movi	r2,-1
  }
}
  1216b8:	e037883a 	mov	sp,fp
  1216bc:	dfc00117 	ldw	ra,4(sp)
  1216c0:	df000017 	ldw	fp,0(sp)
  1216c4:	dec00204 	addi	sp,sp,8
  1216c8:	f800283a 	ret

001216cc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  1216cc:	defffe04 	addi	sp,sp,-8
  1216d0:	df000115 	stw	fp,4(sp)
  1216d4:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  1216d8:	e03fff15 	stw	zero,-4(fp)
  1216dc:	00000506 	br	1216f4 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  1216e0:	e0bfff17 	ldw	r2,-4(fp)
  1216e4:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  1216e8:	e0bfff17 	ldw	r2,-4(fp)
  1216ec:	10800804 	addi	r2,r2,32
  1216f0:	e0bfff15 	stw	r2,-4(fp)
  1216f4:	e0bfff17 	ldw	r2,-4(fp)
  1216f8:	10820030 	cmpltui	r2,r2,2048
  1216fc:	103ff81e 	bne	r2,zero,1216e0 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  121700:	e037883a 	mov	sp,fp
  121704:	df000017 	ldw	fp,0(sp)
  121708:	dec00104 	addi	sp,sp,4
  12170c:	f800283a 	ret

00121710 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  121710:	defffc04 	addi	sp,sp,-16
  121714:	df000315 	stw	fp,12(sp)
  121718:	df000304 	addi	fp,sp,12
  12171c:	e13ffd15 	stw	r4,-12(fp)
  121720:	e17ffe15 	stw	r5,-8(fp)
  121724:	e1bfff15 	stw	r6,-4(fp)
  return len;
  121728:	e0bfff17 	ldw	r2,-4(fp)
}
  12172c:	e037883a 	mov	sp,fp
  121730:	df000017 	ldw	fp,0(sp)
  121734:	dec00104 	addi	sp,sp,4
  121738:	f800283a 	ret

0012173c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  12173c:	defffe04 	addi	sp,sp,-8
  121740:	dfc00115 	stw	ra,4(sp)
  121744:	df000015 	stw	fp,0(sp)
  121748:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  12174c:	008004b4 	movhi	r2,18
  121750:	1089d204 	addi	r2,r2,10056
  121754:	10800017 	ldw	r2,0(r2)
  121758:	10000526 	beq	r2,zero,121770 <alt_get_errno+0x34>
  12175c:	008004b4 	movhi	r2,18
  121760:	1089d204 	addi	r2,r2,10056
  121764:	10800017 	ldw	r2,0(r2)
  121768:	103ee83a 	callr	r2
  12176c:	00000206 	br	121778 <alt_get_errno+0x3c>
  121770:	008004b4 	movhi	r2,18
  121774:	108a8a04 	addi	r2,r2,10792
}
  121778:	e037883a 	mov	sp,fp
  12177c:	dfc00117 	ldw	ra,4(sp)
  121780:	df000017 	ldw	fp,0(sp)
  121784:	dec00204 	addi	sp,sp,8
  121788:	f800283a 	ret

0012178c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  12178c:	defffa04 	addi	sp,sp,-24
  121790:	dfc00515 	stw	ra,20(sp)
  121794:	df000415 	stw	fp,16(sp)
  121798:	df000404 	addi	fp,sp,16
  12179c:	e13ffe15 	stw	r4,-8(fp)
  1217a0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  1217a4:	e0bffe17 	ldw	r2,-8(fp)
  1217a8:	10000326 	beq	r2,zero,1217b8 <alt_dev_llist_insert+0x2c>
  1217ac:	e0bffe17 	ldw	r2,-8(fp)
  1217b0:	10800217 	ldw	r2,8(r2)
  1217b4:	1000051e 	bne	r2,zero,1217cc <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
  1217b8:	012173c0 	call	12173c <alt_get_errno>
  1217bc:	00c00584 	movi	r3,22
  1217c0:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
  1217c4:	00bffa84 	movi	r2,-22
  1217c8:	00001306 	br	121818 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  1217cc:	e0bffe17 	ldw	r2,-8(fp)
  1217d0:	e0ffff17 	ldw	r3,-4(fp)
  1217d4:	e0fffc15 	stw	r3,-16(fp)
  1217d8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  1217dc:	e0bffd17 	ldw	r2,-12(fp)
  1217e0:	e0fffc17 	ldw	r3,-16(fp)
  1217e4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  1217e8:	e0bffc17 	ldw	r2,-16(fp)
  1217ec:	10c00017 	ldw	r3,0(r2)
  1217f0:	e0bffd17 	ldw	r2,-12(fp)
  1217f4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  1217f8:	e0bffc17 	ldw	r2,-16(fp)
  1217fc:	10800017 	ldw	r2,0(r2)
  121800:	e0fffd17 	ldw	r3,-12(fp)
  121804:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  121808:	e0bffc17 	ldw	r2,-16(fp)
  12180c:	e0fffd17 	ldw	r3,-12(fp)
  121810:	10c00015 	stw	r3,0(r2)

  return 0;  
  121814:	0005883a 	mov	r2,zero
}
  121818:	e037883a 	mov	sp,fp
  12181c:	dfc00117 	ldw	ra,4(sp)
  121820:	df000017 	ldw	fp,0(sp)
  121824:	dec00204 	addi	sp,sp,8
  121828:	f800283a 	ret

0012182c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  12182c:	defffd04 	addi	sp,sp,-12
  121830:	dfc00215 	stw	ra,8(sp)
  121834:	df000115 	stw	fp,4(sp)
  121838:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  12183c:	008004b4 	movhi	r2,18
  121840:	10890d04 	addi	r2,r2,9268
  121844:	e0bfff15 	stw	r2,-4(fp)
  121848:	00000606 	br	121864 <_do_ctors+0x38>
        (*ctor) (); 
  12184c:	e0bfff17 	ldw	r2,-4(fp)
  121850:	10800017 	ldw	r2,0(r2)
  121854:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  121858:	e0bfff17 	ldw	r2,-4(fp)
  12185c:	10bfff04 	addi	r2,r2,-4
  121860:	e0bfff15 	stw	r2,-4(fp)
  121864:	e0ffff17 	ldw	r3,-4(fp)
  121868:	008004b4 	movhi	r2,18
  12186c:	10890e04 	addi	r2,r2,9272
  121870:	18bff62e 	bgeu	r3,r2,12184c <_do_ctors+0x20>
        (*ctor) (); 
}
  121874:	e037883a 	mov	sp,fp
  121878:	dfc00117 	ldw	ra,4(sp)
  12187c:	df000017 	ldw	fp,0(sp)
  121880:	dec00204 	addi	sp,sp,8
  121884:	f800283a 	ret

00121888 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  121888:	defffd04 	addi	sp,sp,-12
  12188c:	dfc00215 	stw	ra,8(sp)
  121890:	df000115 	stw	fp,4(sp)
  121894:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  121898:	008004b4 	movhi	r2,18
  12189c:	10890d04 	addi	r2,r2,9268
  1218a0:	e0bfff15 	stw	r2,-4(fp)
  1218a4:	00000606 	br	1218c0 <_do_dtors+0x38>
        (*dtor) (); 
  1218a8:	e0bfff17 	ldw	r2,-4(fp)
  1218ac:	10800017 	ldw	r2,0(r2)
  1218b0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  1218b4:	e0bfff17 	ldw	r2,-4(fp)
  1218b8:	10bfff04 	addi	r2,r2,-4
  1218bc:	e0bfff15 	stw	r2,-4(fp)
  1218c0:	e0ffff17 	ldw	r3,-4(fp)
  1218c4:	008004b4 	movhi	r2,18
  1218c8:	10890e04 	addi	r2,r2,9272
  1218cc:	18bff62e 	bgeu	r3,r2,1218a8 <_do_dtors+0x20>
        (*dtor) (); 
}
  1218d0:	e037883a 	mov	sp,fp
  1218d4:	dfc00117 	ldw	ra,4(sp)
  1218d8:	df000017 	ldw	fp,0(sp)
  1218dc:	dec00204 	addi	sp,sp,8
  1218e0:	f800283a 	ret

001218e4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  1218e4:	defffe04 	addi	sp,sp,-8
  1218e8:	dfc00115 	stw	ra,4(sp)
  1218ec:	df000015 	stw	fp,0(sp)
  1218f0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  1218f4:	0009883a 	mov	r4,zero
  1218f8:	01440004 	movi	r5,4096
  1218fc:	0121f940 	call	121f94 <alt_icache_flush>
#endif
}
  121900:	e037883a 	mov	sp,fp
  121904:	dfc00117 	ldw	ra,4(sp)
  121908:	df000017 	ldw	fp,0(sp)
  12190c:	dec00204 	addi	sp,sp,8
  121910:	f800283a 	ret

00121914 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  121914:	defff904 	addi	sp,sp,-28
  121918:	dfc00615 	stw	ra,24(sp)
  12191c:	df000515 	stw	fp,20(sp)
  121920:	df000504 	addi	fp,sp,20
  121924:	e13ffc15 	stw	r4,-16(fp)
  121928:	e17ffd15 	stw	r5,-12(fp)
  12192c:	e1bffe15 	stw	r6,-8(fp)
  121930:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  121934:	e13ffd17 	ldw	r4,-12(fp)
  121938:	e17ffe17 	ldw	r5,-8(fp)
  12193c:	e1bfff17 	ldw	r6,-4(fp)
  121940:	0121b680 	call	121b68 <open>
  121944:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  121948:	e0bffb17 	ldw	r2,-20(fp)
  12194c:	10001c16 	blt	r2,zero,1219c0 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
  121950:	00c004b4 	movhi	r3,18
  121954:	18c96a04 	addi	r3,r3,9640
  121958:	e0bffb17 	ldw	r2,-20(fp)
  12195c:	10800324 	muli	r2,r2,12
  121960:	1885883a 	add	r2,r3,r2
  121964:	10c00017 	ldw	r3,0(r2)
  121968:	e0bffc17 	ldw	r2,-16(fp)
  12196c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  121970:	00c004b4 	movhi	r3,18
  121974:	18c96a04 	addi	r3,r3,9640
  121978:	e0bffb17 	ldw	r2,-20(fp)
  12197c:	10800324 	muli	r2,r2,12
  121980:	1885883a 	add	r2,r3,r2
  121984:	10800104 	addi	r2,r2,4
  121988:	10c00017 	ldw	r3,0(r2)
  12198c:	e0bffc17 	ldw	r2,-16(fp)
  121990:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  121994:	00c004b4 	movhi	r3,18
  121998:	18c96a04 	addi	r3,r3,9640
  12199c:	e0bffb17 	ldw	r2,-20(fp)
  1219a0:	10800324 	muli	r2,r2,12
  1219a4:	1885883a 	add	r2,r3,r2
  1219a8:	10800204 	addi	r2,r2,8
  1219ac:	10c00017 	ldw	r3,0(r2)
  1219b0:	e0bffc17 	ldw	r2,-16(fp)
  1219b4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  1219b8:	e13ffb17 	ldw	r4,-20(fp)
  1219bc:	0121cbc0 	call	121cbc <alt_release_fd>
  }
} 
  1219c0:	e037883a 	mov	sp,fp
  1219c4:	dfc00117 	ldw	ra,4(sp)
  1219c8:	df000017 	ldw	fp,0(sp)
  1219cc:	dec00204 	addi	sp,sp,8
  1219d0:	f800283a 	ret

001219d4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  1219d4:	defffb04 	addi	sp,sp,-20
  1219d8:	dfc00415 	stw	ra,16(sp)
  1219dc:	df000315 	stw	fp,12(sp)
  1219e0:	df000304 	addi	fp,sp,12
  1219e4:	e13ffd15 	stw	r4,-12(fp)
  1219e8:	e17ffe15 	stw	r5,-8(fp)
  1219ec:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  1219f0:	010004b4 	movhi	r4,18
  1219f4:	21096d04 	addi	r4,r4,9652
  1219f8:	e17ffd17 	ldw	r5,-12(fp)
  1219fc:	01800044 	movi	r6,1
  121a00:	01c07fc4 	movi	r7,511
  121a04:	01219140 	call	121914 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  121a08:	010004b4 	movhi	r4,18
  121a0c:	21096a04 	addi	r4,r4,9640
  121a10:	e17ffe17 	ldw	r5,-8(fp)
  121a14:	000d883a 	mov	r6,zero
  121a18:	01c07fc4 	movi	r7,511
  121a1c:	01219140 	call	121914 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  121a20:	010004b4 	movhi	r4,18
  121a24:	21097004 	addi	r4,r4,9664
  121a28:	e17fff17 	ldw	r5,-4(fp)
  121a2c:	01800044 	movi	r6,1
  121a30:	01c07fc4 	movi	r7,511
  121a34:	01219140 	call	121914 <alt_open_fd>
}  
  121a38:	e037883a 	mov	sp,fp
  121a3c:	dfc00117 	ldw	ra,4(sp)
  121a40:	df000017 	ldw	fp,0(sp)
  121a44:	dec00204 	addi	sp,sp,8
  121a48:	f800283a 	ret

00121a4c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  121a4c:	defffe04 	addi	sp,sp,-8
  121a50:	dfc00115 	stw	ra,4(sp)
  121a54:	df000015 	stw	fp,0(sp)
  121a58:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  121a5c:	008004b4 	movhi	r2,18
  121a60:	1089d204 	addi	r2,r2,10056
  121a64:	10800017 	ldw	r2,0(r2)
  121a68:	10000526 	beq	r2,zero,121a80 <alt_get_errno+0x34>
  121a6c:	008004b4 	movhi	r2,18
  121a70:	1089d204 	addi	r2,r2,10056
  121a74:	10800017 	ldw	r2,0(r2)
  121a78:	103ee83a 	callr	r2
  121a7c:	00000206 	br	121a88 <alt_get_errno+0x3c>
  121a80:	008004b4 	movhi	r2,18
  121a84:	108a8a04 	addi	r2,r2,10792
}
  121a88:	e037883a 	mov	sp,fp
  121a8c:	dfc00117 	ldw	ra,4(sp)
  121a90:	df000017 	ldw	fp,0(sp)
  121a94:	dec00204 	addi	sp,sp,8
  121a98:	f800283a 	ret

00121a9c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  121a9c:	defffd04 	addi	sp,sp,-12
  121aa0:	df000215 	stw	fp,8(sp)
  121aa4:	df000204 	addi	fp,sp,8
  121aa8:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  121aac:	e0bfff17 	ldw	r2,-4(fp)
  121ab0:	10800217 	ldw	r2,8(r2)
  121ab4:	10d00034 	orhi	r3,r2,16384
  121ab8:	e0bfff17 	ldw	r2,-4(fp)
  121abc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  121ac0:	e03ffe15 	stw	zero,-8(fp)
  121ac4:	00001d06 	br	121b3c <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  121ac8:	00c004b4 	movhi	r3,18
  121acc:	18c96a04 	addi	r3,r3,9640
  121ad0:	e0bffe17 	ldw	r2,-8(fp)
  121ad4:	10800324 	muli	r2,r2,12
  121ad8:	1885883a 	add	r2,r3,r2
  121adc:	10c00017 	ldw	r3,0(r2)
  121ae0:	e0bfff17 	ldw	r2,-4(fp)
  121ae4:	10800017 	ldw	r2,0(r2)
  121ae8:	1880111e 	bne	r3,r2,121b30 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  121aec:	00c004b4 	movhi	r3,18
  121af0:	18c96a04 	addi	r3,r3,9640
  121af4:	e0bffe17 	ldw	r2,-8(fp)
  121af8:	10800324 	muli	r2,r2,12
  121afc:	1885883a 	add	r2,r3,r2
  121b00:	10800204 	addi	r2,r2,8
  121b04:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  121b08:	1000090e 	bge	r2,zero,121b30 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
  121b0c:	e0bffe17 	ldw	r2,-8(fp)
  121b10:	10c00324 	muli	r3,r2,12
  121b14:	008004b4 	movhi	r2,18
  121b18:	10896a04 	addi	r2,r2,9640
  121b1c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  121b20:	e0bfff17 	ldw	r2,-4(fp)
  121b24:	18800226 	beq	r3,r2,121b30 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  121b28:	00bffcc4 	movi	r2,-13
  121b2c:	00000a06 	br	121b58 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  121b30:	e0bffe17 	ldw	r2,-8(fp)
  121b34:	10800044 	addi	r2,r2,1
  121b38:	e0bffe15 	stw	r2,-8(fp)
  121b3c:	008004b4 	movhi	r2,18
  121b40:	1089d104 	addi	r2,r2,10052
  121b44:	10800017 	ldw	r2,0(r2)
  121b48:	1007883a 	mov	r3,r2
  121b4c:	e0bffe17 	ldw	r2,-8(fp)
  121b50:	18bfdd2e 	bgeu	r3,r2,121ac8 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  121b54:	0005883a 	mov	r2,zero
}
  121b58:	e037883a 	mov	sp,fp
  121b5c:	df000017 	ldw	fp,0(sp)
  121b60:	dec00104 	addi	sp,sp,4
  121b64:	f800283a 	ret

00121b68 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  121b68:	defff604 	addi	sp,sp,-40
  121b6c:	dfc00915 	stw	ra,36(sp)
  121b70:	df000815 	stw	fp,32(sp)
  121b74:	df000804 	addi	fp,sp,32
  121b78:	e13ffd15 	stw	r4,-12(fp)
  121b7c:	e17ffe15 	stw	r5,-8(fp)
  121b80:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  121b84:	00bfffc4 	movi	r2,-1
  121b88:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
  121b8c:	00bffb44 	movi	r2,-19
  121b90:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
  121b94:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  121b98:	e13ffd17 	ldw	r4,-12(fp)
  121b9c:	014004b4 	movhi	r5,18
  121ba0:	2949cf04 	addi	r5,r5,10044
  121ba4:	0121d3c0 	call	121d3c <alt_find_dev>
  121ba8:	e0bff815 	stw	r2,-32(fp)
  121bac:	e0bff817 	ldw	r2,-32(fp)
  121bb0:	1000051e 	bne	r2,zero,121bc8 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  121bb4:	e13ffd17 	ldw	r4,-12(fp)
  121bb8:	0121dcc0 	call	121dcc <alt_find_file>
  121bbc:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
  121bc0:	00800044 	movi	r2,1
  121bc4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  121bc8:	e0bff817 	ldw	r2,-32(fp)
  121bcc:	10002926 	beq	r2,zero,121c74 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
  121bd0:	e13ff817 	ldw	r4,-32(fp)
  121bd4:	0121ee00 	call	121ee0 <alt_get_fd>
  121bd8:	e0bff915 	stw	r2,-28(fp)
  121bdc:	e0bff917 	ldw	r2,-28(fp)
  121be0:	1000030e 	bge	r2,zero,121bf0 <open+0x88>
    {
      status = index;
  121be4:	e0bff917 	ldw	r2,-28(fp)
  121be8:	e0bffa15 	stw	r2,-24(fp)
  121bec:	00002306 	br	121c7c <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
  121bf0:	e0bff917 	ldw	r2,-28(fp)
  121bf4:	10c00324 	muli	r3,r2,12
  121bf8:	008004b4 	movhi	r2,18
  121bfc:	10896a04 	addi	r2,r2,9640
  121c00:	1885883a 	add	r2,r3,r2
  121c04:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  121c08:	e0fffe17 	ldw	r3,-8(fp)
  121c0c:	00900034 	movhi	r2,16384
  121c10:	10bfffc4 	addi	r2,r2,-1
  121c14:	1886703a 	and	r3,r3,r2
  121c18:	e0bffc17 	ldw	r2,-16(fp)
  121c1c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  121c20:	e0bffb17 	ldw	r2,-20(fp)
  121c24:	1000051e 	bne	r2,zero,121c3c <open+0xd4>
  121c28:	e13ffc17 	ldw	r4,-16(fp)
  121c2c:	0121a9c0 	call	121a9c <alt_file_locked>
  121c30:	e0bffa15 	stw	r2,-24(fp)
  121c34:	e0bffa17 	ldw	r2,-24(fp)
  121c38:	10001016 	blt	r2,zero,121c7c <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  121c3c:	e0bff817 	ldw	r2,-32(fp)
  121c40:	10800317 	ldw	r2,12(r2)
  121c44:	10000826 	beq	r2,zero,121c68 <open+0x100>
  121c48:	e0bff817 	ldw	r2,-32(fp)
  121c4c:	10800317 	ldw	r2,12(r2)
  121c50:	e13ffc17 	ldw	r4,-16(fp)
  121c54:	e17ffd17 	ldw	r5,-12(fp)
  121c58:	e1bffe17 	ldw	r6,-8(fp)
  121c5c:	e1ffff17 	ldw	r7,-4(fp)
  121c60:	103ee83a 	callr	r2
  121c64:	00000106 	br	121c6c <open+0x104>
  121c68:	0005883a 	mov	r2,zero
  121c6c:	e0bffa15 	stw	r2,-24(fp)
  121c70:	00000206 	br	121c7c <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
  121c74:	00bffb44 	movi	r2,-19
  121c78:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  121c7c:	e0bffa17 	ldw	r2,-24(fp)
  121c80:	1000080e 	bge	r2,zero,121ca4 <open+0x13c>
  {
    alt_release_fd (index);  
  121c84:	e13ff917 	ldw	r4,-28(fp)
  121c88:	0121cbc0 	call	121cbc <alt_release_fd>
    ALT_ERRNO = -status;
  121c8c:	0121a4c0 	call	121a4c <alt_get_errno>
  121c90:	e0fffa17 	ldw	r3,-24(fp)
  121c94:	00c7c83a 	sub	r3,zero,r3
  121c98:	10c00015 	stw	r3,0(r2)
    return -1;
  121c9c:	00bfffc4 	movi	r2,-1
  121ca0:	00000106 	br	121ca8 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
  121ca4:	e0bff917 	ldw	r2,-28(fp)
}
  121ca8:	e037883a 	mov	sp,fp
  121cac:	dfc00117 	ldw	ra,4(sp)
  121cb0:	df000017 	ldw	fp,0(sp)
  121cb4:	dec00204 	addi	sp,sp,8
  121cb8:	f800283a 	ret

00121cbc <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  121cbc:	defffe04 	addi	sp,sp,-8
  121cc0:	df000115 	stw	fp,4(sp)
  121cc4:	df000104 	addi	fp,sp,4
  121cc8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  121ccc:	e0bfff17 	ldw	r2,-4(fp)
  121cd0:	108000d0 	cmplti	r2,r2,3
  121cd4:	10000d1e 	bne	r2,zero,121d0c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  121cd8:	00c004b4 	movhi	r3,18
  121cdc:	18c96a04 	addi	r3,r3,9640
  121ce0:	e0bfff17 	ldw	r2,-4(fp)
  121ce4:	10800324 	muli	r2,r2,12
  121ce8:	1885883a 	add	r2,r3,r2
  121cec:	10800204 	addi	r2,r2,8
  121cf0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  121cf4:	00c004b4 	movhi	r3,18
  121cf8:	18c96a04 	addi	r3,r3,9640
  121cfc:	e0bfff17 	ldw	r2,-4(fp)
  121d00:	10800324 	muli	r2,r2,12
  121d04:	1885883a 	add	r2,r3,r2
  121d08:	10000015 	stw	zero,0(r2)
  }
}
  121d0c:	e037883a 	mov	sp,fp
  121d10:	df000017 	ldw	fp,0(sp)
  121d14:	dec00104 	addi	sp,sp,4
  121d18:	f800283a 	ret

00121d1c <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
  121d1c:	deffff04 	addi	sp,sp,-4
  121d20:	df000015 	stw	fp,0(sp)
  121d24:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  121d28:	000170fa 	wrctl	ienable,zero
}
  121d2c:	e037883a 	mov	sp,fp
  121d30:	df000017 	ldw	fp,0(sp)
  121d34:	dec00104 	addi	sp,sp,4
  121d38:	f800283a 	ret

00121d3c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  121d3c:	defffa04 	addi	sp,sp,-24
  121d40:	dfc00515 	stw	ra,20(sp)
  121d44:	df000415 	stw	fp,16(sp)
  121d48:	df000404 	addi	fp,sp,16
  121d4c:	e13ffe15 	stw	r4,-8(fp)
  121d50:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
  121d54:	e0bfff17 	ldw	r2,-4(fp)
  121d58:	10800017 	ldw	r2,0(r2)
  121d5c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  121d60:	e13ffe17 	ldw	r4,-8(fp)
  121d64:	0120ba00 	call	120ba0 <strlen>
  121d68:	10800044 	addi	r2,r2,1
  121d6c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  121d70:	00000d06 	br	121da8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  121d74:	e0bffc17 	ldw	r2,-16(fp)
  121d78:	10c00217 	ldw	r3,8(r2)
  121d7c:	e0bffd17 	ldw	r2,-12(fp)
  121d80:	1809883a 	mov	r4,r3
  121d84:	e17ffe17 	ldw	r5,-8(fp)
  121d88:	100d883a 	mov	r6,r2
  121d8c:	01220540 	call	122054 <memcmp>
  121d90:	1000021e 	bne	r2,zero,121d9c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  121d94:	e0bffc17 	ldw	r2,-16(fp)
  121d98:	00000706 	br	121db8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  121d9c:	e0bffc17 	ldw	r2,-16(fp)
  121da0:	10800017 	ldw	r2,0(r2)
  121da4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  121da8:	e0fffc17 	ldw	r3,-16(fp)
  121dac:	e0bfff17 	ldw	r2,-4(fp)
  121db0:	18bff01e 	bne	r3,r2,121d74 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  121db4:	0005883a 	mov	r2,zero
}
  121db8:	e037883a 	mov	sp,fp
  121dbc:	dfc00117 	ldw	ra,4(sp)
  121dc0:	df000017 	ldw	fp,0(sp)
  121dc4:	dec00204 	addi	sp,sp,8
  121dc8:	f800283a 	ret

00121dcc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  121dcc:	defffb04 	addi	sp,sp,-20
  121dd0:	dfc00415 	stw	ra,16(sp)
  121dd4:	df000315 	stw	fp,12(sp)
  121dd8:	df000304 	addi	fp,sp,12
  121ddc:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  121de0:	008004b4 	movhi	r2,18
  121de4:	1089cd04 	addi	r2,r2,10036
  121de8:	10800017 	ldw	r2,0(r2)
  121dec:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  121df0:	00003106 	br	121eb8 <alt_find_file+0xec>
  {
    len = strlen(next->name);
  121df4:	e0bffd17 	ldw	r2,-12(fp)
  121df8:	10800217 	ldw	r2,8(r2)
  121dfc:	1009883a 	mov	r4,r2
  121e00:	0120ba00 	call	120ba0 <strlen>
  121e04:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  121e08:	e0bffd17 	ldw	r2,-12(fp)
  121e0c:	10c00217 	ldw	r3,8(r2)
  121e10:	e0bffe17 	ldw	r2,-8(fp)
  121e14:	10bfffc4 	addi	r2,r2,-1
  121e18:	1885883a 	add	r2,r3,r2
  121e1c:	10800003 	ldbu	r2,0(r2)
  121e20:	10803fcc 	andi	r2,r2,255
  121e24:	1080201c 	xori	r2,r2,128
  121e28:	10bfe004 	addi	r2,r2,-128
  121e2c:	10800bd8 	cmpnei	r2,r2,47
  121e30:	1000031e 	bne	r2,zero,121e40 <alt_find_file+0x74>
    {
      len -= 1;
  121e34:	e0bffe17 	ldw	r2,-8(fp)
  121e38:	10bfffc4 	addi	r2,r2,-1
  121e3c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  121e40:	e0bffe17 	ldw	r2,-8(fp)
  121e44:	e0ffff17 	ldw	r3,-4(fp)
  121e48:	1885883a 	add	r2,r3,r2
  121e4c:	10800003 	ldbu	r2,0(r2)
  121e50:	10803fcc 	andi	r2,r2,255
  121e54:	1080201c 	xori	r2,r2,128
  121e58:	10bfe004 	addi	r2,r2,-128
  121e5c:	10800be0 	cmpeqi	r2,r2,47
  121e60:	1000081e 	bne	r2,zero,121e84 <alt_find_file+0xb8>
  121e64:	e0bffe17 	ldw	r2,-8(fp)
  121e68:	e0ffff17 	ldw	r3,-4(fp)
  121e6c:	1885883a 	add	r2,r3,r2
  121e70:	10800003 	ldbu	r2,0(r2)
  121e74:	10803fcc 	andi	r2,r2,255
  121e78:	1080201c 	xori	r2,r2,128
  121e7c:	10bfe004 	addi	r2,r2,-128
  121e80:	10000a1e 	bne	r2,zero,121eac <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
  121e84:	e0bffd17 	ldw	r2,-12(fp)
  121e88:	10c00217 	ldw	r3,8(r2)
  121e8c:	e0bffe17 	ldw	r2,-8(fp)
  121e90:	1809883a 	mov	r4,r3
  121e94:	e17fff17 	ldw	r5,-4(fp)
  121e98:	100d883a 	mov	r6,r2
  121e9c:	01220540 	call	122054 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  121ea0:	1000021e 	bne	r2,zero,121eac <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  121ea4:	e0bffd17 	ldw	r2,-12(fp)
  121ea8:	00000806 	br	121ecc <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
  121eac:	e0bffd17 	ldw	r2,-12(fp)
  121eb0:	10800017 	ldw	r2,0(r2)
  121eb4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  121eb8:	e0fffd17 	ldw	r3,-12(fp)
  121ebc:	008004b4 	movhi	r2,18
  121ec0:	1089cd04 	addi	r2,r2,10036
  121ec4:	18bfcb1e 	bne	r3,r2,121df4 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  121ec8:	0005883a 	mov	r2,zero
}
  121ecc:	e037883a 	mov	sp,fp
  121ed0:	dfc00117 	ldw	ra,4(sp)
  121ed4:	df000017 	ldw	fp,0(sp)
  121ed8:	dec00204 	addi	sp,sp,8
  121edc:	f800283a 	ret

00121ee0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  121ee0:	defffc04 	addi	sp,sp,-16
  121ee4:	df000315 	stw	fp,12(sp)
  121ee8:	df000304 	addi	fp,sp,12
  121eec:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  121ef0:	00bffa04 	movi	r2,-24
  121ef4:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  121ef8:	e03ffd15 	stw	zero,-12(fp)
  121efc:	00001d06 	br	121f74 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
  121f00:	00c004b4 	movhi	r3,18
  121f04:	18c96a04 	addi	r3,r3,9640
  121f08:	e0bffd17 	ldw	r2,-12(fp)
  121f0c:	10800324 	muli	r2,r2,12
  121f10:	1885883a 	add	r2,r3,r2
  121f14:	10800017 	ldw	r2,0(r2)
  121f18:	1000131e 	bne	r2,zero,121f68 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
  121f1c:	00c004b4 	movhi	r3,18
  121f20:	18c96a04 	addi	r3,r3,9640
  121f24:	e0bffd17 	ldw	r2,-12(fp)
  121f28:	10800324 	muli	r2,r2,12
  121f2c:	1885883a 	add	r2,r3,r2
  121f30:	e0ffff17 	ldw	r3,-4(fp)
  121f34:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
  121f38:	008004b4 	movhi	r2,18
  121f3c:	1089d104 	addi	r2,r2,10052
  121f40:	10c00017 	ldw	r3,0(r2)
  121f44:	e0bffd17 	ldw	r2,-12(fp)
  121f48:	1880040e 	bge	r3,r2,121f5c <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
  121f4c:	008004b4 	movhi	r2,18
  121f50:	1089d104 	addi	r2,r2,10052
  121f54:	e0fffd17 	ldw	r3,-12(fp)
  121f58:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
  121f5c:	e0bffd17 	ldw	r2,-12(fp)
  121f60:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
  121f64:	00000606 	br	121f80 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  121f68:	e0bffd17 	ldw	r2,-12(fp)
  121f6c:	10800044 	addi	r2,r2,1
  121f70:	e0bffd15 	stw	r2,-12(fp)
  121f74:	e0bffd17 	ldw	r2,-12(fp)
  121f78:	10800810 	cmplti	r2,r2,32
  121f7c:	103fe01e 	bne	r2,zero,121f00 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  121f80:	e0bffe17 	ldw	r2,-8(fp)
}
  121f84:	e037883a 	mov	sp,fp
  121f88:	df000017 	ldw	fp,0(sp)
  121f8c:	dec00104 	addi	sp,sp,4
  121f90:	f800283a 	ret

00121f94 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  121f94:	defffb04 	addi	sp,sp,-20
  121f98:	df000415 	stw	fp,16(sp)
  121f9c:	df000404 	addi	fp,sp,16
  121fa0:	e13ffe15 	stw	r4,-8(fp)
  121fa4:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  121fa8:	e0bfff17 	ldw	r2,-4(fp)
  121fac:	10840070 	cmpltui	r2,r2,4097
  121fb0:	1000021e 	bne	r2,zero,121fbc <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  121fb4:	00840004 	movi	r2,4096
  121fb8:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  121fbc:	e0fffe17 	ldw	r3,-8(fp)
  121fc0:	e0bfff17 	ldw	r2,-4(fp)
  121fc4:	1885883a 	add	r2,r3,r2
  121fc8:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  121fcc:	e0bffe17 	ldw	r2,-8(fp)
  121fd0:	e0bffc15 	stw	r2,-16(fp)
  121fd4:	00000506 	br	121fec <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  121fd8:	e0bffc17 	ldw	r2,-16(fp)
  121fdc:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  121fe0:	e0bffc17 	ldw	r2,-16(fp)
  121fe4:	10800804 	addi	r2,r2,32
  121fe8:	e0bffc15 	stw	r2,-16(fp)
  121fec:	e0fffc17 	ldw	r3,-16(fp)
  121ff0:	e0bffd17 	ldw	r2,-12(fp)
  121ff4:	18bff836 	bltu	r3,r2,121fd8 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  121ff8:	e0bffe17 	ldw	r2,-8(fp)
  121ffc:	108007cc 	andi	r2,r2,31
  122000:	10000226 	beq	r2,zero,12200c <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  122004:	e0bffc17 	ldw	r2,-16(fp)
  122008:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  12200c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  122010:	e037883a 	mov	sp,fp
  122014:	df000017 	ldw	fp,0(sp)
  122018:	dec00104 	addi	sp,sp,4
  12201c:	f800283a 	ret

00122020 <atexit>:
  122020:	200b883a 	mov	r5,r4
  122024:	000d883a 	mov	r6,zero
  122028:	0009883a 	mov	r4,zero
  12202c:	000f883a 	mov	r7,zero
  122030:	012209c1 	jmpi	12209c <__register_exitproc>

00122034 <exit>:
  122034:	defffe04 	addi	sp,sp,-8
  122038:	000b883a 	mov	r5,zero
  12203c:	dc000015 	stw	r16,0(sp)
  122040:	dfc00115 	stw	ra,4(sp)
  122044:	2021883a 	mov	r16,r4
  122048:	01222240 	call	122224 <__call_exitprocs>
  12204c:	8009883a 	mov	r4,r16
  122050:	01223fc0 	call	1223fc <_exit>

00122054 <memcmp>:
  122054:	30000d26 	beq	r6,zero,12208c <memcmp+0x38>
  122058:	20c00003 	ldbu	r3,0(r4)
  12205c:	28800003 	ldbu	r2,0(r5)
  122060:	18800c1e 	bne	r3,r2,122094 <memcmp+0x40>
  122064:	31bfff84 	addi	r6,r6,-2
  122068:	01ffffc4 	movi	r7,-1
  12206c:	00000406 	br	122080 <memcmp+0x2c>
  122070:	20c00003 	ldbu	r3,0(r4)
  122074:	28800003 	ldbu	r2,0(r5)
  122078:	31bfffc4 	addi	r6,r6,-1
  12207c:	1880051e 	bne	r3,r2,122094 <memcmp+0x40>
  122080:	21000044 	addi	r4,r4,1
  122084:	29400044 	addi	r5,r5,1
  122088:	31fff91e 	bne	r6,r7,122070 <memcmp+0x1c>
  12208c:	0005883a 	mov	r2,zero
  122090:	f800283a 	ret
  122094:	1885c83a 	sub	r2,r3,r2
  122098:	f800283a 	ret

0012209c <__register_exitproc>:
  12209c:	defff904 	addi	sp,sp,-28
  1220a0:	008004b4 	movhi	r2,18
  1220a4:	1089ca04 	addi	r2,r2,10024
  1220a8:	dc400415 	stw	r17,16(sp)
  1220ac:	14400017 	ldw	r17,0(r2)
  1220b0:	dc000315 	stw	r16,12(sp)
  1220b4:	dc800515 	stw	r18,20(sp)
  1220b8:	8c000c17 	ldw	r16,48(r17)
  1220bc:	dfc00615 	stw	ra,24(sp)
  1220c0:	2025883a 	mov	r18,r4
  1220c4:	80004226 	beq	r16,zero,1221d0 <__register_exitproc+0x134>
  1220c8:	80800117 	ldw	r2,4(r16)
  1220cc:	00c007c4 	movi	r3,31
  1220d0:	1880180e 	bge	r3,r2,122134 <__register_exitproc+0x98>
  1220d4:	00800034 	movhi	r2,0
  1220d8:	10800004 	addi	r2,r2,0
  1220dc:	1000071e 	bne	r2,zero,1220fc <__register_exitproc+0x60>
  1220e0:	00bfffc4 	movi	r2,-1
  1220e4:	dfc00617 	ldw	ra,24(sp)
  1220e8:	dc800517 	ldw	r18,20(sp)
  1220ec:	dc400417 	ldw	r17,16(sp)
  1220f0:	dc000317 	ldw	r16,12(sp)
  1220f4:	dec00704 	addi	sp,sp,28
  1220f8:	f800283a 	ret
  1220fc:	01002304 	movi	r4,140
  122100:	d9400015 	stw	r5,0(sp)
  122104:	d9800115 	stw	r6,4(sp)
  122108:	d9c00215 	stw	r7,8(sp)
  12210c:	00000000 	call	0 <__alt_mem_rom-0x80000>
  122110:	1021883a 	mov	r16,r2
  122114:	d9400017 	ldw	r5,0(sp)
  122118:	d9800117 	ldw	r6,4(sp)
  12211c:	d9c00217 	ldw	r7,8(sp)
  122120:	103fef26 	beq	r2,zero,1220e0 <__register_exitproc+0x44>
  122124:	88800c17 	ldw	r2,48(r17)
  122128:	80000115 	stw	zero,4(r16)
  12212c:	80800015 	stw	r2,0(r16)
  122130:	8c000c15 	stw	r16,48(r17)
  122134:	90001726 	beq	r18,zero,122194 <__register_exitproc+0xf8>
  122138:	80802217 	ldw	r2,136(r16)
  12213c:	10002826 	beq	r2,zero,1221e0 <__register_exitproc+0x144>
  122140:	12804017 	ldw	r10,256(r2)
  122144:	80c00117 	ldw	r3,4(r16)
  122148:	02400044 	movi	r9,1
  12214c:	48d2983a 	sll	r9,r9,r3
  122150:	19000804 	addi	r4,r3,32
  122154:	18d1883a 	add	r8,r3,r3
  122158:	2109883a 	add	r4,r4,r4
  12215c:	4211883a 	add	r8,r8,r8
  122160:	2109883a 	add	r4,r4,r4
  122164:	1109883a 	add	r4,r2,r4
  122168:	1211883a 	add	r8,r2,r8
  12216c:	5254b03a 	or	r10,r10,r9
  122170:	21c00015 	stw	r7,0(r4)
  122174:	41800015 	stw	r6,0(r8)
  122178:	12804015 	stw	r10,256(r2)
  12217c:	01000084 	movi	r4,2
  122180:	9100051e 	bne	r18,r4,122198 <__register_exitproc+0xfc>
  122184:	11004117 	ldw	r4,260(r2)
  122188:	2252b03a 	or	r9,r4,r9
  12218c:	12404115 	stw	r9,260(r2)
  122190:	00000106 	br	122198 <__register_exitproc+0xfc>
  122194:	80c00117 	ldw	r3,4(r16)
  122198:	18800084 	addi	r2,r3,2
  12219c:	1085883a 	add	r2,r2,r2
  1221a0:	1085883a 	add	r2,r2,r2
  1221a4:	8085883a 	add	r2,r16,r2
  1221a8:	18c00044 	addi	r3,r3,1
  1221ac:	11400015 	stw	r5,0(r2)
  1221b0:	0005883a 	mov	r2,zero
  1221b4:	80c00115 	stw	r3,4(r16)
  1221b8:	dfc00617 	ldw	ra,24(sp)
  1221bc:	dc800517 	ldw	r18,20(sp)
  1221c0:	dc400417 	ldw	r17,16(sp)
  1221c4:	dc000317 	ldw	r16,12(sp)
  1221c8:	dec00704 	addi	sp,sp,28
  1221cc:	f800283a 	ret
  1221d0:	040004b4 	movhi	r16,18
  1221d4:	840acf04 	addi	r16,r16,11068
  1221d8:	8c000c15 	stw	r16,48(r17)
  1221dc:	003fba06 	br	1220c8 <__register_exitproc+0x2c>
  1221e0:	00800034 	movhi	r2,0
  1221e4:	10800004 	addi	r2,r2,0
  1221e8:	103fbd26 	beq	r2,zero,1220e0 <__register_exitproc+0x44>
  1221ec:	d9400015 	stw	r5,0(sp)
  1221f0:	d9800115 	stw	r6,4(sp)
  1221f4:	d9c00215 	stw	r7,8(sp)
  1221f8:	01004204 	movi	r4,264
  1221fc:	103ee83a 	callr	r2
  122200:	d9400017 	ldw	r5,0(sp)
  122204:	d9800117 	ldw	r6,4(sp)
  122208:	d9c00217 	ldw	r7,8(sp)
  12220c:	103fb426 	beq	r2,zero,1220e0 <__register_exitproc+0x44>
  122210:	10004015 	stw	zero,256(r2)
  122214:	10004115 	stw	zero,260(r2)
  122218:	80802215 	stw	r2,136(r16)
  12221c:	0015883a 	mov	r10,zero
  122220:	003fc806 	br	122144 <__register_exitproc+0xa8>

00122224 <__call_exitprocs>:
  122224:	008004b4 	movhi	r2,18
  122228:	1089ca04 	addi	r2,r2,10024
  12222c:	10800017 	ldw	r2,0(r2)
  122230:	defff204 	addi	sp,sp,-56
  122234:	df000c15 	stw	fp,48(sp)
  122238:	d8800015 	stw	r2,0(sp)
  12223c:	10800c04 	addi	r2,r2,48
  122240:	dd400915 	stw	r21,36(sp)
  122244:	dfc00d15 	stw	ra,52(sp)
  122248:	ddc00b15 	stw	r23,44(sp)
  12224c:	dd800a15 	stw	r22,40(sp)
  122250:	dd000815 	stw	r20,32(sp)
  122254:	dcc00715 	stw	r19,28(sp)
  122258:	dc800615 	stw	r18,24(sp)
  12225c:	dc400515 	stw	r17,20(sp)
  122260:	dc000415 	stw	r16,16(sp)
  122264:	d9000115 	stw	r4,4(sp)
  122268:	2839883a 	mov	fp,r5
  12226c:	d8800215 	stw	r2,8(sp)
  122270:	057fffc4 	movi	r21,-1
  122274:	d8800017 	ldw	r2,0(sp)
  122278:	dd800217 	ldw	r22,8(sp)
  12227c:	15c00c17 	ldw	r23,48(r2)
  122280:	b8001b26 	beq	r23,zero,1222f0 <__call_exitprocs+0xcc>
  122284:	b9000117 	ldw	r4,4(r23)
  122288:	bd002217 	ldw	r20,136(r23)
  12228c:	243fffc4 	addi	r16,r4,-1
  122290:	80001416 	blt	r16,zero,1222e4 <__call_exitprocs+0xc0>
  122294:	244007c4 	addi	r17,r4,31
  122298:	21000044 	addi	r4,r4,1
  12229c:	8c63883a 	add	r17,r17,r17
  1222a0:	8427883a 	add	r19,r16,r16
  1222a4:	2109883a 	add	r4,r4,r4
  1222a8:	8c63883a 	add	r17,r17,r17
  1222ac:	9ce7883a 	add	r19,r19,r19
  1222b0:	2109883a 	add	r4,r4,r4
  1222b4:	a463883a 	add	r17,r20,r17
  1222b8:	a4e7883a 	add	r19,r20,r19
  1222bc:	b925883a 	add	r18,r23,r4
  1222c0:	e0001726 	beq	fp,zero,122320 <__call_exitprocs+0xfc>
  1222c4:	a0000226 	beq	r20,zero,1222d0 <__call_exitprocs+0xac>
  1222c8:	89400017 	ldw	r5,0(r17)
  1222cc:	2f001426 	beq	r5,fp,122320 <__call_exitprocs+0xfc>
  1222d0:	843fffc4 	addi	r16,r16,-1
  1222d4:	8c7fff04 	addi	r17,r17,-4
  1222d8:	9cffff04 	addi	r19,r19,-4
  1222dc:	94bfff04 	addi	r18,r18,-4
  1222e0:	857ff71e 	bne	r16,r21,1222c0 <__call_exitprocs+0x9c>
  1222e4:	00800034 	movhi	r2,0
  1222e8:	10800004 	addi	r2,r2,0
  1222ec:	1000311e 	bne	r2,zero,1223b4 <__call_exitprocs+0x190>
  1222f0:	dfc00d17 	ldw	ra,52(sp)
  1222f4:	df000c17 	ldw	fp,48(sp)
  1222f8:	ddc00b17 	ldw	r23,44(sp)
  1222fc:	dd800a17 	ldw	r22,40(sp)
  122300:	dd400917 	ldw	r21,36(sp)
  122304:	dd000817 	ldw	r20,32(sp)
  122308:	dcc00717 	ldw	r19,28(sp)
  12230c:	dc800617 	ldw	r18,24(sp)
  122310:	dc400517 	ldw	r17,20(sp)
  122314:	dc000417 	ldw	r16,16(sp)
  122318:	dec00e04 	addi	sp,sp,56
  12231c:	f800283a 	ret
  122320:	b9000117 	ldw	r4,4(r23)
  122324:	92000017 	ldw	r8,0(r18)
  122328:	213fffc4 	addi	r4,r4,-1
  12232c:	24001a26 	beq	r4,r16,122398 <__call_exitprocs+0x174>
  122330:	90000015 	stw	zero,0(r18)
  122334:	403fe626 	beq	r8,zero,1222d0 <__call_exitprocs+0xac>
  122338:	ba400117 	ldw	r9,4(r23)
  12233c:	a0001226 	beq	r20,zero,122388 <__call_exitprocs+0x164>
  122340:	00800044 	movi	r2,1
  122344:	1408983a 	sll	r4,r2,r16
  122348:	a1404017 	ldw	r5,256(r20)
  12234c:	214a703a 	and	r5,r4,r5
  122350:	28000d26 	beq	r5,zero,122388 <__call_exitprocs+0x164>
  122354:	a1404117 	ldw	r5,260(r20)
  122358:	2148703a 	and	r4,r4,r5
  12235c:	2000101e 	bne	r4,zero,1223a0 <__call_exitprocs+0x17c>
  122360:	99400017 	ldw	r5,0(r19)
  122364:	d9000117 	ldw	r4,4(sp)
  122368:	da400315 	stw	r9,12(sp)
  12236c:	403ee83a 	callr	r8
  122370:	da400317 	ldw	r9,12(sp)
  122374:	b9000117 	ldw	r4,4(r23)
  122378:	227fbe1e 	bne	r4,r9,122274 <__call_exitprocs+0x50>
  12237c:	b1000017 	ldw	r4,0(r22)
  122380:	25ffd326 	beq	r4,r23,1222d0 <__call_exitprocs+0xac>
  122384:	003fbb06 	br	122274 <__call_exitprocs+0x50>
  122388:	da400315 	stw	r9,12(sp)
  12238c:	403ee83a 	callr	r8
  122390:	da400317 	ldw	r9,12(sp)
  122394:	003ff706 	br	122374 <__call_exitprocs+0x150>
  122398:	bc000115 	stw	r16,4(r23)
  12239c:	003fe506 	br	122334 <__call_exitprocs+0x110>
  1223a0:	99000017 	ldw	r4,0(r19)
  1223a4:	da400315 	stw	r9,12(sp)
  1223a8:	403ee83a 	callr	r8
  1223ac:	da400317 	ldw	r9,12(sp)
  1223b0:	003ff006 	br	122374 <__call_exitprocs+0x150>
  1223b4:	b9000117 	ldw	r4,4(r23)
  1223b8:	20000e1e 	bne	r4,zero,1223f4 <__call_exitprocs+0x1d0>
  1223bc:	b9000017 	ldw	r4,0(r23)
  1223c0:	20000826 	beq	r4,zero,1223e4 <__call_exitprocs+0x1c0>
  1223c4:	b1000015 	stw	r4,0(r22)
  1223c8:	a0000226 	beq	r20,zero,1223d4 <__call_exitprocs+0x1b0>
  1223cc:	a009883a 	mov	r4,r20
  1223d0:	00000000 	call	0 <__alt_mem_rom-0x80000>
  1223d4:	b809883a 	mov	r4,r23
  1223d8:	00000000 	call	0 <__alt_mem_rom-0x80000>
  1223dc:	b5c00017 	ldw	r23,0(r22)
  1223e0:	003fa706 	br	122280 <__call_exitprocs+0x5c>
  1223e4:	0007883a 	mov	r3,zero
  1223e8:	b82d883a 	mov	r22,r23
  1223ec:	182f883a 	mov	r23,r3
  1223f0:	003fa306 	br	122280 <__call_exitprocs+0x5c>
  1223f4:	b8c00017 	ldw	r3,0(r23)
  1223f8:	003ffb06 	br	1223e8 <__call_exitprocs+0x1c4>

001223fc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  1223fc:	defffc04 	addi	sp,sp,-16
  122400:	df000315 	stw	fp,12(sp)
  122404:	df000304 	addi	fp,sp,12
  122408:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  12240c:	0001883a 	nop
  122410:	e0bfff17 	ldw	r2,-4(fp)
  122414:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
  122418:	e0bffd17 	ldw	r2,-12(fp)
  12241c:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  122420:	e0bffe17 	ldw	r2,-8(fp)
  122424:	10000226 	beq	r2,zero,122430 <_exit+0x34>
    ALT_SIM_FAIL();
  122428:	002af070 	cmpltui	zero,zero,43969
  12242c:	00000106 	br	122434 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
  122430:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  122434:	003fff06 	br	122434 <_exit+0x38>
