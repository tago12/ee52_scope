
vram_test.elf:     file format elf32-littlenios2
vram_test.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00320020

Program Header:
    LOAD off    0x00001000 vaddr 0x00320000 paddr 0x00320000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00320020 paddr 0x00320020 align 2**12
         filesz 0x00002710 memsz 0x00002710 flags r-x
    LOAD off    0x00003730 vaddr 0x00322730 paddr 0x00323618 align 2**12
         filesz 0x00000ee8 memsz 0x00000ee8 flags rw-
    LOAD off    0x00005500 vaddr 0x00324500 paddr 0x00324500 align 2**12
         filesz 0x00000000 memsz 0x000000d0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00320000  00320000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         000026ec  00320020  00320020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  0032270c  0032270c  0000370c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rwdata       00000ee8  00322730  00323618  00003730  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  4 .bss          000000d0  00324500  00324500  00005500  2**2
                  ALLOC, SMALL_DATA
  5 .comment      00000023  00000000  00000000  00004618  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000570  00000000  00000000  00004640  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000868f  00000000  00000000  00004bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002926  00000000  00000000  0000d23f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000311d  00000000  00000000  0000fb65  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000840  00000000  00000000  00012c84  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001694  00000000  00000000  000134c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000229c  00000000  00000000  00014b58  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_alt_sim_info 00000060  00000000  00000000  00016df4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000178  00000000  00000000  00016e58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .thread_model 00000003  00000000  00000000  00018a24  2**0
                  CONTENTS, READONLY
 16 .cpu          00000004  00000000  00000000  00018a27  2**0
                  CONTENTS, READONLY
 17 .qsys         00000001  00000000  00000000  00018a2b  2**0
                  CONTENTS, READONLY
 18 .simulation_enabled 00000001  00000000  00000000  00018a2c  2**0
                  CONTENTS, READONLY
 19 .stderr_dev   00000004  00000000  00000000  00018a2d  2**0
                  CONTENTS, READONLY
 20 .stdin_dev    00000004  00000000  00000000  00018a31  2**0
                  CONTENTS, READONLY
 21 .stdout_dev   00000004  00000000  00000000  00018a35  2**0
                  CONTENTS, READONLY
 22 .sopc_system_name 0000000e  00000000  00000000  00018a39  2**0
                  CONTENTS, READONLY
 23 .quartus_project_dir 00000026  00000000  00000000  00018a47  2**0
                  CONTENTS, READONLY
 24 .sopcinfo     0005931a  00000000  00000000  00018a6d  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00320000 l    d  .entry	00000000 .entry
00320020 l    d  .text	00000000 .text
0032270c l    d  .rodata	00000000 .rodata
00322730 l    d  .rwdata	00000000 .rwdata
00324500 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../vram_test_bsp//obj/HAL/src/crt0.o
00320068 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 obj/default/vram_test.o
00322730 l       .rwdata	00000000 values
003200b8 l       .text	00000000 clear_mem
003200c4 l       .text	00000000 clear_loop
003200d4 l       .text	00000000 fill_array
003200f8 l       .text	00000000 write_values
00320128 l       .text	00000000 read_values
00320268 l       .text	00000000 error
00320168 l       .text	00000000 next_block
00320174 l       .text	00000000 fast_write
003201ac l       .text	00000000 fast_read
00320208 l       .text	00000000 write_values_wait
0032023c l       .text	00000000 read_values_wait
00320260 l       .text	00000000 tests_good
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 impure.c
00322f30 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_load.c
00321070 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
003235fc l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
003212f4 l     F .text	00000038 alt_dev_reg
00323418 l     O .rwdata	0000002c jtag
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
00321730 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0032188c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
003218b8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00321a90 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00321bc8 l     F .text	00000050 alt_get_errno
00321c18 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
003225a0 l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
0032115c g     F .text	00000078 alt_main
00323618 g       *ABS*	00000000 __flash_rwdata_start
003245d0 g       *ABS*	00000000 __alt_heap_start
003211f4 g     F .text	00000020 __malloc_unlock
00000000  w      *UND*	00000000 __errno
00320000 g     F .entry	0000001c __reset
00320020 g       *ABS*	00000000 __flash_exceptions_start
0032450c g     O .bss	00000004 errno
00280000 g       *ABS*	00000000 __alt_mem_rom
00324514 g     O .bss	00000004 alt_argv
0032b5ec g       *ABS*	00000000 _gp
003212c4 g     F .text	00000030 usleep
0032346c g     O .rwdata	00000180 alt_fd_list
00321eb8 g     F .text	00000090 alt_find_dev
00321b50 g     F .text	00000078 alt_io_redirect
0032270c g       *ABS*	00000000 __DTOR_END__
00321450 g     F .text	000000f4 altera_avalon_jtag_uart_read
003203f4 g     F .text	00000014 malloc
003226c0 g     F .text	00000008 __udivsi3
00322110 g     F .text	0000008c alt_icache_flush
00324508 g     O .bss	00000004 __malloc_top_pad
00320000 g       *ABS*	00000000 __alt_mem_ram
00320ba0 g     F .text	00000064 _sbrk_r
00323610 g     O .rwdata	00000004 alt_max_fd
00324504 g     O .bss	00000004 __malloc_max_sbrked_mem
003235ec g     O .rwdata	00000004 _global_impure_ptr
003245d0 g       *ABS*	00000000 __bss_end
00323444 g     O .rwdata	00000028 alt_dev_null
00321848 g     F .text	00000044 alt_dcache_flush_all
00323618 g       *ABS*	00000000 __ram_rwdata_end
00323608 g     O .rwdata	00000008 alt_dev_list
00322730 g       *ABS*	00000000 __ram_rodata_end
003226c8 g     F .text	00000008 __umodsi3
003245d0 g       *ABS*	00000000 end
0032270c g       *ABS*	00000000 __CTOR_LIST__
00340000 g       *ABS*	00000000 __alt_stack_pointer
00321544 g     F .text	00000098 altera_avalon_jtag_uart_write
00320d40 g     F .text	000002d0 _free_r
003223c8 g     F .text	000001d8 __call_exitprocs
003235f4 g     O .rwdata	00000004 __malloc_sbrk_base
00320020 g     F .text	0000004c _start
00320328 g     F .text	000000cc rand
00321360 g     F .text	00000030 alt_sys_init
00322240 g     F .text	00000188 __register_exitproc
00100000 g       *ABS*	00000000 __alt_mem_vram
00322730 g       *ABS*	00000000 __ram_rwdata_start
0032270c g       *ABS*	00000000 __ram_rodata_start
0032451c g     O .bss	00000028 __malloc_current_mallinfo
00321390 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0032205c g     F .text	000000b4 alt_get_fd
003215dc g     F .text	00000154 alt_busy_sleep
003221d0 g     F .text	00000048 memcmp
003245d0 g       *ABS*	00000000 __alt_stack_base
00323010 g     O .rwdata	00000408 __malloc_av_
00321f48 g     F .text	00000114 alt_find_file
00321908 g     F .text	000000a0 alt_dev_llist_insert
003211d4 g     F .text	00000020 __malloc_lock
00321214 g     F .text	000000b0 sbrk
00324500 g       *ABS*	00000000 __bss_start
0032006c g       .text	00000000 main
00324518 g     O .bss	00000004 alt_envp
00324500 g     O .bss	00000004 __malloc_max_total_mem
003213f0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00320270 g     F .text	000000b8 srand
00340000 g       *ABS*	00000000 __alt_heap_limit
00324544 g     O .bss	0000008c _atexit0
0032041c g     F .text	00000784 _malloc_r
00323614 g     O .rwdata	00000004 alt_errno
00322614 g     F .text	00000050 __divsi3
00320c04 g     F .text	0000013c _malloc_trim_r
0032270c g       *ABS*	00000000 __CTOR_END__
0032270c g       *ABS*	00000000 __flash_rodata_start
0032270c g       *ABS*	00000000 __DTOR_LIST__
0032132c g     F .text	00000034 alt_irq_init
00321e38 g     F .text	00000060 alt_release_fd
0032219c g     F .text	00000014 atexit
003235f0 g     O .rwdata	00000004 _impure_ptr
00324510 g     O .bss	00000004 alt_argc
00321a04 g     F .text	0000005c _do_dtors
00323600 g     O .rwdata	00000008 alt_fs_list
00320020 g       *ABS*	00000000 __ram_exceptions_start
00323618 g       *ABS*	00000000 _edata
003245d0 g       *ABS*	00000000 _end
00320020 g       *ABS*	00000000 __ram_exceptions_end
003235f8 g     O .rwdata	00000004 __malloc_trim_threshold
00321e98 g     F .text	00000020 altera_nios2_qsys_irq_init
003221b0 g     F .text	00000020 exit
00322664 g     F .text	0000005c __modsi3
00340000 g       *ABS*	00000000 __alt_data_end
003226d0 g     F .text	0000003c _exit
00321010 g     F .text	00000060 __muldi3
00322218 g     F .text	00000028 strlen
00321ce4 g     F .text	00000154 open
00321a60 g     F .text	00000030 alt_icache_flush_all
003219a8 g     F .text	0000005c _do_ctors
00321780 g     F .text	000000c8 close
003210dc g     F .text	00000080 alt_load
00320408 g     F .text	00000014 free



Disassembly of section .entry:

00320000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  320000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  320004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  320008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  32000c:	00bffd16 	blt	zero,r2,320004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  320010:	00400cb4 	movhi	at,50
    ori r1, r1, %lo(_start)
  320014:	08400814 	ori	at,at,32
    jmp r1
  320018:	0800683a 	jmp	at
  32001c:	00000000 	call	0 <__alt_mem_vram-0x100000>

Disassembly of section .text:

00320020 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  320020:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  320024:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  320028:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
  32002c:	00bffd16 	blt	zero,r2,320024 <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  320030:	06c00d34 	movhi	sp,52
    ori sp, sp, %lo(__alt_stack_pointer)
  320034:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  320038:	06800cb4 	movhi	gp,50
    ori gp, gp, %lo(_gp)
  32003c:	d6ad7b14 	ori	gp,gp,46572
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  320040:	00800cb4 	movhi	r2,50
    ori r2, r2, %lo(__bss_start)
  320044:	10914014 	ori	r2,r2,17664

    movhi r3, %hi(__bss_end)
  320048:	00c00cb4 	movhi	r3,50
    ori r3, r3, %lo(__bss_end)
  32004c:	18d17414 	ori	r3,r3,17872

    beq r2, r3, 1f
  320050:	10c00326 	beq	r2,r3,320060 <_start+0x40>

0:
    stw zero, (r2)
  320054:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  320058:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  32005c:	10fffd36 	bltu	r2,r3,320054 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  320060:	03210dc0 	call	3210dc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  320064:	032115c0 	call	32115c <alt_main>

00320068 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  320068:	003fff06 	br	320068 <alt_after_alt_main>

0032006c <main>:

/* keys_init */
    .global main
main:
    /* set up things */
    MOVHI   r4, %hi(SEED)    /* seed random number generator*/
  32006c:	0122eb74 	movhi	r4,35757
    ORI 	r4, r4, %lo(SEED)
  320070:	213c0354 	ori	r4,r4,61453
    CALL    srand
  320074:	03202700 	call	320270 <srand>
    XOR     r16, r16, r16    /* r16 is array index */
  320078:	8420f03a 	xor	r16,r16,r16
  32007c:	04400cb4 	movhi	r17,50
    MOVIA   r17, values      /* r17 is array base address */
  320080:	8c49cc04 	addi	r17,r17,10032
    MOVI    r18, LOOP_PERIOD /* r18 is length of array */
  320084:	04808004 	movi	r18,512
    MOVHI   r19, %hi(VRAM_BASE) /* r19 is base of VRAM */
  320088:	04c00434 	movhi	r19,16
    ORI     r19, r19, %lo(VRAM_BASE)
  32008c:	9cc00434 	orhi	r19,r19,16
    MOVHI   r21, %hi(CLEAR_TOP) /* r21 is the top byte clearing mask */
  320090:	05403ff4 	movhi	r21,255
    ORI 	r21, r21, %lo(CLEAR_TOP)
  320094:	ad7fffd4 	ori	r21,r21,65535
    XOR     r22, r22, r22    /* r22 is VRAM block index */
  320098:	b5acf03a 	xor	r22,r22,r22
    MOVHI   r23, %hi(VRAM_BLOCKS)/* r23 is number of blocks in VRAM */
  32009c:	05c00034 	movhi	r23,0
    ORI 	r23, r23, %lo(VRAM_BLOCKS)
  3200a0:	bdc08014 	ori	r23,r23,512
    XOR     r20, r20, r20    /* r20 is test id */
  3200a4:	a528f03a 	xor	r20,r20,r20

    MOV 	r8, r19 		 /* compute end of VRAM */
  3200a8:	9811883a 	mov	r8,r19
    MOVHI   r9, %hi(VRAM_SPAN)
  3200ac:	02400434 	movhi	r9,16
    ORI     r9, r9, %lo(VRAM_SPAN)
  3200b0:	4a400434 	orhi	r9,r9,16
    ADD     r8, r8, r9
  3200b4:	4251883a 	add	r8,r8,r9

003200b8 <clear_mem>:

clear_mem: 		/* fill memory with known values */
	MOV 	r9, r19 			/* save current VRAM address */
  3200b8:	9813883a 	mov	r9,r19
	MOVHI   r19, %hi(VRAM_BASE) /* and go to base of VRAM */
  3200bc:	04c00434 	movhi	r19,16
    ORI     r19, r19, %lo(VRAM_BASE)
  3200c0:	9cc00434 	orhi	r19,r19,16

003200c4 <clear_loop>:

clear_loop:     /* do so in a loop */
	STWIO 	r21, (r19)          /* load known value */
  3200c4:	9d400035 	stwio	r21,0(r19)
	ADDI    r19, r19, WIDTH     /* and go to next word */
  3200c8:	9cc00104 	addi	r19,r19,4
	BLT     r19, r8, clear_loop /* repeat as long as we're within VRAM */
  3200cc:	9a3ffd16 	blt	r19,r8,3200c4 <clear_loop>

	MOV     r19, r9 			/* restore VRAM address */
  3200d0:	4827883a 	mov	r19,r9

003200d4 <fill_array>:

fill_array:     /* fill the array with LOOP_PERIOD random values */
    CALL    rand             /* generate random number */
  3200d4:	03203280 	call	320328 <rand>
    AND     r2, r2, r21      /* clear top bits */
  3200d8:	1544703a 	and	r2,r2,r21
    STWIO   r2, (r17)        /* and store in array */
  3200dc:	88800035 	stwio	r2,0(r17)
    ADDI    r17, r17, WIDTH  /* go to next position in memory */
  3200e0:	8c400104 	addi	r17,r17,4
    ADDI    r16, r16, 1      /* and go to next element */
  3200e4:	84000044 	addi	r16,r16,1
    BLT     r16, r18, fill_array /* if we haven't reached end of array, repeat */
  3200e8:	84bffa16 	blt	r16,r18,3200d4 <fill_array>
    XOR     r16, r16, r16    /* else clear counter */
  3200ec:	8420f03a 	xor	r16,r16,r16
  3200f0:	04400cb4 	movhi	r17,50
    MOVIA   r17, values      /* and reset array base address */
  3200f4:	8c49cc04 	addi	r17,r17,10032

003200f8 <write_values>:

write_values:   /* write values from array to VRAM */
    LDWIO   r12, (r17)       /* fetch word from array */
  3200f8:	8b000037 	ldwio	r12,0(r17)
    STWIO   r12, (r19)       /* and write it to VRAM */
  3200fc:	9b000035 	stwio	r12,0(r19)
    ADDI    r17, r17, WIDTH  /* go to next position in array */
  320100:	8c400104 	addi	r17,r17,4
    ADDI    r19, r19, WIDTH  /* and in VRAM */
  320104:	9cc00104 	addi	r19,r19,4
    ADDI    r16, r16, 1      /* then go to next element */
  320108:	84000044 	addi	r16,r16,1
    BLT     r16, r18, write_values /* if we haven't reached end of array, repeat */
  32010c:	84bffa16 	blt	r16,r18,3200f8 <write_values>
    XOR     r16, r16, r16    /* else clear counter */
  320110:	8420f03a 	xor	r16,r16,r16
  320114:	04400cb4 	movhi	r17,50
    MOVIA   r17, values      /* and reset array base address */
  320118:	8c49cc04 	addi	r17,r17,10032
    SUBI    r19, r19, VRAM_PERIOD  /* and base of VRAM */
  32011c:	9cfe0004 	addi	r19,r19,-2048
    MOVHI   r8, %hi(VRAM_BASE) /* and go to base of VRAM in r8 */
  320120:	02000434 	movhi	r8,16
    ORI     r8, r8, %lo(VRAM_BASE) /* to check blanks */
  320124:	42000434 	orhi	r8,r8,16

00320128 <read_values>:
/*	BNE     r9, r21, error 	  /* report error if not blank */
/*	ADDI 	r8, r8, WIDTH 	  /* otherwise go to next word */
/*	JMPI    read_blank 	      /* and check again */

read_values:
    LDWIO   r12, (r17)        /* fetch word from array */
  320128:	8b000037 	ldwio	r12,0(r17)
    LDWIO   r13, (r19)        /* fetch word from VRAM */
  32012c:	9b400037 	ldwio	r13,0(r19)
    AND 	r13, r13, r21     /* clear top bits */
  320130:	6d5a703a 	and	r13,r13,r21
    AND 	r12, r12, r21
  320134:	6558703a 	and	r12,r12,r21
    BNE     r12, r13, error   /* if the values don't match, we have an error */
  320138:	63404b1e 	bne	r12,r13,320268 <error>
    ADDI    r17, r17, WIDTH   /* go to next position in array */
  32013c:	8c400104 	addi	r17,r17,4
    ADDI    r19, r19, WIDTH   /* and in VRAM */
  320140:	9cc00104 	addi	r19,r19,4
    ADDI    r16, r16, 1       /* then go to next element */
  320144:	84000044 	addi	r16,r16,1
    BLT     r16, r18, read_values /* if we haven't reached end of array, repeat */
  320148:	84bff716 	blt	r16,r18,320128 <read_values>
    XOR     r16, r16, r16     /* else clear counter */
  32014c:	8420f03a 	xor	r16,r16,r16
    MOV 	r8, r19 		  /* load position in VRAM to r8 for blank checking */
  320150:	9811883a 	mov	r8,r19
    MOVHI   r9, %hi(VRAM_BASE) /* compute end of VRAM */
  320154:	02400434 	movhi	r9,16
    ORI     r9, r9, %lo(VRAM_BASE)
  320158:	4a400434 	orhi	r9,r9,16
    MOVHI   r10, %hi(VRAM_SPAN)
  32015c:	02800434 	movhi	r10,16
    ORI     r10, r10, %lo(VRAM_SPAN)
  320160:	52800434 	orhi	r10,r10,16
    ADD     r10, r10, r9
  320164:	5255883a 	add	r10,r10,r9

00320168 <next_block>:
/*no_err:
	ADDI 	r8, r8, WIDTH 	  /* otherwise go to next word */
/*	JMPI    read_blanks_after /* and check again */

next_block: 			  /* get ready for next block */
    ADDI    r22, r22, 1   /* go to next block in VRAM (index)*/
  320168:	b5800044 	addi	r22,r22,1
    BLT     r22, r23, clear_mem /* and if we haven't reach end, repeat */
  32016c:	b5ffd216 	blt	r22,r23,3200b8 <clear_mem>
    ADDI    r20, r20, 1   /* increase id to indicate next test */
  320170:	a5000044 	addi	r20,r20,1

00320174 <fast_write>:

fast_write:     /* back-to-back write values to VRAM */
    MOVHI   r19, %hi(VRAM_BASE)  /* should execute at base of VRAM */
  320174:	04c00434 	movhi	r19,16
    ORI     r19, r19, %lo(VRAM_BASE)
  320178:	9cc00434 	orhi	r19,r19,16
    MOVHI   r8, %hi(VAL1)        /* load values to test into registers */
  32017c:	020032b4 	movhi	r8,202
    ORI 	r8, r8, %lo(VAL1)
  320180:	423fbfd4 	ori	r8,r8,65279
    MOVHI   r9, %hi(VAL2)
  320184:	02403ef4 	movhi	r9,251
    ORI 	r9, r9, %lo(VAL2)
  320188:	4a6afbd4 	ori	r9,r9,44015
    MOVHI   r10, %hi(VAL3)
  32018c:	02803ff4 	movhi	r10,255
    ORI 	r10, r10, %lo(VAL3)
  320190:	52b7ab54 	ori	r10,r10,57005
    MOVHI   r11, %hi(VAL4)
  320194:	02c02fb4 	movhi	r11,190
    ORI 	r11, r11, %lo(VAL4)
  320198:	5afffbd4 	ori	r11,r11,65519

    STWIO   r8, 0(r19)      /* save values to memory */
  32019c:	9a000035 	stwio	r8,0(r19)
    STWIO   r9, 4(r19)
  3201a0:	9a400135 	stwio	r9,4(r19)
    STWIO   r10, 8(r19)
  3201a4:	9a800235 	stwio	r10,8(r19)
    STWIO   r11, 12(r19)
  3201a8:	9ac00335 	stwio	r11,12(r19)

003201ac <fast_read>:

fast_read:      /* and read them back, quickly */
    LDWIO   r13, 0(r19)     /* read values from memory */
  3201ac:	9b400037 	ldwio	r13,0(r19)
    LDWIO   r14, 4(r19)
  3201b0:	9b800137 	ldwio	r14,4(r19)
    LDWIO   r15, 8(r19)
  3201b4:	9bc00237 	ldwio	r15,8(r19)
    LDWIO   r16, 12(r19)
  3201b8:	9c000337 	ldwio	r16,12(r19)

    AND     r8, r8, r21 	/* clear top 2 bytes since our */
  3201bc:	4550703a 	and	r8,r8,r21
    AND     r9, r9, r21     /* memory is actually 24 bits */
  3201c0:	4d52703a 	and	r9,r9,r21
    AND     r10, r10, r21
  3201c4:	5554703a 	and	r10,r10,r21
    AND     r11, r11, r21
  3201c8:	5d56703a 	and	r11,r11,r21
    AND     r13, r13, r21
  3201cc:	6d5a703a 	and	r13,r13,r21
    AND     r14, r14, r21
  3201d0:	755c703a 	and	r14,r14,r21
    AND     r15, r15, r21
  3201d4:	7d5e703a 	and	r15,r15,r21
    AND     r16, r16, r21
  3201d8:	8560703a 	and	r16,r16,r21

    BNE     r13, r8, error  /* compare them to the stored values */
  3201dc:	6a00221e 	bne	r13,r8,320268 <error>
    BNE     r14, r9, error
  3201e0:	7240211e 	bne	r14,r9,320268 <error>
    BNE     r15, r10, error
  3201e4:	7a80201e 	bne	r15,r10,320268 <error>
    BNE     r16, r11, error
  3201e8:	82c01f1e 	bne	r16,r11,320268 <error>

    XOR     r16, r16, r16   /* clear r16 for next test (index) */
  3201ec:	8420f03a 	xor	r16,r16,r16
    ADDI    r20, r20, 1     /* increase id to indicate next test */
  3201f0:	a5000044 	addi	r20,r20,1
  3201f4:	04400cb4 	movhi	r17,50
    MOVIA   r17, values     /* load array base address */
  3201f8:	8c49cc04 	addi	r17,r17,10032
    MOVHI   r19, %hi(VRAM_BASE) /* restore base of VRAM */
  3201fc:	04c00434 	movhi	r19,16
    ORI     r19, r19, %lo(VRAM_BASE)
  320200:	9cc00434 	orhi	r19,r19,16
    MOVI    r18, LOOP_PERIOD/* load length of array */
  320204:	04808004 	movi	r18,512

00320208 <write_values_wait>:

write_values_wait:    /* write values from array to VRAM again and wait */
    LDWIO   r22, (r17)/* fetch word from array */
  320208:	8d800037 	ldwio	r22,0(r17)
    STWIO   r22, (r19)/* and write it to VRAM */
  32020c:	9d800035 	stwio	r22,0(r19)
    ADDI    r17, r17, WIDTH /* go to next position in array */
  320210:	8c400104 	addi	r17,r17,4
    ADDI    r19, r19, WIDTH /* and in VRAM */
  320214:	9cc00104 	addi	r19,r19,4
    ADDI    r16, r16, 1     /* then go to next element */
  320218:	84000044 	addi	r16,r16,1
    BLT     r16, r18, write_values_wait /* if we haven't reached end of array, repeat */
  32021c:	84bffa16 	blt	r16,r18,320208 <write_values_wait>

    XOR     r16, r16, r16      /* else clear counter */
  320220:	8420f03a 	xor	r16,r16,r16
  320224:	04400cb4 	movhi	r17,50
    MOVIA   r17, values        /* load array base address */
  320228:	8c49cc04 	addi	r17,r17,10032
    SUBI    r19, r19, VRAM_PERIOD  /* and base of VRAM */
  32022c:	9cfe0004 	addi	r19,r19,-2048
    MOVHI   r4, %hi(WAIT_TIME) /* and wait for a while */
  320230:	0100e4f4 	movhi	r4,915
    ORI     r4, r4, %lo(WAIT_TIME)
  320234:	2121c014 	ori	r4,r4,34560
    CALL    usleep             /* using usleep */
  320238:	03212c40 	call	3212c4 <usleep>

0032023c <read_values_wait>:

read_values_wait:     /* read them back and compare */
    LDWIO   r11, (r17)      /* fetch word from array */
  32023c:	8ac00037 	ldwio	r11,0(r17)
    LDWIO   r13, (r19)      /* fetch word from VRAM */
  320240:	9b400037 	ldwio	r13,0(r19)
    AND 	r13, r13, r21   /* clear top bits */
  320244:	6d5a703a 	and	r13,r13,r21
    AND 	r11, r11, r21   /* clear top bits */
  320248:	5d56703a 	and	r11,r11,r21
    BNE     r11, r13, error /* if the values don't match, we have an error */
  32024c:	5b40061e 	bne	r11,r13,320268 <error>
    ADDI    r17, r17, WIDTH /* go to next position in array */
  320250:	8c400104 	addi	r17,r17,4
    ADDI    r19, r19, WIDTH /* and in VRAM */
  320254:	9cc00104 	addi	r19,r19,4
    ADDI    r16, r16, 1     /* then go to next element */
  320258:	84000044 	addi	r16,r16,1
    BLT     r16, r18, read_values_wait /* if we haven't reached end of array, repeat */
  32025c:	84bff716 	blt	r16,r18,32023c <read_values_wait>

00320260 <tests_good>:

tests_good:     /* get here if no error */
	NOP
  320260:	0001883a 	nop
 	JMPI    tests_good
  320264:	03202601 	jmpi	320260 <tests_good>

00320268 <error>:

error:          /* get here in case of error */
	NOP
  320268:	0001883a 	nop
    JMPI    error
  32026c:	03202681 	jmpi	320268 <error>

00320270 <srand>:
  320270:	defffc04 	addi	sp,sp,-16
  320274:	dc400115 	stw	r17,4(sp)
  320278:	04400cb4 	movhi	r17,50
  32027c:	8c4d7c04 	addi	r17,r17,13808
  320280:	dc000015 	stw	r16,0(sp)
  320284:	8c000017 	ldw	r16,0(r17)
  320288:	dc800215 	stw	r18,8(sp)
  32028c:	dfc00315 	stw	ra,12(sp)
  320290:	80800817 	ldw	r2,32(r16)
  320294:	2025883a 	mov	r18,r4
  320298:	10000826 	beq	r2,zero,3202bc <srand+0x4c>
  32029c:	14800415 	stw	r18,16(r2)
  3202a0:	10000515 	stw	zero,20(r2)
  3202a4:	dfc00317 	ldw	ra,12(sp)
  3202a8:	dc800217 	ldw	r18,8(sp)
  3202ac:	dc400117 	ldw	r17,4(sp)
  3202b0:	dc000017 	ldw	r16,0(sp)
  3202b4:	dec00404 	addi	sp,sp,16
  3202b8:	f800283a 	ret
  3202bc:	01000604 	movi	r4,24
  3202c0:	03203f40 	call	3203f4 <malloc>
  3202c4:	88c00017 	ldw	r3,0(r17)
  3202c8:	80800815 	stw	r2,32(r16)
  3202cc:	18800817 	ldw	r2,32(r3)
  3202d0:	00ccc384 	movi	r3,13070
  3202d4:	10c0000d 	sth	r3,0(r2)
  3202d8:	00eaf344 	movi	r3,-21555
  3202dc:	10c0008d 	sth	r3,2(r2)
  3202e0:	00c48d04 	movi	r3,4660
  3202e4:	10c0010d 	sth	r3,4(r2)
  3202e8:	00f99b44 	movi	r3,-6547
  3202ec:	10c0018d 	sth	r3,6(r2)
  3202f0:	00f7bb04 	movi	r3,-8468
  3202f4:	10c0020d 	sth	r3,8(r2)
  3202f8:	00c00144 	movi	r3,5
  3202fc:	10c0028d 	sth	r3,10(r2)
  320300:	00c002c4 	movi	r3,11
  320304:	10c0030d 	sth	r3,12(r2)
  320308:	14800415 	stw	r18,16(r2)
  32030c:	10000515 	stw	zero,20(r2)
  320310:	dfc00317 	ldw	ra,12(sp)
  320314:	dc800217 	ldw	r18,8(sp)
  320318:	dc400117 	ldw	r17,4(sp)
  32031c:	dc000017 	ldw	r16,0(sp)
  320320:	dec00404 	addi	sp,sp,16
  320324:	f800283a 	ret

00320328 <rand>:
  320328:	defffc04 	addi	sp,sp,-16
  32032c:	dc800215 	stw	r18,8(sp)
  320330:	04800cb4 	movhi	r18,50
  320334:	948d7c04 	addi	r18,r18,13808
  320338:	dc400115 	stw	r17,4(sp)
  32033c:	94400017 	ldw	r17,0(r18)
  320340:	dc000015 	stw	r16,0(sp)
  320344:	dfc00315 	stw	ra,12(sp)
  320348:	8c000817 	ldw	r16,32(r17)
  32034c:	80001526 	beq	r16,zero,3203a4 <rand+0x7c>
  320350:	81000417 	ldw	r4,16(r16)
  320354:	81400517 	ldw	r5,20(r16)
  320358:	01932574 	movhi	r6,19605
  32035c:	319fcb44 	addi	r6,r6,32557
  320360:	01d614b4 	movhi	r7,22610
  320364:	39fd0b44 	addi	r7,r7,-3027
  320368:	03210100 	call	321010 <__muldi3>
  32036c:	11000044 	addi	r4,r2,1
  320370:	2085803a 	cmpltu	r2,r4,r2
  320374:	10c7883a 	add	r3,r2,r3
  320378:	00a00034 	movhi	r2,32768
  32037c:	10bfffc4 	addi	r2,r2,-1
  320380:	1884703a 	and	r2,r3,r2
  320384:	81000415 	stw	r4,16(r16)
  320388:	80c00515 	stw	r3,20(r16)
  32038c:	dfc00317 	ldw	ra,12(sp)
  320390:	dc800217 	ldw	r18,8(sp)
  320394:	dc400117 	ldw	r17,4(sp)
  320398:	dc000017 	ldw	r16,0(sp)
  32039c:	dec00404 	addi	sp,sp,16
  3203a0:	f800283a 	ret
  3203a4:	01000604 	movi	r4,24
  3203a8:	03203f40 	call	3203f4 <malloc>
  3203ac:	90c00017 	ldw	r3,0(r18)
  3203b0:	88800815 	stw	r2,32(r17)
  3203b4:	008cc384 	movi	r2,13070
  3203b8:	1c000817 	ldw	r16,32(r3)
  3203bc:	8080000d 	sth	r2,0(r16)
  3203c0:	00aaf344 	movi	r2,-21555
  3203c4:	8080008d 	sth	r2,2(r16)
  3203c8:	00848d04 	movi	r2,4660
  3203cc:	8080010d 	sth	r2,4(r16)
  3203d0:	00b99b44 	movi	r2,-6547
  3203d4:	8080018d 	sth	r2,6(r16)
  3203d8:	00b7bb04 	movi	r2,-8468
  3203dc:	8080020d 	sth	r2,8(r16)
  3203e0:	00800144 	movi	r2,5
  3203e4:	8080028d 	sth	r2,10(r16)
  3203e8:	008002c4 	movi	r2,11
  3203ec:	8080030d 	sth	r2,12(r16)
  3203f0:	003fd706 	br	320350 <rand+0x28>

003203f4 <malloc>:
  3203f4:	00800cb4 	movhi	r2,50
  3203f8:	108d7c04 	addi	r2,r2,13808
  3203fc:	200b883a 	mov	r5,r4
  320400:	11000017 	ldw	r4,0(r2)
  320404:	032041c1 	jmpi	32041c <_malloc_r>

00320408 <free>:
  320408:	00800cb4 	movhi	r2,50
  32040c:	108d7c04 	addi	r2,r2,13808
  320410:	200b883a 	mov	r5,r4
  320414:	11000017 	ldw	r4,0(r2)
  320418:	0320d401 	jmpi	320d40 <_free_r>

0032041c <_malloc_r>:
  32041c:	defff604 	addi	sp,sp,-40
  320420:	dc800215 	stw	r18,8(sp)
  320424:	dfc00915 	stw	ra,36(sp)
  320428:	df000815 	stw	fp,32(sp)
  32042c:	ddc00715 	stw	r23,28(sp)
  320430:	dd800615 	stw	r22,24(sp)
  320434:	dd400515 	stw	r21,20(sp)
  320438:	dd000415 	stw	r20,16(sp)
  32043c:	dcc00315 	stw	r19,12(sp)
  320440:	dc400115 	stw	r17,4(sp)
  320444:	dc000015 	stw	r16,0(sp)
  320448:	288002c4 	addi	r2,r5,11
  32044c:	00c00584 	movi	r3,22
  320450:	2025883a 	mov	r18,r4
  320454:	18802b2e 	bgeu	r3,r2,320504 <_malloc_r+0xe8>
  320458:	047ffe04 	movi	r17,-8
  32045c:	1462703a 	and	r17,r2,r17
  320460:	88002a16 	blt	r17,zero,32050c <_malloc_r+0xf0>
  320464:	89402936 	bltu	r17,r5,32050c <_malloc_r+0xf0>
  320468:	9009883a 	mov	r4,r18
  32046c:	03211d40 	call	3211d4 <__malloc_lock>
  320470:	00807dc4 	movi	r2,503
  320474:	14402936 	bltu	r2,r17,32051c <_malloc_r+0x100>
  320478:	8808d0fa 	srli	r4,r17,3
  32047c:	04c00cb4 	movhi	r19,50
  320480:	9ccc0404 	addi	r19,r19,12304
  320484:	2105883a 	add	r2,r4,r4
  320488:	1085883a 	add	r2,r2,r2
  32048c:	1085883a 	add	r2,r2,r2
  320490:	9885883a 	add	r2,r19,r2
  320494:	14000317 	ldw	r16,12(r2)
  320498:	80815526 	beq	r16,r2,3209f0 <_malloc_r+0x5d4>
  32049c:	81000117 	ldw	r4,4(r16)
  3204a0:	00bfff04 	movi	r2,-4
  3204a4:	80c00317 	ldw	r3,12(r16)
  3204a8:	2084703a 	and	r2,r4,r2
  3204ac:	8085883a 	add	r2,r16,r2
  3204b0:	11800117 	ldw	r6,4(r2)
  3204b4:	81400217 	ldw	r5,8(r16)
  3204b8:	9009883a 	mov	r4,r18
  3204bc:	31800054 	ori	r6,r6,1
  3204c0:	11800115 	stw	r6,4(r2)
  3204c4:	28c00315 	stw	r3,12(r5)
  3204c8:	19400215 	stw	r5,8(r3)
  3204cc:	03211f40 	call	3211f4 <__malloc_unlock>
  3204d0:	80800204 	addi	r2,r16,8
  3204d4:	dfc00917 	ldw	ra,36(sp)
  3204d8:	df000817 	ldw	fp,32(sp)
  3204dc:	ddc00717 	ldw	r23,28(sp)
  3204e0:	dd800617 	ldw	r22,24(sp)
  3204e4:	dd400517 	ldw	r21,20(sp)
  3204e8:	dd000417 	ldw	r20,16(sp)
  3204ec:	dcc00317 	ldw	r19,12(sp)
  3204f0:	dc800217 	ldw	r18,8(sp)
  3204f4:	dc400117 	ldw	r17,4(sp)
  3204f8:	dc000017 	ldw	r16,0(sp)
  3204fc:	dec00a04 	addi	sp,sp,40
  320500:	f800283a 	ret
  320504:	04400404 	movi	r17,16
  320508:	897fd72e 	bgeu	r17,r5,320468 <_malloc_r+0x4c>
  32050c:	00800304 	movi	r2,12
  320510:	90800015 	stw	r2,0(r18)
  320514:	0005883a 	mov	r2,zero
  320518:	003fee06 	br	3204d4 <_malloc_r+0xb8>
  32051c:	8808d27a 	srli	r4,r17,9
  320520:	20007126 	beq	r4,zero,3206e8 <_malloc_r+0x2cc>
  320524:	00800104 	movi	r2,4
  320528:	1100eb36 	bltu	r2,r4,3208d8 <_malloc_r+0x4bc>
  32052c:	8808d1ba 	srli	r4,r17,6
  320530:	21000e04 	addi	r4,r4,56
  320534:	210b883a 	add	r5,r4,r4
  320538:	294b883a 	add	r5,r5,r5
  32053c:	294b883a 	add	r5,r5,r5
  320540:	04c00cb4 	movhi	r19,50
  320544:	9ccc0404 	addi	r19,r19,12304
  320548:	994b883a 	add	r5,r19,r5
  32054c:	2c000317 	ldw	r16,12(r5)
  320550:	2c000e26 	beq	r5,r16,32058c <_malloc_r+0x170>
  320554:	80c00117 	ldw	r3,4(r16)
  320558:	01ffff04 	movi	r7,-4
  32055c:	018003c4 	movi	r6,15
  320560:	19c6703a 	and	r3,r3,r7
  320564:	1c45c83a 	sub	r2,r3,r17
  320568:	30800716 	blt	r6,r2,320588 <_malloc_r+0x16c>
  32056c:	1000610e 	bge	r2,zero,3206f4 <_malloc_r+0x2d8>
  320570:	84000317 	ldw	r16,12(r16)
  320574:	2c000526 	beq	r5,r16,32058c <_malloc_r+0x170>
  320578:	80c00117 	ldw	r3,4(r16)
  32057c:	19c6703a 	and	r3,r3,r7
  320580:	1c45c83a 	sub	r2,r3,r17
  320584:	30bff90e 	bge	r6,r2,32056c <_malloc_r+0x150>
  320588:	213fffc4 	addi	r4,r4,-1
  32058c:	21000044 	addi	r4,r4,1
  320590:	9c000417 	ldw	r16,16(r19)
  320594:	00c00cb4 	movhi	r3,50
  320598:	18cc0404 	addi	r3,r3,12304
  32059c:	1a400204 	addi	r9,r3,8
  3205a0:	8240ff26 	beq	r16,r9,3209a0 <_malloc_r+0x584>
  3205a4:	81400117 	ldw	r5,4(r16)
  3205a8:	00bfff04 	movi	r2,-4
  3205ac:	018003c4 	movi	r6,15
  3205b0:	2884703a 	and	r2,r5,r2
  3205b4:	144bc83a 	sub	r5,r2,r17
  3205b8:	3140ea16 	blt	r6,r5,320964 <_malloc_r+0x548>
  3205bc:	1a400515 	stw	r9,20(r3)
  3205c0:	1a400415 	stw	r9,16(r3)
  3205c4:	2800570e 	bge	r5,zero,320724 <_malloc_r+0x308>
  3205c8:	01407fc4 	movi	r5,511
  3205cc:	2880ca36 	bltu	r5,r2,3208f8 <_malloc_r+0x4dc>
  3205d0:	1004d0fa 	srli	r2,r2,3
  3205d4:	02000044 	movi	r8,1
  3205d8:	19c00117 	ldw	r7,4(r3)
  3205dc:	108b883a 	add	r5,r2,r2
  3205e0:	294b883a 	add	r5,r5,r5
  3205e4:	1005d0ba 	srai	r2,r2,2
  3205e8:	294b883a 	add	r5,r5,r5
  3205ec:	28cb883a 	add	r5,r5,r3
  3205f0:	29800217 	ldw	r6,8(r5)
  3205f4:	4084983a 	sll	r2,r8,r2
  3205f8:	81400315 	stw	r5,12(r16)
  3205fc:	81800215 	stw	r6,8(r16)
  320600:	11c4b03a 	or	r2,r2,r7
  320604:	18800115 	stw	r2,4(r3)
  320608:	2c000215 	stw	r16,8(r5)
  32060c:	34000315 	stw	r16,12(r6)
  320610:	200bd0ba 	srai	r5,r4,2
  320614:	00c00044 	movi	r3,1
  320618:	194a983a 	sll	r5,r3,r5
  32061c:	11404936 	bltu	r2,r5,320744 <_malloc_r+0x328>
  320620:	1146703a 	and	r3,r2,r5
  320624:	18000a1e 	bne	r3,zero,320650 <_malloc_r+0x234>
  320628:	00ffff04 	movi	r3,-4
  32062c:	294b883a 	add	r5,r5,r5
  320630:	20c8703a 	and	r4,r4,r3
  320634:	1146703a 	and	r3,r2,r5
  320638:	21000104 	addi	r4,r4,4
  32063c:	1800041e 	bne	r3,zero,320650 <_malloc_r+0x234>
  320640:	294b883a 	add	r5,r5,r5
  320644:	1146703a 	and	r3,r2,r5
  320648:	21000104 	addi	r4,r4,4
  32064c:	183ffc26 	beq	r3,zero,320640 <_malloc_r+0x224>
  320650:	023fff04 	movi	r8,-4
  320654:	01c003c4 	movi	r7,15
  320658:	2105883a 	add	r2,r4,r4
  32065c:	1085883a 	add	r2,r2,r2
  320660:	1085883a 	add	r2,r2,r2
  320664:	9899883a 	add	r12,r19,r2
  320668:	62800304 	addi	r10,r12,12
  32066c:	2017883a 	mov	r11,r4
  320670:	54000017 	ldw	r16,0(r10)
  320674:	51bffd04 	addi	r6,r10,-12
  320678:	8180041e 	bne	r16,r6,32068c <_malloc_r+0x270>
  32067c:	0000ca06 	br	3209a8 <_malloc_r+0x58c>
  320680:	10001c0e 	bge	r2,zero,3206f4 <_malloc_r+0x2d8>
  320684:	84000317 	ldw	r16,12(r16)
  320688:	8180c726 	beq	r16,r6,3209a8 <_malloc_r+0x58c>
  32068c:	80c00117 	ldw	r3,4(r16)
  320690:	1a06703a 	and	r3,r3,r8
  320694:	1c45c83a 	sub	r2,r3,r17
  320698:	38bff90e 	bge	r7,r2,320680 <_malloc_r+0x264>
  32069c:	81000317 	ldw	r4,12(r16)
  3206a0:	81400217 	ldw	r5,8(r16)
  3206a4:	8447883a 	add	r3,r16,r17
  3206a8:	8c400054 	ori	r17,r17,1
  3206ac:	29000315 	stw	r4,12(r5)
  3206b0:	21400215 	stw	r5,8(r4)
  3206b4:	84400115 	stw	r17,4(r16)
  3206b8:	1889883a 	add	r4,r3,r2
  3206bc:	11400054 	ori	r5,r2,1
  3206c0:	98c00515 	stw	r3,20(r19)
  3206c4:	98c00415 	stw	r3,16(r19)
  3206c8:	20800015 	stw	r2,0(r4)
  3206cc:	1a400315 	stw	r9,12(r3)
  3206d0:	1a400215 	stw	r9,8(r3)
  3206d4:	19400115 	stw	r5,4(r3)
  3206d8:	9009883a 	mov	r4,r18
  3206dc:	03211f40 	call	3211f4 <__malloc_unlock>
  3206e0:	80800204 	addi	r2,r16,8
  3206e4:	003f7b06 	br	3204d4 <_malloc_r+0xb8>
  3206e8:	8808d0fa 	srli	r4,r17,3
  3206ec:	210b883a 	add	r5,r4,r4
  3206f0:	003f9106 	br	320538 <_malloc_r+0x11c>
  3206f4:	80c7883a 	add	r3,r16,r3
  3206f8:	19400117 	ldw	r5,4(r3)
  3206fc:	80800317 	ldw	r2,12(r16)
  320700:	81000217 	ldw	r4,8(r16)
  320704:	29400054 	ori	r5,r5,1
  320708:	19400115 	stw	r5,4(r3)
  32070c:	20800315 	stw	r2,12(r4)
  320710:	11000215 	stw	r4,8(r2)
  320714:	9009883a 	mov	r4,r18
  320718:	03211f40 	call	3211f4 <__malloc_unlock>
  32071c:	80800204 	addi	r2,r16,8
  320720:	003f6c06 	br	3204d4 <_malloc_r+0xb8>
  320724:	8085883a 	add	r2,r16,r2
  320728:	10c00117 	ldw	r3,4(r2)
  32072c:	9009883a 	mov	r4,r18
  320730:	18c00054 	ori	r3,r3,1
  320734:	10c00115 	stw	r3,4(r2)
  320738:	03211f40 	call	3211f4 <__malloc_unlock>
  32073c:	80800204 	addi	r2,r16,8
  320740:	003f6406 	br	3204d4 <_malloc_r+0xb8>
  320744:	9c000217 	ldw	r16,8(r19)
  320748:	00bfff04 	movi	r2,-4
  32074c:	85400117 	ldw	r21,4(r16)
  320750:	a8aa703a 	and	r21,r21,r2
  320754:	ac400336 	bltu	r21,r17,320764 <_malloc_r+0x348>
  320758:	ac45c83a 	sub	r2,r21,r17
  32075c:	00c003c4 	movi	r3,15
  320760:	18805316 	blt	r3,r2,3208b0 <_malloc_r+0x494>
  320764:	d5e3c717 	ldw	r23,-28900(gp)
  320768:	d0e00217 	ldw	r3,-32760(gp)
  32076c:	00bfffc4 	movi	r2,-1
  320770:	8579883a 	add	fp,r16,r21
  320774:	8def883a 	add	r23,r17,r23
  320778:	1880d226 	beq	r3,r2,320ac4 <_malloc_r+0x6a8>
  32077c:	bdc023c4 	addi	r23,r23,143
  320780:	00bfe004 	movi	r2,-128
  320784:	b8ae703a 	and	r23,r23,r2
  320788:	9009883a 	mov	r4,r18
  32078c:	b80b883a 	mov	r5,r23
  320790:	0320ba00 	call	320ba0 <_sbrk_r>
  320794:	1029883a 	mov	r20,r2
  320798:	00bfffc4 	movi	r2,-1
  32079c:	a080d126 	beq	r20,r2,320ae4 <_malloc_r+0x6c8>
  3207a0:	a7009f36 	bltu	r20,fp,320a20 <_malloc_r+0x604>
  3207a4:	05800cb4 	movhi	r22,50
  3207a8:	b5914704 	addi	r22,r22,17692
  3207ac:	b0800017 	ldw	r2,0(r22)
  3207b0:	b885883a 	add	r2,r23,r2
  3207b4:	b0800015 	stw	r2,0(r22)
  3207b8:	e500cf26 	beq	fp,r20,320af8 <_malloc_r+0x6dc>
  3207bc:	d1200217 	ldw	r4,-32760(gp)
  3207c0:	00ffffc4 	movi	r3,-1
  3207c4:	20c0e026 	beq	r4,r3,320b48 <_malloc_r+0x72c>
  3207c8:	a739c83a 	sub	fp,r20,fp
  3207cc:	1705883a 	add	r2,r2,fp
  3207d0:	b0800015 	stw	r2,0(r22)
  3207d4:	a08001cc 	andi	r2,r20,7
  3207d8:	1000a526 	beq	r2,zero,320a70 <_malloc_r+0x654>
  3207dc:	a0a9c83a 	sub	r20,r20,r2
  3207e0:	00c02204 	movi	r3,136
  3207e4:	a5000204 	addi	r20,r20,8
  3207e8:	1885c83a 	sub	r2,r3,r2
  3207ec:	a5c7883a 	add	r3,r20,r23
  3207f0:	18c01fcc 	andi	r3,r3,127
  3207f4:	10efc83a 	sub	r23,r2,r3
  3207f8:	9009883a 	mov	r4,r18
  3207fc:	b80b883a 	mov	r5,r23
  320800:	0320ba00 	call	320ba0 <_sbrk_r>
  320804:	00ffffc4 	movi	r3,-1
  320808:	10c0cc26 	beq	r2,r3,320b3c <_malloc_r+0x720>
  32080c:	1505c83a 	sub	r2,r2,r20
  320810:	b887883a 	add	r3,r23,r2
  320814:	18c00054 	ori	r3,r3,1
  320818:	b0800017 	ldw	r2,0(r22)
  32081c:	9d000215 	stw	r20,8(r19)
  320820:	a0c00115 	stw	r3,4(r20)
  320824:	b885883a 	add	r2,r23,r2
  320828:	b0800015 	stw	r2,0(r22)
  32082c:	84c00e26 	beq	r16,r19,320868 <_malloc_r+0x44c>
  320830:	00c003c4 	movi	r3,15
  320834:	1d40902e 	bgeu	r3,r21,320a78 <_malloc_r+0x65c>
  320838:	ad7ffd04 	addi	r21,r21,-12
  32083c:	013ffe04 	movi	r4,-8
  320840:	a908703a 	and	r4,r21,r4
  320844:	810b883a 	add	r5,r16,r4
  320848:	01800144 	movi	r6,5
  32084c:	29800115 	stw	r6,4(r5)
  320850:	29800215 	stw	r6,8(r5)
  320854:	81400117 	ldw	r5,4(r16)
  320858:	2940004c 	andi	r5,r5,1
  32085c:	214ab03a 	or	r5,r4,r5
  320860:	81400115 	stw	r5,4(r16)
  320864:	1900ae36 	bltu	r3,r4,320b20 <_malloc_r+0x704>
  320868:	d0e3c617 	ldw	r3,-28904(gp)
  32086c:	1880012e 	bgeu	r3,r2,320874 <_malloc_r+0x458>
  320870:	d0a3c615 	stw	r2,-28904(gp)
  320874:	d0e3c517 	ldw	r3,-28908(gp)
  320878:	9c000217 	ldw	r16,8(r19)
  32087c:	1880012e 	bgeu	r3,r2,320884 <_malloc_r+0x468>
  320880:	d0a3c515 	stw	r2,-28908(gp)
  320884:	80c00117 	ldw	r3,4(r16)
  320888:	00bfff04 	movi	r2,-4
  32088c:	1886703a 	and	r3,r3,r2
  320890:	1c45c83a 	sub	r2,r3,r17
  320894:	1c400236 	bltu	r3,r17,3208a0 <_malloc_r+0x484>
  320898:	00c003c4 	movi	r3,15
  32089c:	18800416 	blt	r3,r2,3208b0 <_malloc_r+0x494>
  3208a0:	9009883a 	mov	r4,r18
  3208a4:	03211f40 	call	3211f4 <__malloc_unlock>
  3208a8:	0005883a 	mov	r2,zero
  3208ac:	003f0906 	br	3204d4 <_malloc_r+0xb8>
  3208b0:	88c00054 	ori	r3,r17,1
  3208b4:	10800054 	ori	r2,r2,1
  3208b8:	80c00115 	stw	r3,4(r16)
  3208bc:	8463883a 	add	r17,r16,r17
  3208c0:	88800115 	stw	r2,4(r17)
  3208c4:	9009883a 	mov	r4,r18
  3208c8:	9c400215 	stw	r17,8(r19)
  3208cc:	03211f40 	call	3211f4 <__malloc_unlock>
  3208d0:	80800204 	addi	r2,r16,8
  3208d4:	003eff06 	br	3204d4 <_malloc_r+0xb8>
  3208d8:	00800504 	movi	r2,20
  3208dc:	1100492e 	bgeu	r2,r4,320a04 <_malloc_r+0x5e8>
  3208e0:	00801504 	movi	r2,84
  3208e4:	11005c36 	bltu	r2,r4,320a58 <_malloc_r+0x63c>
  3208e8:	8808d33a 	srli	r4,r17,12
  3208ec:	21001b84 	addi	r4,r4,110
  3208f0:	210b883a 	add	r5,r4,r4
  3208f4:	003f1006 	br	320538 <_malloc_r+0x11c>
  3208f8:	1006d27a 	srli	r3,r2,9
  3208fc:	01400104 	movi	r5,4
  320900:	28c0432e 	bgeu	r5,r3,320a10 <_malloc_r+0x5f4>
  320904:	01400504 	movi	r5,20
  320908:	28c07036 	bltu	r5,r3,320acc <_malloc_r+0x6b0>
  32090c:	194016c4 	addi	r5,r3,91
  320910:	294d883a 	add	r6,r5,r5
  320914:	318d883a 	add	r6,r6,r6
  320918:	318d883a 	add	r6,r6,r6
  32091c:	998d883a 	add	r6,r19,r6
  320920:	30c00217 	ldw	r3,8(r6)
  320924:	01c00cb4 	movhi	r7,50
  320928:	39cc0404 	addi	r7,r7,12304
  32092c:	19805726 	beq	r3,r6,320a8c <_malloc_r+0x670>
  320930:	01ffff04 	movi	r7,-4
  320934:	19400117 	ldw	r5,4(r3)
  320938:	29ca703a 	and	r5,r5,r7
  32093c:	1140022e 	bgeu	r2,r5,320948 <_malloc_r+0x52c>
  320940:	18c00217 	ldw	r3,8(r3)
  320944:	30fffb1e 	bne	r6,r3,320934 <_malloc_r+0x518>
  320948:	19400317 	ldw	r5,12(r3)
  32094c:	98800117 	ldw	r2,4(r19)
  320950:	81400315 	stw	r5,12(r16)
  320954:	80c00215 	stw	r3,8(r16)
  320958:	2c000215 	stw	r16,8(r5)
  32095c:	1c000315 	stw	r16,12(r3)
  320960:	003f2b06 	br	320610 <_malloc_r+0x1f4>
  320964:	8445883a 	add	r2,r16,r17
  320968:	8c400054 	ori	r17,r17,1
  32096c:	18800515 	stw	r2,20(r3)
  320970:	18800415 	stw	r2,16(r3)
  320974:	29000054 	ori	r4,r5,1
  320978:	1147883a 	add	r3,r2,r5
  32097c:	84400115 	stw	r17,4(r16)
  320980:	11000115 	stw	r4,4(r2)
  320984:	12400315 	stw	r9,12(r2)
  320988:	12400215 	stw	r9,8(r2)
  32098c:	19400015 	stw	r5,0(r3)
  320990:	9009883a 	mov	r4,r18
  320994:	03211f40 	call	3211f4 <__malloc_unlock>
  320998:	80800204 	addi	r2,r16,8
  32099c:	003ecd06 	br	3204d4 <_malloc_r+0xb8>
  3209a0:	18800117 	ldw	r2,4(r3)
  3209a4:	003f1a06 	br	320610 <_malloc_r+0x1f4>
  3209a8:	5ac00044 	addi	r11,r11,1
  3209ac:	588000cc 	andi	r2,r11,3
  3209b0:	52800204 	addi	r10,r10,8
  3209b4:	103f2e1e 	bne	r2,zero,320670 <_malloc_r+0x254>
  3209b8:	20c000cc 	andi	r3,r4,3
  3209bc:	60bffe04 	addi	r2,r12,-8
  3209c0:	18006f26 	beq	r3,zero,320b80 <_malloc_r+0x764>
  3209c4:	63000017 	ldw	r12,0(r12)
  3209c8:	213fffc4 	addi	r4,r4,-1
  3209cc:	60bffa26 	beq	r12,r2,3209b8 <_malloc_r+0x59c>
  3209d0:	98800117 	ldw	r2,4(r19)
  3209d4:	294b883a 	add	r5,r5,r5
  3209d8:	117f5a36 	bltu	r2,r5,320744 <_malloc_r+0x328>
  3209dc:	283f5926 	beq	r5,zero,320744 <_malloc_r+0x328>
  3209e0:	1146703a 	and	r3,r2,r5
  3209e4:	18001626 	beq	r3,zero,320a40 <_malloc_r+0x624>
  3209e8:	5809883a 	mov	r4,r11
  3209ec:	003f1a06 	br	320658 <_malloc_r+0x23c>
  3209f0:	80800204 	addi	r2,r16,8
  3209f4:	84000517 	ldw	r16,20(r16)
  3209f8:	143ea81e 	bne	r2,r16,32049c <_malloc_r+0x80>
  3209fc:	21000084 	addi	r4,r4,2
  320a00:	003ee306 	br	320590 <_malloc_r+0x174>
  320a04:	210016c4 	addi	r4,r4,91
  320a08:	210b883a 	add	r5,r4,r4
  320a0c:	003eca06 	br	320538 <_malloc_r+0x11c>
  320a10:	100ad1ba 	srli	r5,r2,6
  320a14:	29400e04 	addi	r5,r5,56
  320a18:	294d883a 	add	r6,r5,r5
  320a1c:	003fbd06 	br	320914 <_malloc_r+0x4f8>
  320a20:	84ff6026 	beq	r16,r19,3207a4 <_malloc_r+0x388>
  320a24:	00800cb4 	movhi	r2,50
  320a28:	108c0404 	addi	r2,r2,12304
  320a2c:	14000217 	ldw	r16,8(r2)
  320a30:	00bfff04 	movi	r2,-4
  320a34:	80c00117 	ldw	r3,4(r16)
  320a38:	1886703a 	and	r3,r3,r2
  320a3c:	003f9406 	br	320890 <_malloc_r+0x474>
  320a40:	294b883a 	add	r5,r5,r5
  320a44:	1146703a 	and	r3,r2,r5
  320a48:	5ac00104 	addi	r11,r11,4
  320a4c:	183ffc26 	beq	r3,zero,320a40 <_malloc_r+0x624>
  320a50:	5809883a 	mov	r4,r11
  320a54:	003f0006 	br	320658 <_malloc_r+0x23c>
  320a58:	00805504 	movi	r2,340
  320a5c:	11001336 	bltu	r2,r4,320aac <_malloc_r+0x690>
  320a60:	8808d3fa 	srli	r4,r17,15
  320a64:	21001dc4 	addi	r4,r4,119
  320a68:	210b883a 	add	r5,r4,r4
  320a6c:	003eb206 	br	320538 <_malloc_r+0x11c>
  320a70:	00802004 	movi	r2,128
  320a74:	003f5d06 	br	3207ec <_malloc_r+0x3d0>
  320a78:	00800044 	movi	r2,1
  320a7c:	a0800115 	stw	r2,4(r20)
  320a80:	a021883a 	mov	r16,r20
  320a84:	0007883a 	mov	r3,zero
  320a88:	003f8106 	br	320890 <_malloc_r+0x474>
  320a8c:	280bd0ba 	srai	r5,r5,2
  320a90:	01800044 	movi	r6,1
  320a94:	38800117 	ldw	r2,4(r7)
  320a98:	314c983a 	sll	r6,r6,r5
  320a9c:	180b883a 	mov	r5,r3
  320aa0:	3084b03a 	or	r2,r6,r2
  320aa4:	38800115 	stw	r2,4(r7)
  320aa8:	003fa906 	br	320950 <_malloc_r+0x534>
  320aac:	00815504 	movi	r2,1364
  320ab0:	11001836 	bltu	r2,r4,320b14 <_malloc_r+0x6f8>
  320ab4:	8808d4ba 	srli	r4,r17,18
  320ab8:	21001f04 	addi	r4,r4,124
  320abc:	210b883a 	add	r5,r4,r4
  320ac0:	003e9d06 	br	320538 <_malloc_r+0x11c>
  320ac4:	bdc00404 	addi	r23,r23,16
  320ac8:	003f2f06 	br	320788 <_malloc_r+0x36c>
  320acc:	01401504 	movi	r5,84
  320ad0:	28c01f36 	bltu	r5,r3,320b50 <_malloc_r+0x734>
  320ad4:	100ad33a 	srli	r5,r2,12
  320ad8:	29401b84 	addi	r5,r5,110
  320adc:	294d883a 	add	r6,r5,r5
  320ae0:	003f8c06 	br	320914 <_malloc_r+0x4f8>
  320ae4:	9c000217 	ldw	r16,8(r19)
  320ae8:	00bfff04 	movi	r2,-4
  320aec:	80c00117 	ldw	r3,4(r16)
  320af0:	1886703a 	and	r3,r3,r2
  320af4:	003f6606 	br	320890 <_malloc_r+0x474>
  320af8:	e0c01fcc 	andi	r3,fp,127
  320afc:	183f2f1e 	bne	r3,zero,3207bc <_malloc_r+0x3a0>
  320b00:	98c00217 	ldw	r3,8(r19)
  320b04:	bd49883a 	add	r4,r23,r21
  320b08:	21000054 	ori	r4,r4,1
  320b0c:	19000115 	stw	r4,4(r3)
  320b10:	003f5506 	br	320868 <_malloc_r+0x44c>
  320b14:	01403f04 	movi	r5,252
  320b18:	01001f84 	movi	r4,126
  320b1c:	003e8606 	br	320538 <_malloc_r+0x11c>
  320b20:	9009883a 	mov	r4,r18
  320b24:	81400204 	addi	r5,r16,8
  320b28:	0320d400 	call	320d40 <_free_r>
  320b2c:	00800cb4 	movhi	r2,50
  320b30:	10914704 	addi	r2,r2,17692
  320b34:	10800017 	ldw	r2,0(r2)
  320b38:	003f4b06 	br	320868 <_malloc_r+0x44c>
  320b3c:	00c00044 	movi	r3,1
  320b40:	002f883a 	mov	r23,zero
  320b44:	003f3406 	br	320818 <_malloc_r+0x3fc>
  320b48:	d5200215 	stw	r20,-32760(gp)
  320b4c:	003f2106 	br	3207d4 <_malloc_r+0x3b8>
  320b50:	01405504 	movi	r5,340
  320b54:	28c00436 	bltu	r5,r3,320b68 <_malloc_r+0x74c>
  320b58:	100ad3fa 	srli	r5,r2,15
  320b5c:	29401dc4 	addi	r5,r5,119
  320b60:	294d883a 	add	r6,r5,r5
  320b64:	003f6b06 	br	320914 <_malloc_r+0x4f8>
  320b68:	01415504 	movi	r5,1364
  320b6c:	28c00936 	bltu	r5,r3,320b94 <_malloc_r+0x778>
  320b70:	100ad4ba 	srli	r5,r2,18
  320b74:	29401f04 	addi	r5,r5,124
  320b78:	294d883a 	add	r6,r5,r5
  320b7c:	003f6506 	br	320914 <_malloc_r+0x4f8>
  320b80:	98800117 	ldw	r2,4(r19)
  320b84:	0146303a 	nor	r3,zero,r5
  320b88:	1884703a 	and	r2,r3,r2
  320b8c:	98800115 	stw	r2,4(r19)
  320b90:	003f9006 	br	3209d4 <_malloc_r+0x5b8>
  320b94:	01803f04 	movi	r6,252
  320b98:	01401f84 	movi	r5,126
  320b9c:	003f5d06 	br	320914 <_malloc_r+0x4f8>

00320ba0 <_sbrk_r>:
  320ba0:	defffd04 	addi	sp,sp,-12
  320ba4:	dc400115 	stw	r17,4(sp)
  320ba8:	dc000015 	stw	r16,0(sp)
  320bac:	2023883a 	mov	r17,r4
  320bb0:	04000cb4 	movhi	r16,50
  320bb4:	84114304 	addi	r16,r16,17676
  320bb8:	2809883a 	mov	r4,r5
  320bbc:	dfc00215 	stw	ra,8(sp)
  320bc0:	80000015 	stw	zero,0(r16)
  320bc4:	03212140 	call	321214 <sbrk>
  320bc8:	00ffffc4 	movi	r3,-1
  320bcc:	10c00526 	beq	r2,r3,320be4 <_sbrk_r+0x44>
  320bd0:	dfc00217 	ldw	ra,8(sp)
  320bd4:	dc400117 	ldw	r17,4(sp)
  320bd8:	dc000017 	ldw	r16,0(sp)
  320bdc:	dec00304 	addi	sp,sp,12
  320be0:	f800283a 	ret
  320be4:	80c00017 	ldw	r3,0(r16)
  320be8:	183ff926 	beq	r3,zero,320bd0 <_sbrk_r+0x30>
  320bec:	88c00015 	stw	r3,0(r17)
  320bf0:	dfc00217 	ldw	ra,8(sp)
  320bf4:	dc400117 	ldw	r17,4(sp)
  320bf8:	dc000017 	ldw	r16,0(sp)
  320bfc:	dec00304 	addi	sp,sp,12
  320c00:	f800283a 	ret

00320c04 <_malloc_trim_r>:
  320c04:	defffb04 	addi	sp,sp,-20
  320c08:	dcc00315 	stw	r19,12(sp)
  320c0c:	dc800215 	stw	r18,8(sp)
  320c10:	dc400115 	stw	r17,4(sp)
  320c14:	dc000015 	stw	r16,0(sp)
  320c18:	2827883a 	mov	r19,r5
  320c1c:	dfc00415 	stw	ra,16(sp)
  320c20:	04400cb4 	movhi	r17,50
  320c24:	8c4c0404 	addi	r17,r17,12304
  320c28:	2021883a 	mov	r16,r4
  320c2c:	03211d40 	call	3211d4 <__malloc_lock>
  320c30:	88800217 	ldw	r2,8(r17)
  320c34:	14800117 	ldw	r18,4(r2)
  320c38:	00bfff04 	movi	r2,-4
  320c3c:	90a4703a 	and	r18,r18,r2
  320c40:	90801bc4 	addi	r2,r18,111
  320c44:	14e7c83a 	sub	r19,r2,r19
  320c48:	9826d1fa 	srli	r19,r19,7
  320c4c:	00801fc4 	movi	r2,127
  320c50:	9cffffc4 	addi	r19,r19,-1
  320c54:	982691fa 	slli	r19,r19,7
  320c58:	14c0060e 	bge	r2,r19,320c74 <_malloc_trim_r+0x70>
  320c5c:	8009883a 	mov	r4,r16
  320c60:	000b883a 	mov	r5,zero
  320c64:	0320ba00 	call	320ba0 <_sbrk_r>
  320c68:	88c00217 	ldw	r3,8(r17)
  320c6c:	1c87883a 	add	r3,r3,r18
  320c70:	10c00a26 	beq	r2,r3,320c9c <_malloc_trim_r+0x98>
  320c74:	8009883a 	mov	r4,r16
  320c78:	03211f40 	call	3211f4 <__malloc_unlock>
  320c7c:	0005883a 	mov	r2,zero
  320c80:	dfc00417 	ldw	ra,16(sp)
  320c84:	dcc00317 	ldw	r19,12(sp)
  320c88:	dc800217 	ldw	r18,8(sp)
  320c8c:	dc400117 	ldw	r17,4(sp)
  320c90:	dc000017 	ldw	r16,0(sp)
  320c94:	dec00504 	addi	sp,sp,20
  320c98:	f800283a 	ret
  320c9c:	8009883a 	mov	r4,r16
  320ca0:	04cbc83a 	sub	r5,zero,r19
  320ca4:	0320ba00 	call	320ba0 <_sbrk_r>
  320ca8:	00ffffc4 	movi	r3,-1
  320cac:	10c01326 	beq	r2,r3,320cfc <_malloc_trim_r+0xf8>
  320cb0:	00800cb4 	movhi	r2,50
  320cb4:	10914704 	addi	r2,r2,17692
  320cb8:	11000017 	ldw	r4,0(r2)
  320cbc:	88c00217 	ldw	r3,8(r17)
  320cc0:	94e5c83a 	sub	r18,r18,r19
  320cc4:	94800054 	ori	r18,r18,1
  320cc8:	24e7c83a 	sub	r19,r4,r19
  320ccc:	1c800115 	stw	r18,4(r3)
  320cd0:	8009883a 	mov	r4,r16
  320cd4:	14c00015 	stw	r19,0(r2)
  320cd8:	03211f40 	call	3211f4 <__malloc_unlock>
  320cdc:	00800044 	movi	r2,1
  320ce0:	dfc00417 	ldw	ra,16(sp)
  320ce4:	dcc00317 	ldw	r19,12(sp)
  320ce8:	dc800217 	ldw	r18,8(sp)
  320cec:	dc400117 	ldw	r17,4(sp)
  320cf0:	dc000017 	ldw	r16,0(sp)
  320cf4:	dec00504 	addi	sp,sp,20
  320cf8:	f800283a 	ret
  320cfc:	8009883a 	mov	r4,r16
  320d00:	000b883a 	mov	r5,zero
  320d04:	0320ba00 	call	320ba0 <_sbrk_r>
  320d08:	88c00217 	ldw	r3,8(r17)
  320d0c:	014003c4 	movi	r5,15
  320d10:	10c9c83a 	sub	r4,r2,r3
  320d14:	293fd70e 	bge	r5,r4,320c74 <_malloc_trim_r+0x70>
  320d18:	01400cb4 	movhi	r5,50
  320d1c:	294d7d04 	addi	r5,r5,13812
  320d20:	29400017 	ldw	r5,0(r5)
  320d24:	21000054 	ori	r4,r4,1
  320d28:	19000115 	stw	r4,4(r3)
  320d2c:	1145c83a 	sub	r2,r2,r5
  320d30:	01400cb4 	movhi	r5,50
  320d34:	29514704 	addi	r5,r5,17692
  320d38:	28800015 	stw	r2,0(r5)
  320d3c:	003fcd06 	br	320c74 <_malloc_trim_r+0x70>

00320d40 <_free_r>:
  320d40:	defffd04 	addi	sp,sp,-12
  320d44:	dc400115 	stw	r17,4(sp)
  320d48:	dc000015 	stw	r16,0(sp)
  320d4c:	dfc00215 	stw	ra,8(sp)
  320d50:	2821883a 	mov	r16,r5
  320d54:	2023883a 	mov	r17,r4
  320d58:	28004b26 	beq	r5,zero,320e88 <_free_r+0x148>
  320d5c:	03211d40 	call	3211d4 <__malloc_lock>
  320d60:	823fff17 	ldw	r8,-4(r16)
  320d64:	00bfff84 	movi	r2,-2
  320d68:	81bffe04 	addi	r6,r16,-8
  320d6c:	4084703a 	and	r2,r8,r2
  320d70:	3087883a 	add	r3,r6,r2
  320d74:	01400cb4 	movhi	r5,50
  320d78:	294c0404 	addi	r5,r5,12304
  320d7c:	1a400117 	ldw	r9,4(r3)
  320d80:	29000217 	ldw	r4,8(r5)
  320d84:	01ffff04 	movi	r7,-4
  320d88:	49ce703a 	and	r7,r9,r7
  320d8c:	20c06526 	beq	r4,r3,320f24 <_free_r+0x1e4>
  320d90:	19c00115 	stw	r7,4(r3)
  320d94:	4200004c 	andi	r8,r8,1
  320d98:	40003026 	beq	r8,zero,320e5c <_free_r+0x11c>
  320d9c:	0009883a 	mov	r4,zero
  320da0:	19d1883a 	add	r8,r3,r7
  320da4:	42000117 	ldw	r8,4(r8)
  320da8:	4200004c 	andi	r8,r8,1
  320dac:	4000061e 	bne	r8,zero,320dc8 <_free_r+0x88>
  320db0:	11c5883a 	add	r2,r2,r7
  320db4:	19c00217 	ldw	r7,8(r3)
  320db8:	20004e26 	beq	r4,zero,320ef4 <_free_r+0x1b4>
  320dbc:	18c00317 	ldw	r3,12(r3)
  320dc0:	38c00315 	stw	r3,12(r7)
  320dc4:	19c00215 	stw	r7,8(r3)
  320dc8:	11c00054 	ori	r7,r2,1
  320dcc:	3087883a 	add	r3,r6,r2
  320dd0:	31c00115 	stw	r7,4(r6)
  320dd4:	18800015 	stw	r2,0(r3)
  320dd8:	20001a1e 	bne	r4,zero,320e44 <_free_r+0x104>
  320ddc:	00c07fc4 	movi	r3,511
  320de0:	18802e2e 	bgeu	r3,r2,320e9c <_free_r+0x15c>
  320de4:	1006d27a 	srli	r3,r2,9
  320de8:	01000104 	movi	r4,4
  320dec:	20c06636 	bltu	r4,r3,320f88 <_free_r+0x248>
  320df0:	1008d1ba 	srli	r4,r2,6
  320df4:	21000e04 	addi	r4,r4,56
  320df8:	210f883a 	add	r7,r4,r4
  320dfc:	39cf883a 	add	r7,r7,r7
  320e00:	39cf883a 	add	r7,r7,r7
  320e04:	29cf883a 	add	r7,r5,r7
  320e08:	38c00217 	ldw	r3,8(r7)
  320e0c:	01400cb4 	movhi	r5,50
  320e10:	294c0404 	addi	r5,r5,12304
  320e14:	19c06126 	beq	r3,r7,320f9c <_free_r+0x25c>
  320e18:	013fff04 	movi	r4,-4
  320e1c:	19400117 	ldw	r5,4(r3)
  320e20:	290a703a 	and	r5,r5,r4
  320e24:	1140022e 	bgeu	r2,r5,320e30 <_free_r+0xf0>
  320e28:	18c00217 	ldw	r3,8(r3)
  320e2c:	38fffb1e 	bne	r7,r3,320e1c <_free_r+0xdc>
  320e30:	18800317 	ldw	r2,12(r3)
  320e34:	30800315 	stw	r2,12(r6)
  320e38:	30c00215 	stw	r3,8(r6)
  320e3c:	11800215 	stw	r6,8(r2)
  320e40:	19800315 	stw	r6,12(r3)
  320e44:	8809883a 	mov	r4,r17
  320e48:	dfc00217 	ldw	ra,8(sp)
  320e4c:	dc400117 	ldw	r17,4(sp)
  320e50:	dc000017 	ldw	r16,0(sp)
  320e54:	dec00304 	addi	sp,sp,12
  320e58:	03211f41 	jmpi	3211f4 <__malloc_unlock>
  320e5c:	813ffe17 	ldw	r4,-8(r16)
  320e60:	2a400204 	addi	r9,r5,8
  320e64:	310dc83a 	sub	r6,r6,r4
  320e68:	32000217 	ldw	r8,8(r6)
  320e6c:	1105883a 	add	r2,r2,r4
  320e70:	42404326 	beq	r8,r9,320f80 <_free_r+0x240>
  320e74:	32400317 	ldw	r9,12(r6)
  320e78:	0009883a 	mov	r4,zero
  320e7c:	42400315 	stw	r9,12(r8)
  320e80:	4a000215 	stw	r8,8(r9)
  320e84:	003fc606 	br	320da0 <_free_r+0x60>
  320e88:	dfc00217 	ldw	ra,8(sp)
  320e8c:	dc400117 	ldw	r17,4(sp)
  320e90:	dc000017 	ldw	r16,0(sp)
  320e94:	dec00304 	addi	sp,sp,12
  320e98:	f800283a 	ret
  320e9c:	1004d0fa 	srli	r2,r2,3
  320ea0:	02000044 	movi	r8,1
  320ea4:	29c00117 	ldw	r7,4(r5)
  320ea8:	1087883a 	add	r3,r2,r2
  320eac:	18c7883a 	add	r3,r3,r3
  320eb0:	1005d0ba 	srai	r2,r2,2
  320eb4:	18c7883a 	add	r3,r3,r3
  320eb8:	28c7883a 	add	r3,r5,r3
  320ebc:	19000217 	ldw	r4,8(r3)
  320ec0:	4084983a 	sll	r2,r8,r2
  320ec4:	30c00315 	stw	r3,12(r6)
  320ec8:	31000215 	stw	r4,8(r6)
  320ecc:	11c4b03a 	or	r2,r2,r7
  320ed0:	21800315 	stw	r6,12(r4)
  320ed4:	8809883a 	mov	r4,r17
  320ed8:	28800115 	stw	r2,4(r5)
  320edc:	19800215 	stw	r6,8(r3)
  320ee0:	dfc00217 	ldw	ra,8(sp)
  320ee4:	dc400117 	ldw	r17,4(sp)
  320ee8:	dc000017 	ldw	r16,0(sp)
  320eec:	dec00304 	addi	sp,sp,12
  320ef0:	03211f41 	jmpi	3211f4 <__malloc_unlock>
  320ef4:	02000cb4 	movhi	r8,50
  320ef8:	420c0604 	addi	r8,r8,12312
  320efc:	3a3faf1e 	bne	r7,r8,320dbc <_free_r+0x7c>
  320f00:	29800515 	stw	r6,20(r5)
  320f04:	29800415 	stw	r6,16(r5)
  320f08:	11000054 	ori	r4,r2,1
  320f0c:	3087883a 	add	r3,r6,r2
  320f10:	31c00315 	stw	r7,12(r6)
  320f14:	31c00215 	stw	r7,8(r6)
  320f18:	31000115 	stw	r4,4(r6)
  320f1c:	18800015 	stw	r2,0(r3)
  320f20:	003fc806 	br	320e44 <_free_r+0x104>
  320f24:	4200004c 	andi	r8,r8,1
  320f28:	3885883a 	add	r2,r7,r2
  320f2c:	4000071e 	bne	r8,zero,320f4c <_free_r+0x20c>
  320f30:	81fffe17 	ldw	r7,-8(r16)
  320f34:	31cdc83a 	sub	r6,r6,r7
  320f38:	30c00317 	ldw	r3,12(r6)
  320f3c:	31000217 	ldw	r4,8(r6)
  320f40:	11c5883a 	add	r2,r2,r7
  320f44:	20c00315 	stw	r3,12(r4)
  320f48:	19000215 	stw	r4,8(r3)
  320f4c:	00c00cb4 	movhi	r3,50
  320f50:	18cd7e04 	addi	r3,r3,13816
  320f54:	18c00017 	ldw	r3,0(r3)
  320f58:	11000054 	ori	r4,r2,1
  320f5c:	31000115 	stw	r4,4(r6)
  320f60:	29800215 	stw	r6,8(r5)
  320f64:	10ffb736 	bltu	r2,r3,320e44 <_free_r+0x104>
  320f68:	00800cb4 	movhi	r2,50
  320f6c:	10914204 	addi	r2,r2,17672
  320f70:	11400017 	ldw	r5,0(r2)
  320f74:	8809883a 	mov	r4,r17
  320f78:	0320c040 	call	320c04 <_malloc_trim_r>
  320f7c:	003fb106 	br	320e44 <_free_r+0x104>
  320f80:	01000044 	movi	r4,1
  320f84:	003f8606 	br	320da0 <_free_r+0x60>
  320f88:	01000504 	movi	r4,20
  320f8c:	20c00b36 	bltu	r4,r3,320fbc <_free_r+0x27c>
  320f90:	190016c4 	addi	r4,r3,91
  320f94:	210f883a 	add	r7,r4,r4
  320f98:	003f9806 	br	320dfc <_free_r+0xbc>
  320f9c:	2009d0ba 	srai	r4,r4,2
  320fa0:	00800044 	movi	r2,1
  320fa4:	29c00117 	ldw	r7,4(r5)
  320fa8:	1108983a 	sll	r4,r2,r4
  320fac:	1805883a 	mov	r2,r3
  320fb0:	21c8b03a 	or	r4,r4,r7
  320fb4:	29000115 	stw	r4,4(r5)
  320fb8:	003f9e06 	br	320e34 <_free_r+0xf4>
  320fbc:	01001504 	movi	r4,84
  320fc0:	20c00436 	bltu	r4,r3,320fd4 <_free_r+0x294>
  320fc4:	1008d33a 	srli	r4,r2,12
  320fc8:	21001b84 	addi	r4,r4,110
  320fcc:	210f883a 	add	r7,r4,r4
  320fd0:	003f8a06 	br	320dfc <_free_r+0xbc>
  320fd4:	01005504 	movi	r4,340
  320fd8:	20c00436 	bltu	r4,r3,320fec <_free_r+0x2ac>
  320fdc:	1008d3fa 	srli	r4,r2,15
  320fe0:	21001dc4 	addi	r4,r4,119
  320fe4:	210f883a 	add	r7,r4,r4
  320fe8:	003f8406 	br	320dfc <_free_r+0xbc>
  320fec:	01015504 	movi	r4,1364
  320ff0:	20c00436 	bltu	r4,r3,321004 <_free_r+0x2c4>
  320ff4:	1008d4ba 	srli	r4,r2,18
  320ff8:	21001f04 	addi	r4,r4,124
  320ffc:	210f883a 	add	r7,r4,r4
  321000:	003f7e06 	br	320dfc <_free_r+0xbc>
  321004:	01c03f04 	movi	r7,252
  321008:	01001f84 	movi	r4,126
  32100c:	003f7b06 	br	320dfc <_free_r+0xbc>

00321010 <__muldi3>:
  321010:	20bfffcc 	andi	r2,r4,65535
  321014:	2010d43a 	srli	r8,r4,16
  321018:	30ffffcc 	andi	r3,r6,65535
  32101c:	3014d43a 	srli	r10,r6,16
  321020:	1893383a 	mul	r9,r3,r2
  321024:	1a07383a 	mul	r3,r3,r8
  321028:	5085383a 	mul	r2,r10,r2
  32102c:	4816d43a 	srli	r11,r9,16
  321030:	5211383a 	mul	r8,r10,r8
  321034:	1885883a 	add	r2,r3,r2
  321038:	12c5883a 	add	r2,r2,r11
  32103c:	10c0022e 	bgeu	r2,r3,321048 <__muldi3+0x38>
  321040:	00c00074 	movhi	r3,1
  321044:	40d1883a 	add	r8,r8,r3
  321048:	1014d43a 	srli	r10,r2,16
  32104c:	21c9383a 	mul	r4,r4,r7
  321050:	314d383a 	mul	r6,r6,r5
  321054:	1004943a 	slli	r2,r2,16
  321058:	4291883a 	add	r8,r8,r10
  32105c:	4a7fffcc 	andi	r9,r9,65535
  321060:	2187883a 	add	r3,r4,r6
  321064:	1245883a 	add	r2,r2,r9
  321068:	1a07883a 	add	r3,r3,r8
  32106c:	f800283a 	ret

00321070 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  321070:	defffc04 	addi	sp,sp,-16
  321074:	df000315 	stw	fp,12(sp)
  321078:	df000304 	addi	fp,sp,12
  32107c:	e13ffd15 	stw	r4,-12(fp)
  321080:	e17ffe15 	stw	r5,-8(fp)
  321084:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  321088:	e0fffe17 	ldw	r3,-8(fp)
  32108c:	e0bffd17 	ldw	r2,-12(fp)
  321090:	18800e26 	beq	r3,r2,3210cc <alt_load_section+0x5c>
  {
    while( to != end )
  321094:	00000a06 	br	3210c0 <alt_load_section+0x50>
    {
      *to++ = *from++;
  321098:	e0bffd17 	ldw	r2,-12(fp)
  32109c:	10c00017 	ldw	r3,0(r2)
  3210a0:	e0bffe17 	ldw	r2,-8(fp)
  3210a4:	10c00015 	stw	r3,0(r2)
  3210a8:	e0bffe17 	ldw	r2,-8(fp)
  3210ac:	10800104 	addi	r2,r2,4
  3210b0:	e0bffe15 	stw	r2,-8(fp)
  3210b4:	e0bffd17 	ldw	r2,-12(fp)
  3210b8:	10800104 	addi	r2,r2,4
  3210bc:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  3210c0:	e0fffe17 	ldw	r3,-8(fp)
  3210c4:	e0bfff17 	ldw	r2,-4(fp)
  3210c8:	18bff31e 	bne	r3,r2,321098 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
  3210cc:	e037883a 	mov	sp,fp
  3210d0:	df000017 	ldw	fp,0(sp)
  3210d4:	dec00104 	addi	sp,sp,4
  3210d8:	f800283a 	ret

003210dc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  3210dc:	defffe04 	addi	sp,sp,-8
  3210e0:	dfc00115 	stw	ra,4(sp)
  3210e4:	df000015 	stw	fp,0(sp)
  3210e8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  3210ec:	01000cb4 	movhi	r4,50
  3210f0:	210d8604 	addi	r4,r4,13848
  3210f4:	01400cb4 	movhi	r5,50
  3210f8:	2949cc04 	addi	r5,r5,10032
  3210fc:	01800cb4 	movhi	r6,50
  321100:	318d8604 	addi	r6,r6,13848
  321104:	03210700 	call	321070 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  321108:	01000cb4 	movhi	r4,50
  32110c:	21000804 	addi	r4,r4,32
  321110:	01400cb4 	movhi	r5,50
  321114:	29400804 	addi	r5,r5,32
  321118:	01800cb4 	movhi	r6,50
  32111c:	31800804 	addi	r6,r6,32
  321120:	03210700 	call	321070 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  321124:	01000cb4 	movhi	r4,50
  321128:	2109c304 	addi	r4,r4,9996
  32112c:	01400cb4 	movhi	r5,50
  321130:	2949c304 	addi	r5,r5,9996
  321134:	01800cb4 	movhi	r6,50
  321138:	3189cc04 	addi	r6,r6,10032
  32113c:	03210700 	call	321070 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  321140:	03218480 	call	321848 <alt_dcache_flush_all>
  alt_icache_flush_all();
  321144:	0321a600 	call	321a60 <alt_icache_flush_all>
}
  321148:	e037883a 	mov	sp,fp
  32114c:	dfc00117 	ldw	ra,4(sp)
  321150:	df000017 	ldw	fp,0(sp)
  321154:	dec00204 	addi	sp,sp,8
  321158:	f800283a 	ret

0032115c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  32115c:	defffd04 	addi	sp,sp,-12
  321160:	dfc00215 	stw	ra,8(sp)
  321164:	df000115 	stw	fp,4(sp)
  321168:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  32116c:	0009883a 	mov	r4,zero
  321170:	032132c0 	call	32132c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  321174:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  321178:	03213600 	call	321360 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  32117c:	01000cb4 	movhi	r4,50
  321180:	2109c304 	addi	r4,r4,9996
  321184:	01400cb4 	movhi	r5,50
  321188:	2949c304 	addi	r5,r5,9996
  32118c:	01800cb4 	movhi	r6,50
  321190:	3189c304 	addi	r6,r6,9996
  321194:	0321b500 	call	321b50 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  321198:	03219a80 	call	3219a8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  32119c:	01000cb4 	movhi	r4,50
  3211a0:	21068104 	addi	r4,r4,6660
  3211a4:	032219c0 	call	32219c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  3211a8:	d123c917 	ldw	r4,-28892(gp)
  3211ac:	d0e3ca17 	ldw	r3,-28888(gp)
  3211b0:	d0a3cb17 	ldw	r2,-28884(gp)
  3211b4:	180b883a 	mov	r5,r3
  3211b8:	100d883a 	mov	r6,r2
  3211bc:	032006c0 	call	32006c <main>
  3211c0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  3211c4:	01000044 	movi	r4,1
  3211c8:	03217800 	call	321780 <close>
  exit (result);
  3211cc:	e13fff17 	ldw	r4,-4(fp)
  3211d0:	03221b00 	call	3221b0 <exit>

003211d4 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  3211d4:	defffe04 	addi	sp,sp,-8
  3211d8:	df000115 	stw	fp,4(sp)
  3211dc:	df000104 	addi	fp,sp,4
  3211e0:	e13fff15 	stw	r4,-4(fp)
}
  3211e4:	e037883a 	mov	sp,fp
  3211e8:	df000017 	ldw	fp,0(sp)
  3211ec:	dec00104 	addi	sp,sp,4
  3211f0:	f800283a 	ret

003211f4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  3211f4:	defffe04 	addi	sp,sp,-8
  3211f8:	df000115 	stw	fp,4(sp)
  3211fc:	df000104 	addi	fp,sp,4
  321200:	e13fff15 	stw	r4,-4(fp)
}
  321204:	e037883a 	mov	sp,fp
  321208:	df000017 	ldw	fp,0(sp)
  32120c:	dec00104 	addi	sp,sp,4
  321210:	f800283a 	ret

00321214 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  321214:	defff904 	addi	sp,sp,-28
  321218:	df000615 	stw	fp,24(sp)
  32121c:	df000604 	addi	fp,sp,24
  321220:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  321224:	0005303a 	rdctl	r2,status
  321228:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  32122c:	e0fffc17 	ldw	r3,-16(fp)
  321230:	00bfff84 	movi	r2,-2
  321234:	1884703a 	and	r2,r3,r2
  321238:	1001703a 	wrctl	status,r2
  
  return context;
  32123c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  321240:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  321244:	d0a00417 	ldw	r2,-32752(gp)
  321248:	10c000c4 	addi	r3,r2,3
  32124c:	00bfff04 	movi	r2,-4
  321250:	1884703a 	and	r2,r3,r2
  321254:	d0a00415 	stw	r2,-32752(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  321258:	d0e00417 	ldw	r3,-32752(gp)
  32125c:	e0bfff17 	ldw	r2,-4(fp)
  321260:	1885883a 	add	r2,r3,r2
  321264:	00c00d34 	movhi	r3,52
  321268:	18c00004 	addi	r3,r3,0
  32126c:	1880062e 	bgeu	r3,r2,321288 <sbrk+0x74>
  321270:	e0bffa17 	ldw	r2,-24(fp)
  321274:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  321278:	e0bffd17 	ldw	r2,-12(fp)
  32127c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  321280:	00bfffc4 	movi	r2,-1
  321284:	00000b06 	br	3212b4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
  321288:	d0a00417 	ldw	r2,-32752(gp)
  32128c:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
  321290:	d0e00417 	ldw	r3,-32752(gp)
  321294:	e0bfff17 	ldw	r2,-4(fp)
  321298:	1885883a 	add	r2,r3,r2
  32129c:	d0a00415 	stw	r2,-32752(gp)
  3212a0:	e0bffa17 	ldw	r2,-24(fp)
  3212a4:	e0bffe15 	stw	r2,-8(fp)
  3212a8:	e0bffe17 	ldw	r2,-8(fp)
  3212ac:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  3212b0:	e0bffb17 	ldw	r2,-20(fp)
} 
  3212b4:	e037883a 	mov	sp,fp
  3212b8:	df000017 	ldw	fp,0(sp)
  3212bc:	dec00104 	addi	sp,sp,4
  3212c0:	f800283a 	ret

003212c4 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  3212c4:	defffd04 	addi	sp,sp,-12
  3212c8:	dfc00215 	stw	ra,8(sp)
  3212cc:	df000115 	stw	fp,4(sp)
  3212d0:	df000104 	addi	fp,sp,4
  3212d4:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
  3212d8:	e13fff17 	ldw	r4,-4(fp)
  3212dc:	03215dc0 	call	3215dc <alt_busy_sleep>
}
  3212e0:	e037883a 	mov	sp,fp
  3212e4:	dfc00117 	ldw	ra,4(sp)
  3212e8:	df000017 	ldw	fp,0(sp)
  3212ec:	dec00204 	addi	sp,sp,8
  3212f0:	f800283a 	ret

003212f4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  3212f4:	defffd04 	addi	sp,sp,-12
  3212f8:	dfc00215 	stw	ra,8(sp)
  3212fc:	df000115 	stw	fp,4(sp)
  321300:	df000104 	addi	fp,sp,4
  321304:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  321308:	e13fff17 	ldw	r4,-4(fp)
  32130c:	01400cb4 	movhi	r5,50
  321310:	294d8204 	addi	r5,r5,13832
  321314:	03219080 	call	321908 <alt_dev_llist_insert>
}
  321318:	e037883a 	mov	sp,fp
  32131c:	dfc00117 	ldw	ra,4(sp)
  321320:	df000017 	ldw	fp,0(sp)
  321324:	dec00204 	addi	sp,sp,8
  321328:	f800283a 	ret

0032132c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  32132c:	defffd04 	addi	sp,sp,-12
  321330:	dfc00215 	stw	ra,8(sp)
  321334:	df000115 	stw	fp,4(sp)
  321338:	df000104 	addi	fp,sp,4
  32133c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS, nios);
  321340:	0321e980 	call	321e98 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  321344:	00800044 	movi	r2,1
  321348:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  32134c:	e037883a 	mov	sp,fp
  321350:	dfc00117 	ldw	ra,4(sp)
  321354:	df000017 	ldw	fp,0(sp)
  321358:	dec00204 	addi	sp,sp,8
  32135c:	f800283a 	ret

00321360 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  321360:	defffe04 	addi	sp,sp,-8
  321364:	dfc00115 	stw	ra,4(sp)
  321368:	df000015 	stw	fp,0(sp)
  32136c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG, jtag);
  321370:	01000cb4 	movhi	r4,50
  321374:	210d0604 	addi	r4,r4,13336
  321378:	03212f40 	call	3212f4 <alt_dev_reg>
}
  32137c:	e037883a 	mov	sp,fp
  321380:	dfc00117 	ldw	ra,4(sp)
  321384:	df000017 	ldw	fp,0(sp)
  321388:	dec00204 	addi	sp,sp,8
  32138c:	f800283a 	ret

00321390 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  321390:	defffa04 	addi	sp,sp,-24
  321394:	dfc00515 	stw	ra,20(sp)
  321398:	df000415 	stw	fp,16(sp)
  32139c:	df000404 	addi	fp,sp,16
  3213a0:	e13ffd15 	stw	r4,-12(fp)
  3213a4:	e17ffe15 	stw	r5,-8(fp)
  3213a8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  3213ac:	e0bffd17 	ldw	r2,-12(fp)
  3213b0:	10800017 	ldw	r2,0(r2)
  3213b4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  3213b8:	e0bffc17 	ldw	r2,-16(fp)
  3213bc:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
  3213c0:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  3213c4:	10800217 	ldw	r2,8(r2)
  3213c8:	1809883a 	mov	r4,r3
  3213cc:	e17ffe17 	ldw	r5,-8(fp)
  3213d0:	e1bfff17 	ldw	r6,-4(fp)
  3213d4:	100f883a 	mov	r7,r2
  3213d8:	03214500 	call	321450 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  3213dc:	e037883a 	mov	sp,fp
  3213e0:	dfc00117 	ldw	ra,4(sp)
  3213e4:	df000017 	ldw	fp,0(sp)
  3213e8:	dec00204 	addi	sp,sp,8
  3213ec:	f800283a 	ret

003213f0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  3213f0:	defffa04 	addi	sp,sp,-24
  3213f4:	dfc00515 	stw	ra,20(sp)
  3213f8:	df000415 	stw	fp,16(sp)
  3213fc:	df000404 	addi	fp,sp,16
  321400:	e13ffd15 	stw	r4,-12(fp)
  321404:	e17ffe15 	stw	r5,-8(fp)
  321408:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  32140c:	e0bffd17 	ldw	r2,-12(fp)
  321410:	10800017 	ldw	r2,0(r2)
  321414:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  321418:	e0bffc17 	ldw	r2,-16(fp)
  32141c:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
  321420:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  321424:	10800217 	ldw	r2,8(r2)
  321428:	1809883a 	mov	r4,r3
  32142c:	e17ffe17 	ldw	r5,-8(fp)
  321430:	e1bfff17 	ldw	r6,-4(fp)
  321434:	100f883a 	mov	r7,r2
  321438:	03215440 	call	321544 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  32143c:	e037883a 	mov	sp,fp
  321440:	dfc00117 	ldw	ra,4(sp)
  321444:	df000017 	ldw	fp,0(sp)
  321448:	dec00204 	addi	sp,sp,8
  32144c:	f800283a 	ret

00321450 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
  321450:	defff704 	addi	sp,sp,-36
  321454:	df000815 	stw	fp,32(sp)
  321458:	df000804 	addi	fp,sp,32
  32145c:	e13ffc15 	stw	r4,-16(fp)
  321460:	e17ffd15 	stw	r5,-12(fp)
  321464:	e1bffe15 	stw	r6,-8(fp)
  321468:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
  32146c:	e0bffc17 	ldw	r2,-16(fp)
  321470:	10800017 	ldw	r2,0(r2)
  321474:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
  321478:	e0bffd17 	ldw	r2,-12(fp)
  32147c:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
  321480:	e0bffe17 	ldw	r2,-8(fp)
  321484:	e0fffd17 	ldw	r3,-12(fp)
  321488:	1885883a 	add	r2,r3,r2
  32148c:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
  321490:	00001406 	br	3214e4 <altera_avalon_jtag_uart_read+0x94>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  321494:	e0bff917 	ldw	r2,-28(fp)
  321498:	10800037 	ldwio	r2,0(r2)
  32149c:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
  3214a0:	e0bffb17 	ldw	r2,-20(fp)
  3214a4:	10a0000c 	andi	r2,r2,32768
  3214a8:	10000826 	beq	r2,zero,3214cc <altera_avalon_jtag_uart_read+0x7c>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  3214ac:	e0bffb17 	ldw	r2,-20(fp)
  3214b0:	1007883a 	mov	r3,r2
  3214b4:	e0bff817 	ldw	r2,-32(fp)
  3214b8:	10c00005 	stb	r3,0(r2)
  3214bc:	e0bff817 	ldw	r2,-32(fp)
  3214c0:	10800044 	addi	r2,r2,1
  3214c4:	e0bff815 	stw	r2,-32(fp)
  3214c8:	00000606 	br	3214e4 <altera_avalon_jtag_uart_read+0x94>
    else if (ptr != buffer)
  3214cc:	e0fff817 	ldw	r3,-32(fp)
  3214d0:	e0bffd17 	ldw	r2,-12(fp)
  3214d4:	1880071e 	bne	r3,r2,3214f4 <altera_avalon_jtag_uart_read+0xa4>
      break;
    else if(flags & O_NONBLOCK)
  3214d8:	e0bfff17 	ldw	r2,-4(fp)
  3214dc:	1090000c 	andi	r2,r2,16384
  3214e0:	1000061e 	bne	r2,zero,3214fc <altera_avalon_jtag_uart_read+0xac>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
  3214e4:	e0fff817 	ldw	r3,-32(fp)
  3214e8:	e0bffa17 	ldw	r2,-24(fp)
  3214ec:	18bfe936 	bltu	r3,r2,321494 <altera_avalon_jtag_uart_read+0x44>
  3214f0:	00000306 	br	321500 <altera_avalon_jtag_uart_read+0xb0>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
  3214f4:	0001883a 	nop
  3214f8:	00000106 	br	321500 <altera_avalon_jtag_uart_read+0xb0>
    else if(flags & O_NONBLOCK)
      break;   
  3214fc:	0001883a 	nop
    
  }

  if (ptr != buffer)
  321500:	e0fff817 	ldw	r3,-32(fp)
  321504:	e0bffd17 	ldw	r2,-12(fp)
  321508:	18800426 	beq	r3,r2,32151c <altera_avalon_jtag_uart_read+0xcc>
    return ptr - buffer;
  32150c:	e0fff817 	ldw	r3,-32(fp)
  321510:	e0bffd17 	ldw	r2,-12(fp)
  321514:	1885c83a 	sub	r2,r3,r2
  321518:	00000606 	br	321534 <altera_avalon_jtag_uart_read+0xe4>
  else if (flags & O_NONBLOCK)
  32151c:	e0bfff17 	ldw	r2,-4(fp)
  321520:	1090000c 	andi	r2,r2,16384
  321524:	10000226 	beq	r2,zero,321530 <altera_avalon_jtag_uart_read+0xe0>
    return -EWOULDBLOCK;
  321528:	00bffd44 	movi	r2,-11
  32152c:	00000106 	br	321534 <altera_avalon_jtag_uart_read+0xe4>
  else
    return -EIO;
  321530:	00bffec4 	movi	r2,-5
}
  321534:	e037883a 	mov	sp,fp
  321538:	df000017 	ldw	fp,0(sp)
  32153c:	dec00104 	addi	sp,sp,4
  321540:	f800283a 	ret

00321544 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  321544:	defff904 	addi	sp,sp,-28
  321548:	df000615 	stw	fp,24(sp)
  32154c:	df000604 	addi	fp,sp,24
  321550:	e13ffc15 	stw	r4,-16(fp)
  321554:	e17ffd15 	stw	r5,-12(fp)
  321558:	e1bffe15 	stw	r6,-8(fp)
  32155c:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
  321560:	e0bffc17 	ldw	r2,-16(fp)
  321564:	10800017 	ldw	r2,0(r2)
  321568:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
  32156c:	e0bffe17 	ldw	r2,-8(fp)
  321570:	e0fffd17 	ldw	r3,-12(fp)
  321574:	1885883a 	add	r2,r3,r2
  321578:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
  32157c:	00000f06 	br	3215bc <altera_avalon_jtag_uart_write+0x78>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
  321580:	e0bffa17 	ldw	r2,-24(fp)
  321584:	10800104 	addi	r2,r2,4
  321588:	10800037 	ldwio	r2,0(r2)
  32158c:	10bfffec 	andhi	r2,r2,65535
  321590:	10000a26 	beq	r2,zero,3215bc <altera_avalon_jtag_uart_write+0x78>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
  321594:	e0bffa17 	ldw	r2,-24(fp)
  321598:	e0fffd17 	ldw	r3,-12(fp)
  32159c:	18c00003 	ldbu	r3,0(r3)
  3215a0:	18c03fcc 	andi	r3,r3,255
  3215a4:	18c0201c 	xori	r3,r3,128
  3215a8:	18ffe004 	addi	r3,r3,-128
  3215ac:	e13ffd17 	ldw	r4,-12(fp)
  3215b0:	21000044 	addi	r4,r4,1
  3215b4:	e13ffd15 	stw	r4,-12(fp)
  3215b8:	10c00035 	stwio	r3,0(r2)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
  3215bc:	e0fffd17 	ldw	r3,-12(fp)
  3215c0:	e0bffb17 	ldw	r2,-20(fp)
  3215c4:	18bfee36 	bltu	r3,r2,321580 <altera_avalon_jtag_uart_write+0x3c>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
  3215c8:	e0bffe17 	ldw	r2,-8(fp)
}
  3215cc:	e037883a 	mov	sp,fp
  3215d0:	df000017 	ldw	fp,0(sp)
  3215d4:	dec00104 	addi	sp,sp,4
  3215d8:	f800283a 	ret

003215dc <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  3215dc:	defffa04 	addi	sp,sp,-24
  3215e0:	dfc00515 	stw	ra,20(sp)
  3215e4:	df000415 	stw	fp,16(sp)
  3215e8:	df000404 	addi	fp,sp,16
  3215ec:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
  3215f0:	008000c4 	movi	r2,3
  3215f4:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
  3215f8:	e0fffd17 	ldw	r3,-12(fp)
  3215fc:	008003f4 	movhi	r2,15
  321600:	10909004 	addi	r2,r2,16960
  321604:	1885383a 	mul	r2,r3,r2
  321608:	0100bef4 	movhi	r4,763
  32160c:	213c2004 	addi	r4,r4,-3968
  321610:	100b883a 	mov	r5,r2
  321614:	03226c00 	call	3226c0 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  321618:	01200034 	movhi	r4,32768
  32161c:	213fffc4 	addi	r4,r4,-1
  321620:	100b883a 	mov	r5,r2
  321624:	03226c00 	call	3226c0 <__udivsi3>
  321628:	e13fff17 	ldw	r4,-4(fp)
  32162c:	100b883a 	mov	r5,r2
  321630:	03226c00 	call	3226c0 <__udivsi3>
  321634:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  321638:	e0bffe17 	ldw	r2,-8(fp)
  32163c:	10002926 	beq	r2,zero,3216e4 <alt_busy_sleep+0x108>
  {
    for(i=0;i<big_loops;i++)
  321640:	e03ffc15 	stw	zero,-16(fp)
  321644:	00001606 	br	3216a0 <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  321648:	00a00034 	movhi	r2,32768
  32164c:	10bfffc4 	addi	r2,r2,-1
  321650:	10bfffc4 	addi	r2,r2,-1
  321654:	103ffe1e 	bne	r2,zero,321650 <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
  321658:	e0fffd17 	ldw	r3,-12(fp)
  32165c:	008003f4 	movhi	r2,15
  321660:	10909004 	addi	r2,r2,16960
  321664:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  321668:	0100bef4 	movhi	r4,763
  32166c:	213c2004 	addi	r4,r4,-3968
  321670:	100b883a 	mov	r5,r2
  321674:	03226c00 	call	3226c0 <__udivsi3>
  321678:	01200034 	movhi	r4,32768
  32167c:	213fffc4 	addi	r4,r4,-1
  321680:	100b883a 	mov	r5,r2
  321684:	03226c00 	call	3226c0 <__udivsi3>
  321688:	e0ffff17 	ldw	r3,-4(fp)
  32168c:	1885c83a 	sub	r2,r3,r2
  321690:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  321694:	e0bffc17 	ldw	r2,-16(fp)
  321698:	10800044 	addi	r2,r2,1
  32169c:	e0bffc15 	stw	r2,-16(fp)
  3216a0:	e0fffc17 	ldw	r3,-16(fp)
  3216a4:	e0bffe17 	ldw	r2,-8(fp)
  3216a8:	18bfe716 	blt	r3,r2,321648 <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  3216ac:	e0fffd17 	ldw	r3,-12(fp)
  3216b0:	008003f4 	movhi	r2,15
  3216b4:	10909004 	addi	r2,r2,16960
  3216b8:	1885383a 	mul	r2,r3,r2
  3216bc:	0100bef4 	movhi	r4,763
  3216c0:	213c2004 	addi	r4,r4,-3968
  3216c4:	100b883a 	mov	r5,r2
  3216c8:	03226c00 	call	3226c0 <__udivsi3>
  3216cc:	1007883a 	mov	r3,r2
  3216d0:	e0bfff17 	ldw	r2,-4(fp)
  3216d4:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  3216d8:	10bfffc4 	addi	r2,r2,-1
  3216dc:	103ffe1e 	bne	r2,zero,3216d8 <alt_busy_sleep+0xfc>
  3216e0:	00000d06 	br	321718 <alt_busy_sleep+0x13c>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  3216e4:	e0fffd17 	ldw	r3,-12(fp)
  3216e8:	008003f4 	movhi	r2,15
  3216ec:	10909004 	addi	r2,r2,16960
  3216f0:	1885383a 	mul	r2,r3,r2
  3216f4:	0100bef4 	movhi	r4,763
  3216f8:	213c2004 	addi	r4,r4,-3968
  3216fc:	100b883a 	mov	r5,r2
  321700:	03226c00 	call	3226c0 <__udivsi3>
  321704:	1007883a 	mov	r3,r2
  321708:	e0bfff17 	ldw	r2,-4(fp)
  32170c:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  321710:	10bfffc4 	addi	r2,r2,-1
  321714:	00bffe16 	blt	zero,r2,321710 <alt_busy_sleep+0x134>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  321718:	0005883a 	mov	r2,zero
}
  32171c:	e037883a 	mov	sp,fp
  321720:	dfc00117 	ldw	ra,4(sp)
  321724:	df000017 	ldw	fp,0(sp)
  321728:	dec00204 	addi	sp,sp,8
  32172c:	f800283a 	ret

00321730 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  321730:	defffe04 	addi	sp,sp,-8
  321734:	dfc00115 	stw	ra,4(sp)
  321738:	df000015 	stw	fp,0(sp)
  32173c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  321740:	00800cb4 	movhi	r2,50
  321744:	108d8504 	addi	r2,r2,13844
  321748:	10800017 	ldw	r2,0(r2)
  32174c:	10000526 	beq	r2,zero,321764 <alt_get_errno+0x34>
  321750:	00800cb4 	movhi	r2,50
  321754:	108d8504 	addi	r2,r2,13844
  321758:	10800017 	ldw	r2,0(r2)
  32175c:	103ee83a 	callr	r2
  321760:	00000206 	br	32176c <alt_get_errno+0x3c>
  321764:	00800cb4 	movhi	r2,50
  321768:	10914304 	addi	r2,r2,17676
}
  32176c:	e037883a 	mov	sp,fp
  321770:	dfc00117 	ldw	ra,4(sp)
  321774:	df000017 	ldw	fp,0(sp)
  321778:	dec00204 	addi	sp,sp,8
  32177c:	f800283a 	ret

00321780 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  321780:	defffb04 	addi	sp,sp,-20
  321784:	dfc00415 	stw	ra,16(sp)
  321788:	df000315 	stw	fp,12(sp)
  32178c:	df000304 	addi	fp,sp,12
  321790:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  321794:	e0bfff17 	ldw	r2,-4(fp)
  321798:	10000616 	blt	r2,zero,3217b4 <close+0x34>
  32179c:	e0bfff17 	ldw	r2,-4(fp)
  3217a0:	10c00324 	muli	r3,r2,12
  3217a4:	00800cb4 	movhi	r2,50
  3217a8:	108d1b04 	addi	r2,r2,13420
  3217ac:	1885883a 	add	r2,r3,r2
  3217b0:	00000106 	br	3217b8 <close+0x38>
  3217b4:	0005883a 	mov	r2,zero
  3217b8:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
  3217bc:	e0bffd17 	ldw	r2,-12(fp)
  3217c0:	10001826 	beq	r2,zero,321824 <close+0xa4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  3217c4:	e0bffd17 	ldw	r2,-12(fp)
  3217c8:	10800017 	ldw	r2,0(r2)
  3217cc:	10800417 	ldw	r2,16(r2)
  3217d0:	10000626 	beq	r2,zero,3217ec <close+0x6c>
  3217d4:	e0bffd17 	ldw	r2,-12(fp)
  3217d8:	10800017 	ldw	r2,0(r2)
  3217dc:	10800417 	ldw	r2,16(r2)
  3217e0:	e13ffd17 	ldw	r4,-12(fp)
  3217e4:	103ee83a 	callr	r2
  3217e8:	00000106 	br	3217f0 <close+0x70>
  3217ec:	0005883a 	mov	r2,zero
  3217f0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  3217f4:	e13fff17 	ldw	r4,-4(fp)
  3217f8:	0321e380 	call	321e38 <alt_release_fd>
    if (rval < 0)
  3217fc:	e0bffe17 	ldw	r2,-8(fp)
  321800:	1000060e 	bge	r2,zero,32181c <close+0x9c>
    {
      ALT_ERRNO = -rval;
  321804:	03217300 	call	321730 <alt_get_errno>
  321808:	e0fffe17 	ldw	r3,-8(fp)
  32180c:	00c7c83a 	sub	r3,zero,r3
  321810:	10c00015 	stw	r3,0(r2)
      return -1;
  321814:	00bfffc4 	movi	r2,-1
  321818:	00000606 	br	321834 <close+0xb4>
    }
    return 0;
  32181c:	0005883a 	mov	r2,zero
  321820:	00000406 	br	321834 <close+0xb4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  321824:	03217300 	call	321730 <alt_get_errno>
  321828:	00c01444 	movi	r3,81
  32182c:	10c00015 	stw	r3,0(r2)
    return -1;
  321830:	00bfffc4 	movi	r2,-1
  }
}
  321834:	e037883a 	mov	sp,fp
  321838:	dfc00117 	ldw	ra,4(sp)
  32183c:	df000017 	ldw	fp,0(sp)
  321840:	dec00204 	addi	sp,sp,8
  321844:	f800283a 	ret

00321848 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  321848:	defffe04 	addi	sp,sp,-8
  32184c:	df000115 	stw	fp,4(sp)
  321850:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  321854:	e03fff15 	stw	zero,-4(fp)
  321858:	00000506 	br	321870 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  32185c:	e0bfff17 	ldw	r2,-4(fp)
  321860:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  321864:	e0bfff17 	ldw	r2,-4(fp)
  321868:	10800804 	addi	r2,r2,32
  32186c:	e0bfff15 	stw	r2,-4(fp)
  321870:	e0bfff17 	ldw	r2,-4(fp)
  321874:	10820030 	cmpltui	r2,r2,2048
  321878:	103ff81e 	bne	r2,zero,32185c <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  32187c:	e037883a 	mov	sp,fp
  321880:	df000017 	ldw	fp,0(sp)
  321884:	dec00104 	addi	sp,sp,4
  321888:	f800283a 	ret

0032188c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  32188c:	defffc04 	addi	sp,sp,-16
  321890:	df000315 	stw	fp,12(sp)
  321894:	df000304 	addi	fp,sp,12
  321898:	e13ffd15 	stw	r4,-12(fp)
  32189c:	e17ffe15 	stw	r5,-8(fp)
  3218a0:	e1bfff15 	stw	r6,-4(fp)
  return len;
  3218a4:	e0bfff17 	ldw	r2,-4(fp)
}
  3218a8:	e037883a 	mov	sp,fp
  3218ac:	df000017 	ldw	fp,0(sp)
  3218b0:	dec00104 	addi	sp,sp,4
  3218b4:	f800283a 	ret

003218b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  3218b8:	defffe04 	addi	sp,sp,-8
  3218bc:	dfc00115 	stw	ra,4(sp)
  3218c0:	df000015 	stw	fp,0(sp)
  3218c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  3218c8:	00800cb4 	movhi	r2,50
  3218cc:	108d8504 	addi	r2,r2,13844
  3218d0:	10800017 	ldw	r2,0(r2)
  3218d4:	10000526 	beq	r2,zero,3218ec <alt_get_errno+0x34>
  3218d8:	00800cb4 	movhi	r2,50
  3218dc:	108d8504 	addi	r2,r2,13844
  3218e0:	10800017 	ldw	r2,0(r2)
  3218e4:	103ee83a 	callr	r2
  3218e8:	00000206 	br	3218f4 <alt_get_errno+0x3c>
  3218ec:	00800cb4 	movhi	r2,50
  3218f0:	10914304 	addi	r2,r2,17676
}
  3218f4:	e037883a 	mov	sp,fp
  3218f8:	dfc00117 	ldw	ra,4(sp)
  3218fc:	df000017 	ldw	fp,0(sp)
  321900:	dec00204 	addi	sp,sp,8
  321904:	f800283a 	ret

00321908 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  321908:	defffa04 	addi	sp,sp,-24
  32190c:	dfc00515 	stw	ra,20(sp)
  321910:	df000415 	stw	fp,16(sp)
  321914:	df000404 	addi	fp,sp,16
  321918:	e13ffe15 	stw	r4,-8(fp)
  32191c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  321920:	e0bffe17 	ldw	r2,-8(fp)
  321924:	10000326 	beq	r2,zero,321934 <alt_dev_llist_insert+0x2c>
  321928:	e0bffe17 	ldw	r2,-8(fp)
  32192c:	10800217 	ldw	r2,8(r2)
  321930:	1000051e 	bne	r2,zero,321948 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
  321934:	03218b80 	call	3218b8 <alt_get_errno>
  321938:	00c00584 	movi	r3,22
  32193c:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
  321940:	00bffa84 	movi	r2,-22
  321944:	00001306 	br	321994 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  321948:	e0bffe17 	ldw	r2,-8(fp)
  32194c:	e0ffff17 	ldw	r3,-4(fp)
  321950:	e0fffc15 	stw	r3,-16(fp)
  321954:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  321958:	e0bffd17 	ldw	r2,-12(fp)
  32195c:	e0fffc17 	ldw	r3,-16(fp)
  321960:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  321964:	e0bffc17 	ldw	r2,-16(fp)
  321968:	10c00017 	ldw	r3,0(r2)
  32196c:	e0bffd17 	ldw	r2,-12(fp)
  321970:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  321974:	e0bffc17 	ldw	r2,-16(fp)
  321978:	10800017 	ldw	r2,0(r2)
  32197c:	e0fffd17 	ldw	r3,-12(fp)
  321980:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  321984:	e0bffc17 	ldw	r2,-16(fp)
  321988:	e0fffd17 	ldw	r3,-12(fp)
  32198c:	10c00015 	stw	r3,0(r2)

  return 0;  
  321990:	0005883a 	mov	r2,zero
}
  321994:	e037883a 	mov	sp,fp
  321998:	dfc00117 	ldw	ra,4(sp)
  32199c:	df000017 	ldw	fp,0(sp)
  3219a0:	dec00204 	addi	sp,sp,8
  3219a4:	f800283a 	ret

003219a8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  3219a8:	defffd04 	addi	sp,sp,-12
  3219ac:	dfc00215 	stw	ra,8(sp)
  3219b0:	df000115 	stw	fp,4(sp)
  3219b4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  3219b8:	00800cb4 	movhi	r2,50
  3219bc:	1089c204 	addi	r2,r2,9992
  3219c0:	e0bfff15 	stw	r2,-4(fp)
  3219c4:	00000606 	br	3219e0 <_do_ctors+0x38>
        (*ctor) (); 
  3219c8:	e0bfff17 	ldw	r2,-4(fp)
  3219cc:	10800017 	ldw	r2,0(r2)
  3219d0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  3219d4:	e0bfff17 	ldw	r2,-4(fp)
  3219d8:	10bfff04 	addi	r2,r2,-4
  3219dc:	e0bfff15 	stw	r2,-4(fp)
  3219e0:	e0ffff17 	ldw	r3,-4(fp)
  3219e4:	00800cb4 	movhi	r2,50
  3219e8:	1089c304 	addi	r2,r2,9996
  3219ec:	18bff62e 	bgeu	r3,r2,3219c8 <_do_ctors+0x20>
        (*ctor) (); 
}
  3219f0:	e037883a 	mov	sp,fp
  3219f4:	dfc00117 	ldw	ra,4(sp)
  3219f8:	df000017 	ldw	fp,0(sp)
  3219fc:	dec00204 	addi	sp,sp,8
  321a00:	f800283a 	ret

00321a04 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  321a04:	defffd04 	addi	sp,sp,-12
  321a08:	dfc00215 	stw	ra,8(sp)
  321a0c:	df000115 	stw	fp,4(sp)
  321a10:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  321a14:	00800cb4 	movhi	r2,50
  321a18:	1089c204 	addi	r2,r2,9992
  321a1c:	e0bfff15 	stw	r2,-4(fp)
  321a20:	00000606 	br	321a3c <_do_dtors+0x38>
        (*dtor) (); 
  321a24:	e0bfff17 	ldw	r2,-4(fp)
  321a28:	10800017 	ldw	r2,0(r2)
  321a2c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  321a30:	e0bfff17 	ldw	r2,-4(fp)
  321a34:	10bfff04 	addi	r2,r2,-4
  321a38:	e0bfff15 	stw	r2,-4(fp)
  321a3c:	e0ffff17 	ldw	r3,-4(fp)
  321a40:	00800cb4 	movhi	r2,50
  321a44:	1089c304 	addi	r2,r2,9996
  321a48:	18bff62e 	bgeu	r3,r2,321a24 <_do_dtors+0x20>
        (*dtor) (); 
}
  321a4c:	e037883a 	mov	sp,fp
  321a50:	dfc00117 	ldw	ra,4(sp)
  321a54:	df000017 	ldw	fp,0(sp)
  321a58:	dec00204 	addi	sp,sp,8
  321a5c:	f800283a 	ret

00321a60 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  321a60:	defffe04 	addi	sp,sp,-8
  321a64:	dfc00115 	stw	ra,4(sp)
  321a68:	df000015 	stw	fp,0(sp)
  321a6c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  321a70:	0009883a 	mov	r4,zero
  321a74:	01440004 	movi	r5,4096
  321a78:	03221100 	call	322110 <alt_icache_flush>
#endif
}
  321a7c:	e037883a 	mov	sp,fp
  321a80:	dfc00117 	ldw	ra,4(sp)
  321a84:	df000017 	ldw	fp,0(sp)
  321a88:	dec00204 	addi	sp,sp,8
  321a8c:	f800283a 	ret

00321a90 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  321a90:	defff904 	addi	sp,sp,-28
  321a94:	dfc00615 	stw	ra,24(sp)
  321a98:	df000515 	stw	fp,20(sp)
  321a9c:	df000504 	addi	fp,sp,20
  321aa0:	e13ffc15 	stw	r4,-16(fp)
  321aa4:	e17ffd15 	stw	r5,-12(fp)
  321aa8:	e1bffe15 	stw	r6,-8(fp)
  321aac:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  321ab0:	e13ffd17 	ldw	r4,-12(fp)
  321ab4:	e17ffe17 	ldw	r5,-8(fp)
  321ab8:	e1bfff17 	ldw	r6,-4(fp)
  321abc:	0321ce40 	call	321ce4 <open>
  321ac0:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  321ac4:	e0bffb17 	ldw	r2,-20(fp)
  321ac8:	10001c16 	blt	r2,zero,321b3c <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
  321acc:	00c00cb4 	movhi	r3,50
  321ad0:	18cd1b04 	addi	r3,r3,13420
  321ad4:	e0bffb17 	ldw	r2,-20(fp)
  321ad8:	10800324 	muli	r2,r2,12
  321adc:	1885883a 	add	r2,r3,r2
  321ae0:	10c00017 	ldw	r3,0(r2)
  321ae4:	e0bffc17 	ldw	r2,-16(fp)
  321ae8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  321aec:	00c00cb4 	movhi	r3,50
  321af0:	18cd1b04 	addi	r3,r3,13420
  321af4:	e0bffb17 	ldw	r2,-20(fp)
  321af8:	10800324 	muli	r2,r2,12
  321afc:	1885883a 	add	r2,r3,r2
  321b00:	10800104 	addi	r2,r2,4
  321b04:	10c00017 	ldw	r3,0(r2)
  321b08:	e0bffc17 	ldw	r2,-16(fp)
  321b0c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  321b10:	00c00cb4 	movhi	r3,50
  321b14:	18cd1b04 	addi	r3,r3,13420
  321b18:	e0bffb17 	ldw	r2,-20(fp)
  321b1c:	10800324 	muli	r2,r2,12
  321b20:	1885883a 	add	r2,r3,r2
  321b24:	10800204 	addi	r2,r2,8
  321b28:	10c00017 	ldw	r3,0(r2)
  321b2c:	e0bffc17 	ldw	r2,-16(fp)
  321b30:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  321b34:	e13ffb17 	ldw	r4,-20(fp)
  321b38:	0321e380 	call	321e38 <alt_release_fd>
  }
} 
  321b3c:	e037883a 	mov	sp,fp
  321b40:	dfc00117 	ldw	ra,4(sp)
  321b44:	df000017 	ldw	fp,0(sp)
  321b48:	dec00204 	addi	sp,sp,8
  321b4c:	f800283a 	ret

00321b50 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  321b50:	defffb04 	addi	sp,sp,-20
  321b54:	dfc00415 	stw	ra,16(sp)
  321b58:	df000315 	stw	fp,12(sp)
  321b5c:	df000304 	addi	fp,sp,12
  321b60:	e13ffd15 	stw	r4,-12(fp)
  321b64:	e17ffe15 	stw	r5,-8(fp)
  321b68:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  321b6c:	01000cb4 	movhi	r4,50
  321b70:	210d1e04 	addi	r4,r4,13432
  321b74:	e17ffd17 	ldw	r5,-12(fp)
  321b78:	01800044 	movi	r6,1
  321b7c:	01c07fc4 	movi	r7,511
  321b80:	0321a900 	call	321a90 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  321b84:	01000cb4 	movhi	r4,50
  321b88:	210d1b04 	addi	r4,r4,13420
  321b8c:	e17ffe17 	ldw	r5,-8(fp)
  321b90:	000d883a 	mov	r6,zero
  321b94:	01c07fc4 	movi	r7,511
  321b98:	0321a900 	call	321a90 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  321b9c:	01000cb4 	movhi	r4,50
  321ba0:	210d2104 	addi	r4,r4,13444
  321ba4:	e17fff17 	ldw	r5,-4(fp)
  321ba8:	01800044 	movi	r6,1
  321bac:	01c07fc4 	movi	r7,511
  321bb0:	0321a900 	call	321a90 <alt_open_fd>
}  
  321bb4:	e037883a 	mov	sp,fp
  321bb8:	dfc00117 	ldw	ra,4(sp)
  321bbc:	df000017 	ldw	fp,0(sp)
  321bc0:	dec00204 	addi	sp,sp,8
  321bc4:	f800283a 	ret

00321bc8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  321bc8:	defffe04 	addi	sp,sp,-8
  321bcc:	dfc00115 	stw	ra,4(sp)
  321bd0:	df000015 	stw	fp,0(sp)
  321bd4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  321bd8:	00800cb4 	movhi	r2,50
  321bdc:	108d8504 	addi	r2,r2,13844
  321be0:	10800017 	ldw	r2,0(r2)
  321be4:	10000526 	beq	r2,zero,321bfc <alt_get_errno+0x34>
  321be8:	00800cb4 	movhi	r2,50
  321bec:	108d8504 	addi	r2,r2,13844
  321bf0:	10800017 	ldw	r2,0(r2)
  321bf4:	103ee83a 	callr	r2
  321bf8:	00000206 	br	321c04 <alt_get_errno+0x3c>
  321bfc:	00800cb4 	movhi	r2,50
  321c00:	10914304 	addi	r2,r2,17676
}
  321c04:	e037883a 	mov	sp,fp
  321c08:	dfc00117 	ldw	ra,4(sp)
  321c0c:	df000017 	ldw	fp,0(sp)
  321c10:	dec00204 	addi	sp,sp,8
  321c14:	f800283a 	ret

00321c18 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  321c18:	defffd04 	addi	sp,sp,-12
  321c1c:	df000215 	stw	fp,8(sp)
  321c20:	df000204 	addi	fp,sp,8
  321c24:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  321c28:	e0bfff17 	ldw	r2,-4(fp)
  321c2c:	10800217 	ldw	r2,8(r2)
  321c30:	10d00034 	orhi	r3,r2,16384
  321c34:	e0bfff17 	ldw	r2,-4(fp)
  321c38:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  321c3c:	e03ffe15 	stw	zero,-8(fp)
  321c40:	00001d06 	br	321cb8 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  321c44:	00c00cb4 	movhi	r3,50
  321c48:	18cd1b04 	addi	r3,r3,13420
  321c4c:	e0bffe17 	ldw	r2,-8(fp)
  321c50:	10800324 	muli	r2,r2,12
  321c54:	1885883a 	add	r2,r3,r2
  321c58:	10c00017 	ldw	r3,0(r2)
  321c5c:	e0bfff17 	ldw	r2,-4(fp)
  321c60:	10800017 	ldw	r2,0(r2)
  321c64:	1880111e 	bne	r3,r2,321cac <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  321c68:	00c00cb4 	movhi	r3,50
  321c6c:	18cd1b04 	addi	r3,r3,13420
  321c70:	e0bffe17 	ldw	r2,-8(fp)
  321c74:	10800324 	muli	r2,r2,12
  321c78:	1885883a 	add	r2,r3,r2
  321c7c:	10800204 	addi	r2,r2,8
  321c80:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  321c84:	1000090e 	bge	r2,zero,321cac <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
  321c88:	e0bffe17 	ldw	r2,-8(fp)
  321c8c:	10c00324 	muli	r3,r2,12
  321c90:	00800cb4 	movhi	r2,50
  321c94:	108d1b04 	addi	r2,r2,13420
  321c98:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  321c9c:	e0bfff17 	ldw	r2,-4(fp)
  321ca0:	18800226 	beq	r3,r2,321cac <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  321ca4:	00bffcc4 	movi	r2,-13
  321ca8:	00000a06 	br	321cd4 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  321cac:	e0bffe17 	ldw	r2,-8(fp)
  321cb0:	10800044 	addi	r2,r2,1
  321cb4:	e0bffe15 	stw	r2,-8(fp)
  321cb8:	00800cb4 	movhi	r2,50
  321cbc:	108d8404 	addi	r2,r2,13840
  321cc0:	10800017 	ldw	r2,0(r2)
  321cc4:	1007883a 	mov	r3,r2
  321cc8:	e0bffe17 	ldw	r2,-8(fp)
  321ccc:	18bfdd2e 	bgeu	r3,r2,321c44 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  321cd0:	0005883a 	mov	r2,zero
}
  321cd4:	e037883a 	mov	sp,fp
  321cd8:	df000017 	ldw	fp,0(sp)
  321cdc:	dec00104 	addi	sp,sp,4
  321ce0:	f800283a 	ret

00321ce4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  321ce4:	defff604 	addi	sp,sp,-40
  321ce8:	dfc00915 	stw	ra,36(sp)
  321cec:	df000815 	stw	fp,32(sp)
  321cf0:	df000804 	addi	fp,sp,32
  321cf4:	e13ffd15 	stw	r4,-12(fp)
  321cf8:	e17ffe15 	stw	r5,-8(fp)
  321cfc:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  321d00:	00bfffc4 	movi	r2,-1
  321d04:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
  321d08:	00bffb44 	movi	r2,-19
  321d0c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
  321d10:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  321d14:	e13ffd17 	ldw	r4,-12(fp)
  321d18:	01400cb4 	movhi	r5,50
  321d1c:	294d8204 	addi	r5,r5,13832
  321d20:	0321eb80 	call	321eb8 <alt_find_dev>
  321d24:	e0bff815 	stw	r2,-32(fp)
  321d28:	e0bff817 	ldw	r2,-32(fp)
  321d2c:	1000051e 	bne	r2,zero,321d44 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  321d30:	e13ffd17 	ldw	r4,-12(fp)
  321d34:	0321f480 	call	321f48 <alt_find_file>
  321d38:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
  321d3c:	00800044 	movi	r2,1
  321d40:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  321d44:	e0bff817 	ldw	r2,-32(fp)
  321d48:	10002926 	beq	r2,zero,321df0 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
  321d4c:	e13ff817 	ldw	r4,-32(fp)
  321d50:	032205c0 	call	32205c <alt_get_fd>
  321d54:	e0bff915 	stw	r2,-28(fp)
  321d58:	e0bff917 	ldw	r2,-28(fp)
  321d5c:	1000030e 	bge	r2,zero,321d6c <open+0x88>
    {
      status = index;
  321d60:	e0bff917 	ldw	r2,-28(fp)
  321d64:	e0bffa15 	stw	r2,-24(fp)
  321d68:	00002306 	br	321df8 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
  321d6c:	e0bff917 	ldw	r2,-28(fp)
  321d70:	10c00324 	muli	r3,r2,12
  321d74:	00800cb4 	movhi	r2,50
  321d78:	108d1b04 	addi	r2,r2,13420
  321d7c:	1885883a 	add	r2,r3,r2
  321d80:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  321d84:	e0fffe17 	ldw	r3,-8(fp)
  321d88:	00900034 	movhi	r2,16384
  321d8c:	10bfffc4 	addi	r2,r2,-1
  321d90:	1886703a 	and	r3,r3,r2
  321d94:	e0bffc17 	ldw	r2,-16(fp)
  321d98:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  321d9c:	e0bffb17 	ldw	r2,-20(fp)
  321da0:	1000051e 	bne	r2,zero,321db8 <open+0xd4>
  321da4:	e13ffc17 	ldw	r4,-16(fp)
  321da8:	0321c180 	call	321c18 <alt_file_locked>
  321dac:	e0bffa15 	stw	r2,-24(fp)
  321db0:	e0bffa17 	ldw	r2,-24(fp)
  321db4:	10001016 	blt	r2,zero,321df8 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  321db8:	e0bff817 	ldw	r2,-32(fp)
  321dbc:	10800317 	ldw	r2,12(r2)
  321dc0:	10000826 	beq	r2,zero,321de4 <open+0x100>
  321dc4:	e0bff817 	ldw	r2,-32(fp)
  321dc8:	10800317 	ldw	r2,12(r2)
  321dcc:	e13ffc17 	ldw	r4,-16(fp)
  321dd0:	e17ffd17 	ldw	r5,-12(fp)
  321dd4:	e1bffe17 	ldw	r6,-8(fp)
  321dd8:	e1ffff17 	ldw	r7,-4(fp)
  321ddc:	103ee83a 	callr	r2
  321de0:	00000106 	br	321de8 <open+0x104>
  321de4:	0005883a 	mov	r2,zero
  321de8:	e0bffa15 	stw	r2,-24(fp)
  321dec:	00000206 	br	321df8 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
  321df0:	00bffb44 	movi	r2,-19
  321df4:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  321df8:	e0bffa17 	ldw	r2,-24(fp)
  321dfc:	1000080e 	bge	r2,zero,321e20 <open+0x13c>
  {
    alt_release_fd (index);  
  321e00:	e13ff917 	ldw	r4,-28(fp)
  321e04:	0321e380 	call	321e38 <alt_release_fd>
    ALT_ERRNO = -status;
  321e08:	0321bc80 	call	321bc8 <alt_get_errno>
  321e0c:	e0fffa17 	ldw	r3,-24(fp)
  321e10:	00c7c83a 	sub	r3,zero,r3
  321e14:	10c00015 	stw	r3,0(r2)
    return -1;
  321e18:	00bfffc4 	movi	r2,-1
  321e1c:	00000106 	br	321e24 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
  321e20:	e0bff917 	ldw	r2,-28(fp)
}
  321e24:	e037883a 	mov	sp,fp
  321e28:	dfc00117 	ldw	ra,4(sp)
  321e2c:	df000017 	ldw	fp,0(sp)
  321e30:	dec00204 	addi	sp,sp,8
  321e34:	f800283a 	ret

00321e38 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  321e38:	defffe04 	addi	sp,sp,-8
  321e3c:	df000115 	stw	fp,4(sp)
  321e40:	df000104 	addi	fp,sp,4
  321e44:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  321e48:	e0bfff17 	ldw	r2,-4(fp)
  321e4c:	108000d0 	cmplti	r2,r2,3
  321e50:	10000d1e 	bne	r2,zero,321e88 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  321e54:	00c00cb4 	movhi	r3,50
  321e58:	18cd1b04 	addi	r3,r3,13420
  321e5c:	e0bfff17 	ldw	r2,-4(fp)
  321e60:	10800324 	muli	r2,r2,12
  321e64:	1885883a 	add	r2,r3,r2
  321e68:	10800204 	addi	r2,r2,8
  321e6c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  321e70:	00c00cb4 	movhi	r3,50
  321e74:	18cd1b04 	addi	r3,r3,13420
  321e78:	e0bfff17 	ldw	r2,-4(fp)
  321e7c:	10800324 	muli	r2,r2,12
  321e80:	1885883a 	add	r2,r3,r2
  321e84:	10000015 	stw	zero,0(r2)
  }
}
  321e88:	e037883a 	mov	sp,fp
  321e8c:	df000017 	ldw	fp,0(sp)
  321e90:	dec00104 	addi	sp,sp,4
  321e94:	f800283a 	ret

00321e98 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
  321e98:	deffff04 	addi	sp,sp,-4
  321e9c:	df000015 	stw	fp,0(sp)
  321ea0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  321ea4:	000170fa 	wrctl	ienable,zero
}
  321ea8:	e037883a 	mov	sp,fp
  321eac:	df000017 	ldw	fp,0(sp)
  321eb0:	dec00104 	addi	sp,sp,4
  321eb4:	f800283a 	ret

00321eb8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  321eb8:	defffa04 	addi	sp,sp,-24
  321ebc:	dfc00515 	stw	ra,20(sp)
  321ec0:	df000415 	stw	fp,16(sp)
  321ec4:	df000404 	addi	fp,sp,16
  321ec8:	e13ffe15 	stw	r4,-8(fp)
  321ecc:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
  321ed0:	e0bfff17 	ldw	r2,-4(fp)
  321ed4:	10800017 	ldw	r2,0(r2)
  321ed8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  321edc:	e13ffe17 	ldw	r4,-8(fp)
  321ee0:	03222180 	call	322218 <strlen>
  321ee4:	10800044 	addi	r2,r2,1
  321ee8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  321eec:	00000d06 	br	321f24 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  321ef0:	e0bffc17 	ldw	r2,-16(fp)
  321ef4:	10c00217 	ldw	r3,8(r2)
  321ef8:	e0bffd17 	ldw	r2,-12(fp)
  321efc:	1809883a 	mov	r4,r3
  321f00:	e17ffe17 	ldw	r5,-8(fp)
  321f04:	100d883a 	mov	r6,r2
  321f08:	03221d00 	call	3221d0 <memcmp>
  321f0c:	1000021e 	bne	r2,zero,321f18 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  321f10:	e0bffc17 	ldw	r2,-16(fp)
  321f14:	00000706 	br	321f34 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  321f18:	e0bffc17 	ldw	r2,-16(fp)
  321f1c:	10800017 	ldw	r2,0(r2)
  321f20:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  321f24:	e0fffc17 	ldw	r3,-16(fp)
  321f28:	e0bfff17 	ldw	r2,-4(fp)
  321f2c:	18bff01e 	bne	r3,r2,321ef0 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  321f30:	0005883a 	mov	r2,zero
}
  321f34:	e037883a 	mov	sp,fp
  321f38:	dfc00117 	ldw	ra,4(sp)
  321f3c:	df000017 	ldw	fp,0(sp)
  321f40:	dec00204 	addi	sp,sp,8
  321f44:	f800283a 	ret

00321f48 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  321f48:	defffb04 	addi	sp,sp,-20
  321f4c:	dfc00415 	stw	ra,16(sp)
  321f50:	df000315 	stw	fp,12(sp)
  321f54:	df000304 	addi	fp,sp,12
  321f58:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  321f5c:	00800cb4 	movhi	r2,50
  321f60:	108d8004 	addi	r2,r2,13824
  321f64:	10800017 	ldw	r2,0(r2)
  321f68:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  321f6c:	00003106 	br	322034 <alt_find_file+0xec>
  {
    len = strlen(next->name);
  321f70:	e0bffd17 	ldw	r2,-12(fp)
  321f74:	10800217 	ldw	r2,8(r2)
  321f78:	1009883a 	mov	r4,r2
  321f7c:	03222180 	call	322218 <strlen>
  321f80:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  321f84:	e0bffd17 	ldw	r2,-12(fp)
  321f88:	10c00217 	ldw	r3,8(r2)
  321f8c:	e0bffe17 	ldw	r2,-8(fp)
  321f90:	10bfffc4 	addi	r2,r2,-1
  321f94:	1885883a 	add	r2,r3,r2
  321f98:	10800003 	ldbu	r2,0(r2)
  321f9c:	10803fcc 	andi	r2,r2,255
  321fa0:	1080201c 	xori	r2,r2,128
  321fa4:	10bfe004 	addi	r2,r2,-128
  321fa8:	10800bd8 	cmpnei	r2,r2,47
  321fac:	1000031e 	bne	r2,zero,321fbc <alt_find_file+0x74>
    {
      len -= 1;
  321fb0:	e0bffe17 	ldw	r2,-8(fp)
  321fb4:	10bfffc4 	addi	r2,r2,-1
  321fb8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  321fbc:	e0bffe17 	ldw	r2,-8(fp)
  321fc0:	e0ffff17 	ldw	r3,-4(fp)
  321fc4:	1885883a 	add	r2,r3,r2
  321fc8:	10800003 	ldbu	r2,0(r2)
  321fcc:	10803fcc 	andi	r2,r2,255
  321fd0:	1080201c 	xori	r2,r2,128
  321fd4:	10bfe004 	addi	r2,r2,-128
  321fd8:	10800be0 	cmpeqi	r2,r2,47
  321fdc:	1000081e 	bne	r2,zero,322000 <alt_find_file+0xb8>
  321fe0:	e0bffe17 	ldw	r2,-8(fp)
  321fe4:	e0ffff17 	ldw	r3,-4(fp)
  321fe8:	1885883a 	add	r2,r3,r2
  321fec:	10800003 	ldbu	r2,0(r2)
  321ff0:	10803fcc 	andi	r2,r2,255
  321ff4:	1080201c 	xori	r2,r2,128
  321ff8:	10bfe004 	addi	r2,r2,-128
  321ffc:	10000a1e 	bne	r2,zero,322028 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
  322000:	e0bffd17 	ldw	r2,-12(fp)
  322004:	10c00217 	ldw	r3,8(r2)
  322008:	e0bffe17 	ldw	r2,-8(fp)
  32200c:	1809883a 	mov	r4,r3
  322010:	e17fff17 	ldw	r5,-4(fp)
  322014:	100d883a 	mov	r6,r2
  322018:	03221d00 	call	3221d0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  32201c:	1000021e 	bne	r2,zero,322028 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  322020:	e0bffd17 	ldw	r2,-12(fp)
  322024:	00000806 	br	322048 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
  322028:	e0bffd17 	ldw	r2,-12(fp)
  32202c:	10800017 	ldw	r2,0(r2)
  322030:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  322034:	e0fffd17 	ldw	r3,-12(fp)
  322038:	00800cb4 	movhi	r2,50
  32203c:	108d8004 	addi	r2,r2,13824
  322040:	18bfcb1e 	bne	r3,r2,321f70 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  322044:	0005883a 	mov	r2,zero
}
  322048:	e037883a 	mov	sp,fp
  32204c:	dfc00117 	ldw	ra,4(sp)
  322050:	df000017 	ldw	fp,0(sp)
  322054:	dec00204 	addi	sp,sp,8
  322058:	f800283a 	ret

0032205c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  32205c:	defffc04 	addi	sp,sp,-16
  322060:	df000315 	stw	fp,12(sp)
  322064:	df000304 	addi	fp,sp,12
  322068:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  32206c:	00bffa04 	movi	r2,-24
  322070:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  322074:	e03ffd15 	stw	zero,-12(fp)
  322078:	00001d06 	br	3220f0 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
  32207c:	00c00cb4 	movhi	r3,50
  322080:	18cd1b04 	addi	r3,r3,13420
  322084:	e0bffd17 	ldw	r2,-12(fp)
  322088:	10800324 	muli	r2,r2,12
  32208c:	1885883a 	add	r2,r3,r2
  322090:	10800017 	ldw	r2,0(r2)
  322094:	1000131e 	bne	r2,zero,3220e4 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
  322098:	00c00cb4 	movhi	r3,50
  32209c:	18cd1b04 	addi	r3,r3,13420
  3220a0:	e0bffd17 	ldw	r2,-12(fp)
  3220a4:	10800324 	muli	r2,r2,12
  3220a8:	1885883a 	add	r2,r3,r2
  3220ac:	e0ffff17 	ldw	r3,-4(fp)
  3220b0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
  3220b4:	00800cb4 	movhi	r2,50
  3220b8:	108d8404 	addi	r2,r2,13840
  3220bc:	10c00017 	ldw	r3,0(r2)
  3220c0:	e0bffd17 	ldw	r2,-12(fp)
  3220c4:	1880040e 	bge	r3,r2,3220d8 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
  3220c8:	00800cb4 	movhi	r2,50
  3220cc:	108d8404 	addi	r2,r2,13840
  3220d0:	e0fffd17 	ldw	r3,-12(fp)
  3220d4:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
  3220d8:	e0bffd17 	ldw	r2,-12(fp)
  3220dc:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
  3220e0:	00000606 	br	3220fc <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  3220e4:	e0bffd17 	ldw	r2,-12(fp)
  3220e8:	10800044 	addi	r2,r2,1
  3220ec:	e0bffd15 	stw	r2,-12(fp)
  3220f0:	e0bffd17 	ldw	r2,-12(fp)
  3220f4:	10800810 	cmplti	r2,r2,32
  3220f8:	103fe01e 	bne	r2,zero,32207c <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  3220fc:	e0bffe17 	ldw	r2,-8(fp)
}
  322100:	e037883a 	mov	sp,fp
  322104:	df000017 	ldw	fp,0(sp)
  322108:	dec00104 	addi	sp,sp,4
  32210c:	f800283a 	ret

00322110 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  322110:	defffb04 	addi	sp,sp,-20
  322114:	df000415 	stw	fp,16(sp)
  322118:	df000404 	addi	fp,sp,16
  32211c:	e13ffe15 	stw	r4,-8(fp)
  322120:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  322124:	e0bfff17 	ldw	r2,-4(fp)
  322128:	10840070 	cmpltui	r2,r2,4097
  32212c:	1000021e 	bne	r2,zero,322138 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  322130:	00840004 	movi	r2,4096
  322134:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  322138:	e0fffe17 	ldw	r3,-8(fp)
  32213c:	e0bfff17 	ldw	r2,-4(fp)
  322140:	1885883a 	add	r2,r3,r2
  322144:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  322148:	e0bffe17 	ldw	r2,-8(fp)
  32214c:	e0bffc15 	stw	r2,-16(fp)
  322150:	00000506 	br	322168 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  322154:	e0bffc17 	ldw	r2,-16(fp)
  322158:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  32215c:	e0bffc17 	ldw	r2,-16(fp)
  322160:	10800804 	addi	r2,r2,32
  322164:	e0bffc15 	stw	r2,-16(fp)
  322168:	e0fffc17 	ldw	r3,-16(fp)
  32216c:	e0bffd17 	ldw	r2,-12(fp)
  322170:	18bff836 	bltu	r3,r2,322154 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  322174:	e0bffe17 	ldw	r2,-8(fp)
  322178:	108007cc 	andi	r2,r2,31
  32217c:	10000226 	beq	r2,zero,322188 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  322180:	e0bffc17 	ldw	r2,-16(fp)
  322184:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  322188:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  32218c:	e037883a 	mov	sp,fp
  322190:	df000017 	ldw	fp,0(sp)
  322194:	dec00104 	addi	sp,sp,4
  322198:	f800283a 	ret

0032219c <atexit>:
  32219c:	200b883a 	mov	r5,r4
  3221a0:	000d883a 	mov	r6,zero
  3221a4:	0009883a 	mov	r4,zero
  3221a8:	000f883a 	mov	r7,zero
  3221ac:	03222401 	jmpi	322240 <__register_exitproc>

003221b0 <exit>:
  3221b0:	defffe04 	addi	sp,sp,-8
  3221b4:	000b883a 	mov	r5,zero
  3221b8:	dc000015 	stw	r16,0(sp)
  3221bc:	dfc00115 	stw	ra,4(sp)
  3221c0:	2021883a 	mov	r16,r4
  3221c4:	03223c80 	call	3223c8 <__call_exitprocs>
  3221c8:	8009883a 	mov	r4,r16
  3221cc:	03226d00 	call	3226d0 <_exit>

003221d0 <memcmp>:
  3221d0:	30000d26 	beq	r6,zero,322208 <memcmp+0x38>
  3221d4:	20c00003 	ldbu	r3,0(r4)
  3221d8:	28800003 	ldbu	r2,0(r5)
  3221dc:	18800c1e 	bne	r3,r2,322210 <memcmp+0x40>
  3221e0:	31bfff84 	addi	r6,r6,-2
  3221e4:	01ffffc4 	movi	r7,-1
  3221e8:	00000406 	br	3221fc <memcmp+0x2c>
  3221ec:	20c00003 	ldbu	r3,0(r4)
  3221f0:	28800003 	ldbu	r2,0(r5)
  3221f4:	31bfffc4 	addi	r6,r6,-1
  3221f8:	1880051e 	bne	r3,r2,322210 <memcmp+0x40>
  3221fc:	21000044 	addi	r4,r4,1
  322200:	29400044 	addi	r5,r5,1
  322204:	31fff91e 	bne	r6,r7,3221ec <memcmp+0x1c>
  322208:	0005883a 	mov	r2,zero
  32220c:	f800283a 	ret
  322210:	1885c83a 	sub	r2,r3,r2
  322214:	f800283a 	ret

00322218 <strlen>:
  322218:	20800007 	ldb	r2,0(r4)
  32221c:	10000626 	beq	r2,zero,322238 <strlen+0x20>
  322220:	2005883a 	mov	r2,r4
  322224:	10800044 	addi	r2,r2,1
  322228:	10c00007 	ldb	r3,0(r2)
  32222c:	183ffd1e 	bne	r3,zero,322224 <strlen+0xc>
  322230:	1105c83a 	sub	r2,r2,r4
  322234:	f800283a 	ret
  322238:	0005883a 	mov	r2,zero
  32223c:	f800283a 	ret

00322240 <__register_exitproc>:
  322240:	defff904 	addi	sp,sp,-28
  322244:	00800cb4 	movhi	r2,50
  322248:	108d7b04 	addi	r2,r2,13804
  32224c:	dc400415 	stw	r17,16(sp)
  322250:	14400017 	ldw	r17,0(r2)
  322254:	dc000315 	stw	r16,12(sp)
  322258:	dc800515 	stw	r18,20(sp)
  32225c:	8c000c17 	ldw	r16,48(r17)
  322260:	dfc00615 	stw	ra,24(sp)
  322264:	2025883a 	mov	r18,r4
  322268:	80004226 	beq	r16,zero,322374 <__register_exitproc+0x134>
  32226c:	80800117 	ldw	r2,4(r16)
  322270:	00c007c4 	movi	r3,31
  322274:	1880180e 	bge	r3,r2,3222d8 <__register_exitproc+0x98>
  322278:	00800cb4 	movhi	r2,50
  32227c:	1080fd04 	addi	r2,r2,1012
  322280:	1000071e 	bne	r2,zero,3222a0 <__register_exitproc+0x60>
  322284:	00bfffc4 	movi	r2,-1
  322288:	dfc00617 	ldw	ra,24(sp)
  32228c:	dc800517 	ldw	r18,20(sp)
  322290:	dc400417 	ldw	r17,16(sp)
  322294:	dc000317 	ldw	r16,12(sp)
  322298:	dec00704 	addi	sp,sp,28
  32229c:	f800283a 	ret
  3222a0:	01002304 	movi	r4,140
  3222a4:	d9400015 	stw	r5,0(sp)
  3222a8:	d9800115 	stw	r6,4(sp)
  3222ac:	d9c00215 	stw	r7,8(sp)
  3222b0:	03203f40 	call	3203f4 <malloc>
  3222b4:	1021883a 	mov	r16,r2
  3222b8:	d9400017 	ldw	r5,0(sp)
  3222bc:	d9800117 	ldw	r6,4(sp)
  3222c0:	d9c00217 	ldw	r7,8(sp)
  3222c4:	103fef26 	beq	r2,zero,322284 <__register_exitproc+0x44>
  3222c8:	88800c17 	ldw	r2,48(r17)
  3222cc:	80000115 	stw	zero,4(r16)
  3222d0:	80800015 	stw	r2,0(r16)
  3222d4:	8c000c15 	stw	r16,48(r17)
  3222d8:	90001726 	beq	r18,zero,322338 <__register_exitproc+0xf8>
  3222dc:	80802217 	ldw	r2,136(r16)
  3222e0:	10002826 	beq	r2,zero,322384 <__register_exitproc+0x144>
  3222e4:	12804017 	ldw	r10,256(r2)
  3222e8:	80c00117 	ldw	r3,4(r16)
  3222ec:	02400044 	movi	r9,1
  3222f0:	48d2983a 	sll	r9,r9,r3
  3222f4:	19000804 	addi	r4,r3,32
  3222f8:	18d1883a 	add	r8,r3,r3
  3222fc:	2109883a 	add	r4,r4,r4
  322300:	4211883a 	add	r8,r8,r8
  322304:	2109883a 	add	r4,r4,r4
  322308:	1109883a 	add	r4,r2,r4
  32230c:	1211883a 	add	r8,r2,r8
  322310:	5254b03a 	or	r10,r10,r9
  322314:	21c00015 	stw	r7,0(r4)
  322318:	41800015 	stw	r6,0(r8)
  32231c:	12804015 	stw	r10,256(r2)
  322320:	01000084 	movi	r4,2
  322324:	9100051e 	bne	r18,r4,32233c <__register_exitproc+0xfc>
  322328:	11004117 	ldw	r4,260(r2)
  32232c:	2252b03a 	or	r9,r4,r9
  322330:	12404115 	stw	r9,260(r2)
  322334:	00000106 	br	32233c <__register_exitproc+0xfc>
  322338:	80c00117 	ldw	r3,4(r16)
  32233c:	18800084 	addi	r2,r3,2
  322340:	1085883a 	add	r2,r2,r2
  322344:	1085883a 	add	r2,r2,r2
  322348:	8085883a 	add	r2,r16,r2
  32234c:	18c00044 	addi	r3,r3,1
  322350:	11400015 	stw	r5,0(r2)
  322354:	0005883a 	mov	r2,zero
  322358:	80c00115 	stw	r3,4(r16)
  32235c:	dfc00617 	ldw	ra,24(sp)
  322360:	dc800517 	ldw	r18,20(sp)
  322364:	dc400417 	ldw	r17,16(sp)
  322368:	dc000317 	ldw	r16,12(sp)
  32236c:	dec00704 	addi	sp,sp,28
  322370:	f800283a 	ret
  322374:	04000cb4 	movhi	r16,50
  322378:	84115104 	addi	r16,r16,17732
  32237c:	8c000c15 	stw	r16,48(r17)
  322380:	003fba06 	br	32226c <__register_exitproc+0x2c>
  322384:	00800cb4 	movhi	r2,50
  322388:	1080fd04 	addi	r2,r2,1012
  32238c:	103fbd26 	beq	r2,zero,322284 <__register_exitproc+0x44>
  322390:	d9400015 	stw	r5,0(sp)
  322394:	d9800115 	stw	r6,4(sp)
  322398:	d9c00215 	stw	r7,8(sp)
  32239c:	01004204 	movi	r4,264
  3223a0:	103ee83a 	callr	r2
  3223a4:	d9400017 	ldw	r5,0(sp)
  3223a8:	d9800117 	ldw	r6,4(sp)
  3223ac:	d9c00217 	ldw	r7,8(sp)
  3223b0:	103fb426 	beq	r2,zero,322284 <__register_exitproc+0x44>
  3223b4:	10004015 	stw	zero,256(r2)
  3223b8:	10004115 	stw	zero,260(r2)
  3223bc:	80802215 	stw	r2,136(r16)
  3223c0:	0015883a 	mov	r10,zero
  3223c4:	003fc806 	br	3222e8 <__register_exitproc+0xa8>

003223c8 <__call_exitprocs>:
  3223c8:	00800cb4 	movhi	r2,50
  3223cc:	108d7b04 	addi	r2,r2,13804
  3223d0:	10800017 	ldw	r2,0(r2)
  3223d4:	defff204 	addi	sp,sp,-56
  3223d8:	df000c15 	stw	fp,48(sp)
  3223dc:	d8800015 	stw	r2,0(sp)
  3223e0:	10800c04 	addi	r2,r2,48
  3223e4:	dd400915 	stw	r21,36(sp)
  3223e8:	dfc00d15 	stw	ra,52(sp)
  3223ec:	ddc00b15 	stw	r23,44(sp)
  3223f0:	dd800a15 	stw	r22,40(sp)
  3223f4:	dd000815 	stw	r20,32(sp)
  3223f8:	dcc00715 	stw	r19,28(sp)
  3223fc:	dc800615 	stw	r18,24(sp)
  322400:	dc400515 	stw	r17,20(sp)
  322404:	dc000415 	stw	r16,16(sp)
  322408:	d9000115 	stw	r4,4(sp)
  32240c:	2839883a 	mov	fp,r5
  322410:	d8800215 	stw	r2,8(sp)
  322414:	057fffc4 	movi	r21,-1
  322418:	d8800017 	ldw	r2,0(sp)
  32241c:	dd800217 	ldw	r22,8(sp)
  322420:	15c00c17 	ldw	r23,48(r2)
  322424:	b8001b26 	beq	r23,zero,322494 <__call_exitprocs+0xcc>
  322428:	b9000117 	ldw	r4,4(r23)
  32242c:	bd002217 	ldw	r20,136(r23)
  322430:	243fffc4 	addi	r16,r4,-1
  322434:	80001416 	blt	r16,zero,322488 <__call_exitprocs+0xc0>
  322438:	244007c4 	addi	r17,r4,31
  32243c:	21000044 	addi	r4,r4,1
  322440:	8c63883a 	add	r17,r17,r17
  322444:	8427883a 	add	r19,r16,r16
  322448:	2109883a 	add	r4,r4,r4
  32244c:	8c63883a 	add	r17,r17,r17
  322450:	9ce7883a 	add	r19,r19,r19
  322454:	2109883a 	add	r4,r4,r4
  322458:	a463883a 	add	r17,r20,r17
  32245c:	a4e7883a 	add	r19,r20,r19
  322460:	b925883a 	add	r18,r23,r4
  322464:	e0001726 	beq	fp,zero,3224c4 <__call_exitprocs+0xfc>
  322468:	a0000226 	beq	r20,zero,322474 <__call_exitprocs+0xac>
  32246c:	89400017 	ldw	r5,0(r17)
  322470:	2f001426 	beq	r5,fp,3224c4 <__call_exitprocs+0xfc>
  322474:	843fffc4 	addi	r16,r16,-1
  322478:	8c7fff04 	addi	r17,r17,-4
  32247c:	9cffff04 	addi	r19,r19,-4
  322480:	94bfff04 	addi	r18,r18,-4
  322484:	857ff71e 	bne	r16,r21,322464 <__call_exitprocs+0x9c>
  322488:	00800cb4 	movhi	r2,50
  32248c:	10810204 	addi	r2,r2,1032
  322490:	1000311e 	bne	r2,zero,322558 <__call_exitprocs+0x190>
  322494:	dfc00d17 	ldw	ra,52(sp)
  322498:	df000c17 	ldw	fp,48(sp)
  32249c:	ddc00b17 	ldw	r23,44(sp)
  3224a0:	dd800a17 	ldw	r22,40(sp)
  3224a4:	dd400917 	ldw	r21,36(sp)
  3224a8:	dd000817 	ldw	r20,32(sp)
  3224ac:	dcc00717 	ldw	r19,28(sp)
  3224b0:	dc800617 	ldw	r18,24(sp)
  3224b4:	dc400517 	ldw	r17,20(sp)
  3224b8:	dc000417 	ldw	r16,16(sp)
  3224bc:	dec00e04 	addi	sp,sp,56
  3224c0:	f800283a 	ret
  3224c4:	b9000117 	ldw	r4,4(r23)
  3224c8:	92000017 	ldw	r8,0(r18)
  3224cc:	213fffc4 	addi	r4,r4,-1
  3224d0:	24001a26 	beq	r4,r16,32253c <__call_exitprocs+0x174>
  3224d4:	90000015 	stw	zero,0(r18)
  3224d8:	403fe626 	beq	r8,zero,322474 <__call_exitprocs+0xac>
  3224dc:	ba400117 	ldw	r9,4(r23)
  3224e0:	a0001226 	beq	r20,zero,32252c <__call_exitprocs+0x164>
  3224e4:	00800044 	movi	r2,1
  3224e8:	1408983a 	sll	r4,r2,r16
  3224ec:	a1404017 	ldw	r5,256(r20)
  3224f0:	214a703a 	and	r5,r4,r5
  3224f4:	28000d26 	beq	r5,zero,32252c <__call_exitprocs+0x164>
  3224f8:	a1404117 	ldw	r5,260(r20)
  3224fc:	2148703a 	and	r4,r4,r5
  322500:	2000101e 	bne	r4,zero,322544 <__call_exitprocs+0x17c>
  322504:	99400017 	ldw	r5,0(r19)
  322508:	d9000117 	ldw	r4,4(sp)
  32250c:	da400315 	stw	r9,12(sp)
  322510:	403ee83a 	callr	r8
  322514:	da400317 	ldw	r9,12(sp)
  322518:	b9000117 	ldw	r4,4(r23)
  32251c:	227fbe1e 	bne	r4,r9,322418 <__call_exitprocs+0x50>
  322520:	b1000017 	ldw	r4,0(r22)
  322524:	25ffd326 	beq	r4,r23,322474 <__call_exitprocs+0xac>
  322528:	003fbb06 	br	322418 <__call_exitprocs+0x50>
  32252c:	da400315 	stw	r9,12(sp)
  322530:	403ee83a 	callr	r8
  322534:	da400317 	ldw	r9,12(sp)
  322538:	003ff706 	br	322518 <__call_exitprocs+0x150>
  32253c:	bc000115 	stw	r16,4(r23)
  322540:	003fe506 	br	3224d8 <__call_exitprocs+0x110>
  322544:	99000017 	ldw	r4,0(r19)
  322548:	da400315 	stw	r9,12(sp)
  32254c:	403ee83a 	callr	r8
  322550:	da400317 	ldw	r9,12(sp)
  322554:	003ff006 	br	322518 <__call_exitprocs+0x150>
  322558:	b9000117 	ldw	r4,4(r23)
  32255c:	20000e1e 	bne	r4,zero,322598 <__call_exitprocs+0x1d0>
  322560:	b9000017 	ldw	r4,0(r23)
  322564:	20000826 	beq	r4,zero,322588 <__call_exitprocs+0x1c0>
  322568:	b1000015 	stw	r4,0(r22)
  32256c:	a0000226 	beq	r20,zero,322578 <__call_exitprocs+0x1b0>
  322570:	a009883a 	mov	r4,r20
  322574:	03204080 	call	320408 <free>
  322578:	b809883a 	mov	r4,r23
  32257c:	03204080 	call	320408 <free>
  322580:	b5c00017 	ldw	r23,0(r22)
  322584:	003fa706 	br	322424 <__call_exitprocs+0x5c>
  322588:	0007883a 	mov	r3,zero
  32258c:	b82d883a 	mov	r22,r23
  322590:	182f883a 	mov	r23,r3
  322594:	003fa306 	br	322424 <__call_exitprocs+0x5c>
  322598:	b8c00017 	ldw	r3,0(r23)
  32259c:	003ffb06 	br	32258c <__call_exitprocs+0x1c4>

003225a0 <udivmodsi4>:
  3225a0:	2005883a 	mov	r2,r4
  3225a4:	2900182e 	bgeu	r5,r4,322608 <udivmodsi4+0x68>
  3225a8:	28001716 	blt	r5,zero,322608 <udivmodsi4+0x68>
  3225ac:	01000804 	movi	r4,32
  3225b0:	00c00044 	movi	r3,1
  3225b4:	00000206 	br	3225c0 <udivmodsi4+0x20>
  3225b8:	20001126 	beq	r4,zero,322600 <udivmodsi4+0x60>
  3225bc:	28000516 	blt	r5,zero,3225d4 <udivmodsi4+0x34>
  3225c0:	294b883a 	add	r5,r5,r5
  3225c4:	213fffc4 	addi	r4,r4,-1
  3225c8:	18c7883a 	add	r3,r3,r3
  3225cc:	28bffa36 	bltu	r5,r2,3225b8 <udivmodsi4+0x18>
  3225d0:	18000b26 	beq	r3,zero,322600 <udivmodsi4+0x60>
  3225d4:	0009883a 	mov	r4,zero
  3225d8:	11400236 	bltu	r2,r5,3225e4 <udivmodsi4+0x44>
  3225dc:	1145c83a 	sub	r2,r2,r5
  3225e0:	20c8b03a 	or	r4,r4,r3
  3225e4:	1806d07a 	srli	r3,r3,1
  3225e8:	280ad07a 	srli	r5,r5,1
  3225ec:	183ffa1e 	bne	r3,zero,3225d8 <udivmodsi4+0x38>
  3225f0:	3000021e 	bne	r6,zero,3225fc <udivmodsi4+0x5c>
  3225f4:	2005883a 	mov	r2,r4
  3225f8:	f800283a 	ret
  3225fc:	f800283a 	ret
  322600:	0009883a 	mov	r4,zero
  322604:	003ffa06 	br	3225f0 <udivmodsi4+0x50>
  322608:	00c00044 	movi	r3,1
  32260c:	0009883a 	mov	r4,zero
  322610:	003ff106 	br	3225d8 <udivmodsi4+0x38>

00322614 <__divsi3>:
  322614:	defffe04 	addi	sp,sp,-8
  322618:	dfc00115 	stw	ra,4(sp)
  32261c:	dc000015 	stw	r16,0(sp)
  322620:	20000a16 	blt	r4,zero,32264c <__divsi3+0x38>
  322624:	0021883a 	mov	r16,zero
  322628:	28000b16 	blt	r5,zero,322658 <__divsi3+0x44>
  32262c:	000d883a 	mov	r6,zero
  322630:	03225a00 	call	3225a0 <udivmodsi4>
  322634:	80000126 	beq	r16,zero,32263c <__divsi3+0x28>
  322638:	0085c83a 	sub	r2,zero,r2
  32263c:	dfc00117 	ldw	ra,4(sp)
  322640:	dc000017 	ldw	r16,0(sp)
  322644:	dec00204 	addi	sp,sp,8
  322648:	f800283a 	ret
  32264c:	0109c83a 	sub	r4,zero,r4
  322650:	04000044 	movi	r16,1
  322654:	283ff50e 	bge	r5,zero,32262c <__divsi3+0x18>
  322658:	014bc83a 	sub	r5,zero,r5
  32265c:	8400005c 	xori	r16,r16,1
  322660:	003ff206 	br	32262c <__divsi3+0x18>

00322664 <__modsi3>:
  322664:	deffff04 	addi	sp,sp,-4
  322668:	dfc00015 	stw	ra,0(sp)
  32266c:	20000516 	blt	r4,zero,322684 <__modsi3+0x20>
  322670:	28000c16 	blt	r5,zero,3226a4 <__modsi3+0x40>
  322674:	01800044 	movi	r6,1
  322678:	dfc00017 	ldw	ra,0(sp)
  32267c:	dec00104 	addi	sp,sp,4
  322680:	03225a01 	jmpi	3225a0 <udivmodsi4>
  322684:	0109c83a 	sub	r4,zero,r4
  322688:	28000b16 	blt	r5,zero,3226b8 <__modsi3+0x54>
  32268c:	01800044 	movi	r6,1
  322690:	03225a00 	call	3225a0 <udivmodsi4>
  322694:	0085c83a 	sub	r2,zero,r2
  322698:	dfc00017 	ldw	ra,0(sp)
  32269c:	dec00104 	addi	sp,sp,4
  3226a0:	f800283a 	ret
  3226a4:	014bc83a 	sub	r5,zero,r5
  3226a8:	01800044 	movi	r6,1
  3226ac:	dfc00017 	ldw	ra,0(sp)
  3226b0:	dec00104 	addi	sp,sp,4
  3226b4:	03225a01 	jmpi	3225a0 <udivmodsi4>
  3226b8:	014bc83a 	sub	r5,zero,r5
  3226bc:	003ff306 	br	32268c <__modsi3+0x28>

003226c0 <__udivsi3>:
  3226c0:	000d883a 	mov	r6,zero
  3226c4:	03225a01 	jmpi	3225a0 <udivmodsi4>

003226c8 <__umodsi3>:
  3226c8:	01800044 	movi	r6,1
  3226cc:	03225a01 	jmpi	3225a0 <udivmodsi4>

003226d0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  3226d0:	defffc04 	addi	sp,sp,-16
  3226d4:	df000315 	stw	fp,12(sp)
  3226d8:	df000304 	addi	fp,sp,12
  3226dc:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  3226e0:	0001883a 	nop
  3226e4:	e0bfff17 	ldw	r2,-4(fp)
  3226e8:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
  3226ec:	e0bffd17 	ldw	r2,-12(fp)
  3226f0:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  3226f4:	e0bffe17 	ldw	r2,-8(fp)
  3226f8:	10000226 	beq	r2,zero,322704 <_exit+0x34>
    ALT_SIM_FAIL();
  3226fc:	002af070 	cmpltui	zero,zero,43969
  322700:	00000106 	br	322708 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
  322704:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  322708:	003fff06 	br	322708 <_exit+0x38>
