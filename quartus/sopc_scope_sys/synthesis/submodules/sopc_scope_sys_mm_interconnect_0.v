// sopc_scope_sys_mm_interconnect_0.v

// This file was auto-generated from altera_merlin_interconnect_wrapper_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 13.1 162 at 2014.04.25.21:41:43

`timescale 1 ps / 1 ps
module sopc_scope_sys_mm_interconnect_0 (
		input  wire        clk_0_clk_clk,                            //                          clk_0_clk.clk
		input  wire        nios_reset_n_reset_bridge_in_reset_reset, // nios_reset_n_reset_bridge_in_reset.reset
		input  wire [20:0] nios_data_master_address,                 //                   nios_data_master.address
		output wire        nios_data_master_waitrequest,             //                                   .waitrequest
		input  wire [3:0]  nios_data_master_byteenable,              //                                   .byteenable
		input  wire        nios_data_master_read,                    //                                   .read
		output wire [31:0] nios_data_master_readdata,                //                                   .readdata
		output wire        nios_data_master_readdatavalid,           //                                   .readdatavalid
		input  wire        nios_data_master_write,                   //                                   .write
		input  wire [31:0] nios_data_master_writedata,               //                                   .writedata
		input  wire        nios_data_master_debugaccess,             //                                   .debugaccess
		input  wire [20:0] nios_instruction_master_address,          //            nios_instruction_master.address
		output wire        nios_instruction_master_waitrequest,      //                                   .waitrequest
		input  wire        nios_instruction_master_read,             //                                   .read
		output wire [31:0] nios_instruction_master_readdata,         //                                   .readdata
		output wire        nios_instruction_master_readdatavalid,    //                                   .readdatavalid
		output wire [0:0]  jtag_avalon_jtag_slave_address,           //             jtag_avalon_jtag_slave.address
		output wire        jtag_avalon_jtag_slave_write,             //                                   .write
		output wire        jtag_avalon_jtag_slave_read,              //                                   .read
		input  wire [31:0] jtag_avalon_jtag_slave_readdata,          //                                   .readdata
		output wire [31:0] jtag_avalon_jtag_slave_writedata,         //                                   .writedata
		input  wire        jtag_avalon_jtag_slave_waitrequest,       //                                   .waitrequest
		output wire        jtag_avalon_jtag_slave_chipselect,        //                                   .chipselect
		output wire [8:0]  nios_jtag_debug_module_address,           //             nios_jtag_debug_module.address
		output wire        nios_jtag_debug_module_write,             //                                   .write
		output wire        nios_jtag_debug_module_read,              //                                   .read
		input  wire [31:0] nios_jtag_debug_module_readdata,          //                                   .readdata
		output wire [31:0] nios_jtag_debug_module_writedata,         //                                   .writedata
		output wire [3:0]  nios_jtag_debug_module_byteenable,        //                                   .byteenable
		input  wire        nios_jtag_debug_module_waitrequest,       //                                   .waitrequest
		output wire        nios_jtag_debug_module_debugaccess,       //                                   .debugaccess
		output wire [16:0] ram_uas_address,                          //                            ram_uas.address
		output wire        ram_uas_write,                            //                                   .write
		output wire        ram_uas_read,                             //                                   .read
		input  wire [7:0]  ram_uas_readdata,                         //                                   .readdata
		output wire [7:0]  ram_uas_writedata,                        //                                   .writedata
		output wire [0:0]  ram_uas_burstcount,                       //                                   .burstcount
		output wire [0:0]  ram_uas_byteenable,                       //                                   .byteenable
		input  wire        ram_uas_readdatavalid,                    //                                   .readdatavalid
		input  wire        ram_uas_waitrequest,                      //                                   .waitrequest
		output wire        ram_uas_lock,                             //                                   .lock
		output wire        ram_uas_debugaccess,                      //                                   .debugaccess
		output wire [18:0] rom_uas_address,                          //                            rom_uas.address
		output wire        rom_uas_write,                            //                                   .write
		output wire        rom_uas_read,                             //                                   .read
		input  wire [7:0]  rom_uas_readdata,                         //                                   .readdata
		output wire [7:0]  rom_uas_writedata,                        //                                   .writedata
		output wire [0:0]  rom_uas_burstcount,                       //                                   .burstcount
		output wire [0:0]  rom_uas_byteenable,                       //                                   .byteenable
		input  wire        rom_uas_readdatavalid,                    //                                   .readdatavalid
		input  wire        rom_uas_waitrequest,                      //                                   .waitrequest
		output wire        rom_uas_lock,                             //                                   .lock
		output wire        rom_uas_debugaccess,                      //                                   .debugaccess
		output wire [15:0] temp_ram_s1_address,                      //                        temp_ram_s1.address
		output wire        temp_ram_s1_write,                        //                                   .write
		input  wire [7:0]  temp_ram_s1_readdata,                     //                                   .readdata
		output wire [7:0]  temp_ram_s1_writedata,                    //                                   .writedata
		output wire        temp_ram_s1_chipselect,                   //                                   .chipselect
		output wire        temp_ram_s1_clken                         //                                   .clken
	);

	wire         nios_data_master_translator_avalon_universal_master_0_waitrequest;                           // nios_data_master_translator_avalon_universal_master_0_agent:av_waitrequest -> nios_data_master_translator:uav_waitrequest
	wire   [2:0] nios_data_master_translator_avalon_universal_master_0_burstcount;                            // nios_data_master_translator:uav_burstcount -> nios_data_master_translator_avalon_universal_master_0_agent:av_burstcount
	wire  [31:0] nios_data_master_translator_avalon_universal_master_0_writedata;                             // nios_data_master_translator:uav_writedata -> nios_data_master_translator_avalon_universal_master_0_agent:av_writedata
	wire  [20:0] nios_data_master_translator_avalon_universal_master_0_address;                               // nios_data_master_translator:uav_address -> nios_data_master_translator_avalon_universal_master_0_agent:av_address
	wire         nios_data_master_translator_avalon_universal_master_0_lock;                                  // nios_data_master_translator:uav_lock -> nios_data_master_translator_avalon_universal_master_0_agent:av_lock
	wire         nios_data_master_translator_avalon_universal_master_0_write;                                 // nios_data_master_translator:uav_write -> nios_data_master_translator_avalon_universal_master_0_agent:av_write
	wire         nios_data_master_translator_avalon_universal_master_0_read;                                  // nios_data_master_translator:uav_read -> nios_data_master_translator_avalon_universal_master_0_agent:av_read
	wire  [31:0] nios_data_master_translator_avalon_universal_master_0_readdata;                              // nios_data_master_translator_avalon_universal_master_0_agent:av_readdata -> nios_data_master_translator:uav_readdata
	wire         nios_data_master_translator_avalon_universal_master_0_debugaccess;                           // nios_data_master_translator:uav_debugaccess -> nios_data_master_translator_avalon_universal_master_0_agent:av_debugaccess
	wire   [3:0] nios_data_master_translator_avalon_universal_master_0_byteenable;                            // nios_data_master_translator:uav_byteenable -> nios_data_master_translator_avalon_universal_master_0_agent:av_byteenable
	wire         nios_data_master_translator_avalon_universal_master_0_readdatavalid;                         // nios_data_master_translator_avalon_universal_master_0_agent:av_readdatavalid -> nios_data_master_translator:uav_readdatavalid
	wire         nios_instruction_master_translator_avalon_universal_master_0_waitrequest;                    // nios_instruction_master_translator_avalon_universal_master_0_agent:av_waitrequest -> nios_instruction_master_translator:uav_waitrequest
	wire   [2:0] nios_instruction_master_translator_avalon_universal_master_0_burstcount;                     // nios_instruction_master_translator:uav_burstcount -> nios_instruction_master_translator_avalon_universal_master_0_agent:av_burstcount
	wire  [31:0] nios_instruction_master_translator_avalon_universal_master_0_writedata;                      // nios_instruction_master_translator:uav_writedata -> nios_instruction_master_translator_avalon_universal_master_0_agent:av_writedata
	wire  [20:0] nios_instruction_master_translator_avalon_universal_master_0_address;                        // nios_instruction_master_translator:uav_address -> nios_instruction_master_translator_avalon_universal_master_0_agent:av_address
	wire         nios_instruction_master_translator_avalon_universal_master_0_lock;                           // nios_instruction_master_translator:uav_lock -> nios_instruction_master_translator_avalon_universal_master_0_agent:av_lock
	wire         nios_instruction_master_translator_avalon_universal_master_0_write;                          // nios_instruction_master_translator:uav_write -> nios_instruction_master_translator_avalon_universal_master_0_agent:av_write
	wire         nios_instruction_master_translator_avalon_universal_master_0_read;                           // nios_instruction_master_translator:uav_read -> nios_instruction_master_translator_avalon_universal_master_0_agent:av_read
	wire  [31:0] nios_instruction_master_translator_avalon_universal_master_0_readdata;                       // nios_instruction_master_translator_avalon_universal_master_0_agent:av_readdata -> nios_instruction_master_translator:uav_readdata
	wire         nios_instruction_master_translator_avalon_universal_master_0_debugaccess;                    // nios_instruction_master_translator:uav_debugaccess -> nios_instruction_master_translator_avalon_universal_master_0_agent:av_debugaccess
	wire   [3:0] nios_instruction_master_translator_avalon_universal_master_0_byteenable;                     // nios_instruction_master_translator:uav_byteenable -> nios_instruction_master_translator_avalon_universal_master_0_agent:av_byteenable
	wire         nios_instruction_master_translator_avalon_universal_master_0_readdatavalid;                  // nios_instruction_master_translator_avalon_universal_master_0_agent:av_readdatavalid -> nios_instruction_master_translator:uav_readdatavalid
	wire         temp_ram_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest;                        // temp_ram_s1_translator:uav_waitrequest -> temp_ram_s1_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire   [0:0] temp_ram_s1_translator_avalon_universal_slave_0_agent_m0_burstcount;                         // temp_ram_s1_translator_avalon_universal_slave_0_agent:m0_burstcount -> temp_ram_s1_translator:uav_burstcount
	wire   [7:0] temp_ram_s1_translator_avalon_universal_slave_0_agent_m0_writedata;                          // temp_ram_s1_translator_avalon_universal_slave_0_agent:m0_writedata -> temp_ram_s1_translator:uav_writedata
	wire  [20:0] temp_ram_s1_translator_avalon_universal_slave_0_agent_m0_address;                            // temp_ram_s1_translator_avalon_universal_slave_0_agent:m0_address -> temp_ram_s1_translator:uav_address
	wire         temp_ram_s1_translator_avalon_universal_slave_0_agent_m0_write;                              // temp_ram_s1_translator_avalon_universal_slave_0_agent:m0_write -> temp_ram_s1_translator:uav_write
	wire         temp_ram_s1_translator_avalon_universal_slave_0_agent_m0_lock;                               // temp_ram_s1_translator_avalon_universal_slave_0_agent:m0_lock -> temp_ram_s1_translator:uav_lock
	wire         temp_ram_s1_translator_avalon_universal_slave_0_agent_m0_read;                               // temp_ram_s1_translator_avalon_universal_slave_0_agent:m0_read -> temp_ram_s1_translator:uav_read
	wire   [7:0] temp_ram_s1_translator_avalon_universal_slave_0_agent_m0_readdata;                           // temp_ram_s1_translator:uav_readdata -> temp_ram_s1_translator_avalon_universal_slave_0_agent:m0_readdata
	wire         temp_ram_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                      // temp_ram_s1_translator:uav_readdatavalid -> temp_ram_s1_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire         temp_ram_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess;                        // temp_ram_s1_translator_avalon_universal_slave_0_agent:m0_debugaccess -> temp_ram_s1_translator:uav_debugaccess
	wire   [0:0] temp_ram_s1_translator_avalon_universal_slave_0_agent_m0_byteenable;                         // temp_ram_s1_translator_avalon_universal_slave_0_agent:m0_byteenable -> temp_ram_s1_translator:uav_byteenable
	wire         temp_ram_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;                 // temp_ram_s1_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> temp_ram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire         temp_ram_s1_translator_avalon_universal_slave_0_agent_rf_source_valid;                       // temp_ram_s1_translator_avalon_universal_slave_0_agent:rf_source_valid -> temp_ram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire         temp_ram_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;               // temp_ram_s1_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> temp_ram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [70:0] temp_ram_s1_translator_avalon_universal_slave_0_agent_rf_source_data;                        // temp_ram_s1_translator_avalon_universal_slave_0_agent:rf_source_data -> temp_ram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire         temp_ram_s1_translator_avalon_universal_slave_0_agent_rf_source_ready;                       // temp_ram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> temp_ram_s1_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire         temp_ram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;              // temp_ram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> temp_ram_s1_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire         temp_ram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                    // temp_ram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> temp_ram_s1_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire         temp_ram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;            // temp_ram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> temp_ram_s1_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [70:0] temp_ram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                     // temp_ram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> temp_ram_s1_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire         temp_ram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                    // temp_ram_s1_translator_avalon_universal_slave_0_agent:rf_sink_ready -> temp_ram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire         temp_ram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                  // temp_ram_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> temp_ram_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [9:0] temp_ram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                   // temp_ram_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> temp_ram_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire         temp_ram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                  // temp_ram_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> temp_ram_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire         nios_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_waitrequest;             // nios_jtag_debug_module_translator:uav_waitrequest -> nios_jtag_debug_module_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire   [2:0] nios_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_burstcount;              // nios_jtag_debug_module_translator_avalon_universal_slave_0_agent:m0_burstcount -> nios_jtag_debug_module_translator:uav_burstcount
	wire  [31:0] nios_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_writedata;               // nios_jtag_debug_module_translator_avalon_universal_slave_0_agent:m0_writedata -> nios_jtag_debug_module_translator:uav_writedata
	wire  [20:0] nios_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_address;                 // nios_jtag_debug_module_translator_avalon_universal_slave_0_agent:m0_address -> nios_jtag_debug_module_translator:uav_address
	wire         nios_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_write;                   // nios_jtag_debug_module_translator_avalon_universal_slave_0_agent:m0_write -> nios_jtag_debug_module_translator:uav_write
	wire         nios_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_lock;                    // nios_jtag_debug_module_translator_avalon_universal_slave_0_agent:m0_lock -> nios_jtag_debug_module_translator:uav_lock
	wire         nios_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_read;                    // nios_jtag_debug_module_translator_avalon_universal_slave_0_agent:m0_read -> nios_jtag_debug_module_translator:uav_read
	wire  [31:0] nios_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_readdata;                // nios_jtag_debug_module_translator:uav_readdata -> nios_jtag_debug_module_translator_avalon_universal_slave_0_agent:m0_readdata
	wire         nios_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_readdatavalid;           // nios_jtag_debug_module_translator:uav_readdatavalid -> nios_jtag_debug_module_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire         nios_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_debugaccess;             // nios_jtag_debug_module_translator_avalon_universal_slave_0_agent:m0_debugaccess -> nios_jtag_debug_module_translator:uav_debugaccess
	wire   [3:0] nios_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_byteenable;              // nios_jtag_debug_module_translator_avalon_universal_slave_0_agent:m0_byteenable -> nios_jtag_debug_module_translator:uav_byteenable
	wire         nios_jtag_debug_module_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;      // nios_jtag_debug_module_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> nios_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire         nios_jtag_debug_module_translator_avalon_universal_slave_0_agent_rf_source_valid;            // nios_jtag_debug_module_translator_avalon_universal_slave_0_agent:rf_source_valid -> nios_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire         nios_jtag_debug_module_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;    // nios_jtag_debug_module_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> nios_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [97:0] nios_jtag_debug_module_translator_avalon_universal_slave_0_agent_rf_source_data;             // nios_jtag_debug_module_translator_avalon_universal_slave_0_agent:rf_source_data -> nios_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire         nios_jtag_debug_module_translator_avalon_universal_slave_0_agent_rf_source_ready;            // nios_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> nios_jtag_debug_module_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire         nios_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;   // nios_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> nios_jtag_debug_module_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire         nios_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;         // nios_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> nios_jtag_debug_module_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire         nios_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket; // nios_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> nios_jtag_debug_module_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [97:0] nios_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;          // nios_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> nios_jtag_debug_module_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire         nios_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;         // nios_jtag_debug_module_translator_avalon_universal_slave_0_agent:rf_sink_ready -> nios_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire         nios_jtag_debug_module_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;       // nios_jtag_debug_module_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> nios_jtag_debug_module_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire  [33:0] nios_jtag_debug_module_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;        // nios_jtag_debug_module_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> nios_jtag_debug_module_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire         nios_jtag_debug_module_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;       // nios_jtag_debug_module_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> nios_jtag_debug_module_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire         cmd_xbar_mux_001_src_endofpacket;                                                            // cmd_xbar_mux_001:src_endofpacket -> nios_jtag_debug_module_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire         cmd_xbar_mux_001_src_valid;                                                                  // cmd_xbar_mux_001:src_valid -> nios_jtag_debug_module_translator_avalon_universal_slave_0_agent:cp_valid
	wire         cmd_xbar_mux_001_src_startofpacket;                                                          // cmd_xbar_mux_001:src_startofpacket -> nios_jtag_debug_module_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [96:0] cmd_xbar_mux_001_src_data;                                                                   // cmd_xbar_mux_001:src_data -> nios_jtag_debug_module_translator_avalon_universal_slave_0_agent:cp_data
	wire   [4:0] cmd_xbar_mux_001_src_channel;                                                                // cmd_xbar_mux_001:src_channel -> nios_jtag_debug_module_translator_avalon_universal_slave_0_agent:cp_channel
	wire         cmd_xbar_mux_001_src_ready;                                                                  // nios_jtag_debug_module_translator_avalon_universal_slave_0_agent:cp_ready -> cmd_xbar_mux_001:src_ready
	wire         jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_waitrequest;             // jtag_avalon_jtag_slave_translator:uav_waitrequest -> jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire   [2:0] jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_burstcount;              // jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:m0_burstcount -> jtag_avalon_jtag_slave_translator:uav_burstcount
	wire  [31:0] jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_writedata;               // jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:m0_writedata -> jtag_avalon_jtag_slave_translator:uav_writedata
	wire  [20:0] jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_address;                 // jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:m0_address -> jtag_avalon_jtag_slave_translator:uav_address
	wire         jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_write;                   // jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:m0_write -> jtag_avalon_jtag_slave_translator:uav_write
	wire         jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_lock;                    // jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:m0_lock -> jtag_avalon_jtag_slave_translator:uav_lock
	wire         jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_read;                    // jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:m0_read -> jtag_avalon_jtag_slave_translator:uav_read
	wire  [31:0] jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_readdata;                // jtag_avalon_jtag_slave_translator:uav_readdata -> jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:m0_readdata
	wire         jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_readdatavalid;           // jtag_avalon_jtag_slave_translator:uav_readdatavalid -> jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire         jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_debugaccess;             // jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:m0_debugaccess -> jtag_avalon_jtag_slave_translator:uav_debugaccess
	wire   [3:0] jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_byteenable;              // jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:m0_byteenable -> jtag_avalon_jtag_slave_translator:uav_byteenable
	wire         jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;      // jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire         jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rf_source_valid;            // jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:rf_source_valid -> jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire         jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;    // jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [97:0] jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rf_source_data;             // jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:rf_source_data -> jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire         jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rf_source_ready;            // jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire         jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;   // jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire         jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;         // jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire         jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket; // jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [97:0] jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;          // jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire         jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;         // jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:rf_sink_ready -> jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire         jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;       // jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire  [33:0] jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;        // jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire         jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;       // jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire         cmd_xbar_mux_002_src_endofpacket;                                                            // cmd_xbar_mux_002:src_endofpacket -> jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire         cmd_xbar_mux_002_src_valid;                                                                  // cmd_xbar_mux_002:src_valid -> jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:cp_valid
	wire         cmd_xbar_mux_002_src_startofpacket;                                                          // cmd_xbar_mux_002:src_startofpacket -> jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [96:0] cmd_xbar_mux_002_src_data;                                                                   // cmd_xbar_mux_002:src_data -> jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:cp_data
	wire   [4:0] cmd_xbar_mux_002_src_channel;                                                                // cmd_xbar_mux_002:src_channel -> jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:cp_channel
	wire         cmd_xbar_mux_002_src_ready;                                                                  // jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:cp_ready -> cmd_xbar_mux_002:src_ready
	wire         rom_uas_translator_avalon_universal_slave_0_agent_m0_waitrequest;                            // rom_uas_translator:uav_waitrequest -> rom_uas_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire   [0:0] rom_uas_translator_avalon_universal_slave_0_agent_m0_burstcount;                             // rom_uas_translator_avalon_universal_slave_0_agent:m0_burstcount -> rom_uas_translator:uav_burstcount
	wire   [7:0] rom_uas_translator_avalon_universal_slave_0_agent_m0_writedata;                              // rom_uas_translator_avalon_universal_slave_0_agent:m0_writedata -> rom_uas_translator:uav_writedata
	wire  [20:0] rom_uas_translator_avalon_universal_slave_0_agent_m0_address;                                // rom_uas_translator_avalon_universal_slave_0_agent:m0_address -> rom_uas_translator:uav_address
	wire         rom_uas_translator_avalon_universal_slave_0_agent_m0_write;                                  // rom_uas_translator_avalon_universal_slave_0_agent:m0_write -> rom_uas_translator:uav_write
	wire         rom_uas_translator_avalon_universal_slave_0_agent_m0_lock;                                   // rom_uas_translator_avalon_universal_slave_0_agent:m0_lock -> rom_uas_translator:uav_lock
	wire         rom_uas_translator_avalon_universal_slave_0_agent_m0_read;                                   // rom_uas_translator_avalon_universal_slave_0_agent:m0_read -> rom_uas_translator:uav_read
	wire   [7:0] rom_uas_translator_avalon_universal_slave_0_agent_m0_readdata;                               // rom_uas_translator:uav_readdata -> rom_uas_translator_avalon_universal_slave_0_agent:m0_readdata
	wire         rom_uas_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                          // rom_uas_translator:uav_readdatavalid -> rom_uas_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire         rom_uas_translator_avalon_universal_slave_0_agent_m0_debugaccess;                            // rom_uas_translator_avalon_universal_slave_0_agent:m0_debugaccess -> rom_uas_translator:uav_debugaccess
	wire   [0:0] rom_uas_translator_avalon_universal_slave_0_agent_m0_byteenable;                             // rom_uas_translator_avalon_universal_slave_0_agent:m0_byteenable -> rom_uas_translator:uav_byteenable
	wire         rom_uas_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;                     // rom_uas_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> rom_uas_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire         rom_uas_translator_avalon_universal_slave_0_agent_rf_source_valid;                           // rom_uas_translator_avalon_universal_slave_0_agent:rf_source_valid -> rom_uas_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire         rom_uas_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;                   // rom_uas_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> rom_uas_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [70:0] rom_uas_translator_avalon_universal_slave_0_agent_rf_source_data;                            // rom_uas_translator_avalon_universal_slave_0_agent:rf_source_data -> rom_uas_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire         rom_uas_translator_avalon_universal_slave_0_agent_rf_source_ready;                           // rom_uas_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> rom_uas_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire         rom_uas_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                  // rom_uas_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> rom_uas_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire         rom_uas_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                        // rom_uas_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> rom_uas_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire         rom_uas_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                // rom_uas_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> rom_uas_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [70:0] rom_uas_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                         // rom_uas_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> rom_uas_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire         rom_uas_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                        // rom_uas_translator_avalon_universal_slave_0_agent:rf_sink_ready -> rom_uas_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire         rom_uas_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                      // rom_uas_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> rom_uas_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [9:0] rom_uas_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                       // rom_uas_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> rom_uas_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire         rom_uas_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                      // rom_uas_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> rom_uas_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire         ram_uas_translator_avalon_universal_slave_0_agent_m0_waitrequest;                            // ram_uas_translator:uav_waitrequest -> ram_uas_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire   [0:0] ram_uas_translator_avalon_universal_slave_0_agent_m0_burstcount;                             // ram_uas_translator_avalon_universal_slave_0_agent:m0_burstcount -> ram_uas_translator:uav_burstcount
	wire   [7:0] ram_uas_translator_avalon_universal_slave_0_agent_m0_writedata;                              // ram_uas_translator_avalon_universal_slave_0_agent:m0_writedata -> ram_uas_translator:uav_writedata
	wire  [20:0] ram_uas_translator_avalon_universal_slave_0_agent_m0_address;                                // ram_uas_translator_avalon_universal_slave_0_agent:m0_address -> ram_uas_translator:uav_address
	wire         ram_uas_translator_avalon_universal_slave_0_agent_m0_write;                                  // ram_uas_translator_avalon_universal_slave_0_agent:m0_write -> ram_uas_translator:uav_write
	wire         ram_uas_translator_avalon_universal_slave_0_agent_m0_lock;                                   // ram_uas_translator_avalon_universal_slave_0_agent:m0_lock -> ram_uas_translator:uav_lock
	wire         ram_uas_translator_avalon_universal_slave_0_agent_m0_read;                                   // ram_uas_translator_avalon_universal_slave_0_agent:m0_read -> ram_uas_translator:uav_read
	wire   [7:0] ram_uas_translator_avalon_universal_slave_0_agent_m0_readdata;                               // ram_uas_translator:uav_readdata -> ram_uas_translator_avalon_universal_slave_0_agent:m0_readdata
	wire         ram_uas_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                          // ram_uas_translator:uav_readdatavalid -> ram_uas_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire         ram_uas_translator_avalon_universal_slave_0_agent_m0_debugaccess;                            // ram_uas_translator_avalon_universal_slave_0_agent:m0_debugaccess -> ram_uas_translator:uav_debugaccess
	wire   [0:0] ram_uas_translator_avalon_universal_slave_0_agent_m0_byteenable;                             // ram_uas_translator_avalon_universal_slave_0_agent:m0_byteenable -> ram_uas_translator:uav_byteenable
	wire         ram_uas_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;                     // ram_uas_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> ram_uas_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire         ram_uas_translator_avalon_universal_slave_0_agent_rf_source_valid;                           // ram_uas_translator_avalon_universal_slave_0_agent:rf_source_valid -> ram_uas_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire         ram_uas_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;                   // ram_uas_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> ram_uas_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [70:0] ram_uas_translator_avalon_universal_slave_0_agent_rf_source_data;                            // ram_uas_translator_avalon_universal_slave_0_agent:rf_source_data -> ram_uas_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire         ram_uas_translator_avalon_universal_slave_0_agent_rf_source_ready;                           // ram_uas_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> ram_uas_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire         ram_uas_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                  // ram_uas_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> ram_uas_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire         ram_uas_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                        // ram_uas_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> ram_uas_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire         ram_uas_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                // ram_uas_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> ram_uas_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [70:0] ram_uas_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                         // ram_uas_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> ram_uas_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire         ram_uas_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                        // ram_uas_translator_avalon_universal_slave_0_agent:rf_sink_ready -> ram_uas_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire         ram_uas_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                      // ram_uas_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> ram_uas_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [9:0] ram_uas_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                       // ram_uas_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> ram_uas_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire         ram_uas_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                      // ram_uas_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> ram_uas_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire         nios_data_master_translator_avalon_universal_master_0_agent_cp_endofpacket;                  // nios_data_master_translator_avalon_universal_master_0_agent:cp_endofpacket -> addr_router:sink_endofpacket
	wire         nios_data_master_translator_avalon_universal_master_0_agent_cp_valid;                        // nios_data_master_translator_avalon_universal_master_0_agent:cp_valid -> addr_router:sink_valid
	wire         nios_data_master_translator_avalon_universal_master_0_agent_cp_startofpacket;                // nios_data_master_translator_avalon_universal_master_0_agent:cp_startofpacket -> addr_router:sink_startofpacket
	wire  [96:0] nios_data_master_translator_avalon_universal_master_0_agent_cp_data;                         // nios_data_master_translator_avalon_universal_master_0_agent:cp_data -> addr_router:sink_data
	wire         nios_data_master_translator_avalon_universal_master_0_agent_cp_ready;                        // addr_router:sink_ready -> nios_data_master_translator_avalon_universal_master_0_agent:cp_ready
	wire         nios_instruction_master_translator_avalon_universal_master_0_agent_cp_endofpacket;           // nios_instruction_master_translator_avalon_universal_master_0_agent:cp_endofpacket -> addr_router_001:sink_endofpacket
	wire         nios_instruction_master_translator_avalon_universal_master_0_agent_cp_valid;                 // nios_instruction_master_translator_avalon_universal_master_0_agent:cp_valid -> addr_router_001:sink_valid
	wire         nios_instruction_master_translator_avalon_universal_master_0_agent_cp_startofpacket;         // nios_instruction_master_translator_avalon_universal_master_0_agent:cp_startofpacket -> addr_router_001:sink_startofpacket
	wire  [96:0] nios_instruction_master_translator_avalon_universal_master_0_agent_cp_data;                  // nios_instruction_master_translator_avalon_universal_master_0_agent:cp_data -> addr_router_001:sink_data
	wire         nios_instruction_master_translator_avalon_universal_master_0_agent_cp_ready;                 // addr_router_001:sink_ready -> nios_instruction_master_translator_avalon_universal_master_0_agent:cp_ready
	wire         temp_ram_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket;                        // temp_ram_s1_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router:sink_endofpacket
	wire         temp_ram_s1_translator_avalon_universal_slave_0_agent_rp_valid;                              // temp_ram_s1_translator_avalon_universal_slave_0_agent:rp_valid -> id_router:sink_valid
	wire         temp_ram_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket;                      // temp_ram_s1_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router:sink_startofpacket
	wire  [69:0] temp_ram_s1_translator_avalon_universal_slave_0_agent_rp_data;                               // temp_ram_s1_translator_avalon_universal_slave_0_agent:rp_data -> id_router:sink_data
	wire         temp_ram_s1_translator_avalon_universal_slave_0_agent_rp_ready;                              // id_router:sink_ready -> temp_ram_s1_translator_avalon_universal_slave_0_agent:rp_ready
	wire         nios_jtag_debug_module_translator_avalon_universal_slave_0_agent_rp_endofpacket;             // nios_jtag_debug_module_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_001:sink_endofpacket
	wire         nios_jtag_debug_module_translator_avalon_universal_slave_0_agent_rp_valid;                   // nios_jtag_debug_module_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_001:sink_valid
	wire         nios_jtag_debug_module_translator_avalon_universal_slave_0_agent_rp_startofpacket;           // nios_jtag_debug_module_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_001:sink_startofpacket
	wire  [96:0] nios_jtag_debug_module_translator_avalon_universal_slave_0_agent_rp_data;                    // nios_jtag_debug_module_translator_avalon_universal_slave_0_agent:rp_data -> id_router_001:sink_data
	wire         nios_jtag_debug_module_translator_avalon_universal_slave_0_agent_rp_ready;                   // id_router_001:sink_ready -> nios_jtag_debug_module_translator_avalon_universal_slave_0_agent:rp_ready
	wire         id_router_001_src_endofpacket;                                                               // id_router_001:src_endofpacket -> rsp_xbar_demux_001:sink_endofpacket
	wire         id_router_001_src_valid;                                                                     // id_router_001:src_valid -> rsp_xbar_demux_001:sink_valid
	wire         id_router_001_src_startofpacket;                                                             // id_router_001:src_startofpacket -> rsp_xbar_demux_001:sink_startofpacket
	wire  [96:0] id_router_001_src_data;                                                                      // id_router_001:src_data -> rsp_xbar_demux_001:sink_data
	wire   [4:0] id_router_001_src_channel;                                                                   // id_router_001:src_channel -> rsp_xbar_demux_001:sink_channel
	wire         id_router_001_src_ready;                                                                     // rsp_xbar_demux_001:sink_ready -> id_router_001:src_ready
	wire         jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rp_endofpacket;             // jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_002:sink_endofpacket
	wire         jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rp_valid;                   // jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_002:sink_valid
	wire         jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rp_startofpacket;           // jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_002:sink_startofpacket
	wire  [96:0] jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rp_data;                    // jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:rp_data -> id_router_002:sink_data
	wire         jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rp_ready;                   // id_router_002:sink_ready -> jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent:rp_ready
	wire         id_router_002_src_endofpacket;                                                               // id_router_002:src_endofpacket -> rsp_xbar_demux_002:sink_endofpacket
	wire         id_router_002_src_valid;                                                                     // id_router_002:src_valid -> rsp_xbar_demux_002:sink_valid
	wire         id_router_002_src_startofpacket;                                                             // id_router_002:src_startofpacket -> rsp_xbar_demux_002:sink_startofpacket
	wire  [96:0] id_router_002_src_data;                                                                      // id_router_002:src_data -> rsp_xbar_demux_002:sink_data
	wire   [4:0] id_router_002_src_channel;                                                                   // id_router_002:src_channel -> rsp_xbar_demux_002:sink_channel
	wire         id_router_002_src_ready;                                                                     // rsp_xbar_demux_002:sink_ready -> id_router_002:src_ready
	wire         rom_uas_translator_avalon_universal_slave_0_agent_rp_endofpacket;                            // rom_uas_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_003:sink_endofpacket
	wire         rom_uas_translator_avalon_universal_slave_0_agent_rp_valid;                                  // rom_uas_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_003:sink_valid
	wire         rom_uas_translator_avalon_universal_slave_0_agent_rp_startofpacket;                          // rom_uas_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_003:sink_startofpacket
	wire  [69:0] rom_uas_translator_avalon_universal_slave_0_agent_rp_data;                                   // rom_uas_translator_avalon_universal_slave_0_agent:rp_data -> id_router_003:sink_data
	wire         rom_uas_translator_avalon_universal_slave_0_agent_rp_ready;                                  // id_router_003:sink_ready -> rom_uas_translator_avalon_universal_slave_0_agent:rp_ready
	wire         ram_uas_translator_avalon_universal_slave_0_agent_rp_endofpacket;                            // ram_uas_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_004:sink_endofpacket
	wire         ram_uas_translator_avalon_universal_slave_0_agent_rp_valid;                                  // ram_uas_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_004:sink_valid
	wire         ram_uas_translator_avalon_universal_slave_0_agent_rp_startofpacket;                          // ram_uas_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_004:sink_startofpacket
	wire  [69:0] ram_uas_translator_avalon_universal_slave_0_agent_rp_data;                                   // ram_uas_translator_avalon_universal_slave_0_agent:rp_data -> id_router_004:sink_data
	wire         ram_uas_translator_avalon_universal_slave_0_agent_rp_ready;                                  // id_router_004:sink_ready -> ram_uas_translator_avalon_universal_slave_0_agent:rp_ready
	wire         addr_router_src_endofpacket;                                                                 // addr_router:src_endofpacket -> limiter:cmd_sink_endofpacket
	wire         addr_router_src_valid;                                                                       // addr_router:src_valid -> limiter:cmd_sink_valid
	wire         addr_router_src_startofpacket;                                                               // addr_router:src_startofpacket -> limiter:cmd_sink_startofpacket
	wire  [96:0] addr_router_src_data;                                                                        // addr_router:src_data -> limiter:cmd_sink_data
	wire   [4:0] addr_router_src_channel;                                                                     // addr_router:src_channel -> limiter:cmd_sink_channel
	wire         addr_router_src_ready;                                                                       // limiter:cmd_sink_ready -> addr_router:src_ready
	wire         limiter_cmd_src_endofpacket;                                                                 // limiter:cmd_src_endofpacket -> cmd_xbar_demux:sink_endofpacket
	wire         limiter_cmd_src_startofpacket;                                                               // limiter:cmd_src_startofpacket -> cmd_xbar_demux:sink_startofpacket
	wire  [96:0] limiter_cmd_src_data;                                                                        // limiter:cmd_src_data -> cmd_xbar_demux:sink_data
	wire   [4:0] limiter_cmd_src_channel;                                                                     // limiter:cmd_src_channel -> cmd_xbar_demux:sink_channel
	wire         limiter_cmd_src_ready;                                                                       // cmd_xbar_demux:sink_ready -> limiter:cmd_src_ready
	wire         rsp_xbar_mux_src_endofpacket;                                                                // rsp_xbar_mux:src_endofpacket -> limiter:rsp_sink_endofpacket
	wire         rsp_xbar_mux_src_valid;                                                                      // rsp_xbar_mux:src_valid -> limiter:rsp_sink_valid
	wire         rsp_xbar_mux_src_startofpacket;                                                              // rsp_xbar_mux:src_startofpacket -> limiter:rsp_sink_startofpacket
	wire  [96:0] rsp_xbar_mux_src_data;                                                                       // rsp_xbar_mux:src_data -> limiter:rsp_sink_data
	wire   [4:0] rsp_xbar_mux_src_channel;                                                                    // rsp_xbar_mux:src_channel -> limiter:rsp_sink_channel
	wire         rsp_xbar_mux_src_ready;                                                                      // limiter:rsp_sink_ready -> rsp_xbar_mux:src_ready
	wire         limiter_rsp_src_endofpacket;                                                                 // limiter:rsp_src_endofpacket -> nios_data_master_translator_avalon_universal_master_0_agent:rp_endofpacket
	wire         limiter_rsp_src_valid;                                                                       // limiter:rsp_src_valid -> nios_data_master_translator_avalon_universal_master_0_agent:rp_valid
	wire         limiter_rsp_src_startofpacket;                                                               // limiter:rsp_src_startofpacket -> nios_data_master_translator_avalon_universal_master_0_agent:rp_startofpacket
	wire  [96:0] limiter_rsp_src_data;                                                                        // limiter:rsp_src_data -> nios_data_master_translator_avalon_universal_master_0_agent:rp_data
	wire   [4:0] limiter_rsp_src_channel;                                                                     // limiter:rsp_src_channel -> nios_data_master_translator_avalon_universal_master_0_agent:rp_channel
	wire         limiter_rsp_src_ready;                                                                       // nios_data_master_translator_avalon_universal_master_0_agent:rp_ready -> limiter:rsp_src_ready
	wire         addr_router_001_src_endofpacket;                                                             // addr_router_001:src_endofpacket -> limiter_001:cmd_sink_endofpacket
	wire         addr_router_001_src_valid;                                                                   // addr_router_001:src_valid -> limiter_001:cmd_sink_valid
	wire         addr_router_001_src_startofpacket;                                                           // addr_router_001:src_startofpacket -> limiter_001:cmd_sink_startofpacket
	wire  [96:0] addr_router_001_src_data;                                                                    // addr_router_001:src_data -> limiter_001:cmd_sink_data
	wire   [4:0] addr_router_001_src_channel;                                                                 // addr_router_001:src_channel -> limiter_001:cmd_sink_channel
	wire         addr_router_001_src_ready;                                                                   // limiter_001:cmd_sink_ready -> addr_router_001:src_ready
	wire         limiter_001_cmd_src_endofpacket;                                                             // limiter_001:cmd_src_endofpacket -> cmd_xbar_demux_001:sink_endofpacket
	wire         limiter_001_cmd_src_startofpacket;                                                           // limiter_001:cmd_src_startofpacket -> cmd_xbar_demux_001:sink_startofpacket
	wire  [96:0] limiter_001_cmd_src_data;                                                                    // limiter_001:cmd_src_data -> cmd_xbar_demux_001:sink_data
	wire   [4:0] limiter_001_cmd_src_channel;                                                                 // limiter_001:cmd_src_channel -> cmd_xbar_demux_001:sink_channel
	wire         limiter_001_cmd_src_ready;                                                                   // cmd_xbar_demux_001:sink_ready -> limiter_001:cmd_src_ready
	wire         rsp_xbar_mux_001_src_endofpacket;                                                            // rsp_xbar_mux_001:src_endofpacket -> limiter_001:rsp_sink_endofpacket
	wire         rsp_xbar_mux_001_src_valid;                                                                  // rsp_xbar_mux_001:src_valid -> limiter_001:rsp_sink_valid
	wire         rsp_xbar_mux_001_src_startofpacket;                                                          // rsp_xbar_mux_001:src_startofpacket -> limiter_001:rsp_sink_startofpacket
	wire  [96:0] rsp_xbar_mux_001_src_data;                                                                   // rsp_xbar_mux_001:src_data -> limiter_001:rsp_sink_data
	wire   [4:0] rsp_xbar_mux_001_src_channel;                                                                // rsp_xbar_mux_001:src_channel -> limiter_001:rsp_sink_channel
	wire         rsp_xbar_mux_001_src_ready;                                                                  // limiter_001:rsp_sink_ready -> rsp_xbar_mux_001:src_ready
	wire         limiter_001_rsp_src_endofpacket;                                                             // limiter_001:rsp_src_endofpacket -> nios_instruction_master_translator_avalon_universal_master_0_agent:rp_endofpacket
	wire         limiter_001_rsp_src_valid;                                                                   // limiter_001:rsp_src_valid -> nios_instruction_master_translator_avalon_universal_master_0_agent:rp_valid
	wire         limiter_001_rsp_src_startofpacket;                                                           // limiter_001:rsp_src_startofpacket -> nios_instruction_master_translator_avalon_universal_master_0_agent:rp_startofpacket
	wire  [96:0] limiter_001_rsp_src_data;                                                                    // limiter_001:rsp_src_data -> nios_instruction_master_translator_avalon_universal_master_0_agent:rp_data
	wire   [4:0] limiter_001_rsp_src_channel;                                                                 // limiter_001:rsp_src_channel -> nios_instruction_master_translator_avalon_universal_master_0_agent:rp_channel
	wire         limiter_001_rsp_src_ready;                                                                   // nios_instruction_master_translator_avalon_universal_master_0_agent:rp_ready -> limiter_001:rsp_src_ready
	wire         burst_adapter_source0_endofpacket;                                                           // burst_adapter:source0_endofpacket -> temp_ram_s1_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire         burst_adapter_source0_valid;                                                                 // burst_adapter:source0_valid -> temp_ram_s1_translator_avalon_universal_slave_0_agent:cp_valid
	wire         burst_adapter_source0_startofpacket;                                                         // burst_adapter:source0_startofpacket -> temp_ram_s1_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [69:0] burst_adapter_source0_data;                                                                  // burst_adapter:source0_data -> temp_ram_s1_translator_avalon_universal_slave_0_agent:cp_data
	wire         burst_adapter_source0_ready;                                                                 // temp_ram_s1_translator_avalon_universal_slave_0_agent:cp_ready -> burst_adapter:source0_ready
	wire   [4:0] burst_adapter_source0_channel;                                                               // burst_adapter:source0_channel -> temp_ram_s1_translator_avalon_universal_slave_0_agent:cp_channel
	wire         burst_adapter_001_source0_endofpacket;                                                       // burst_adapter_001:source0_endofpacket -> rom_uas_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire         burst_adapter_001_source0_valid;                                                             // burst_adapter_001:source0_valid -> rom_uas_translator_avalon_universal_slave_0_agent:cp_valid
	wire         burst_adapter_001_source0_startofpacket;                                                     // burst_adapter_001:source0_startofpacket -> rom_uas_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [69:0] burst_adapter_001_source0_data;                                                              // burst_adapter_001:source0_data -> rom_uas_translator_avalon_universal_slave_0_agent:cp_data
	wire         burst_adapter_001_source0_ready;                                                             // rom_uas_translator_avalon_universal_slave_0_agent:cp_ready -> burst_adapter_001:source0_ready
	wire   [4:0] burst_adapter_001_source0_channel;                                                           // burst_adapter_001:source0_channel -> rom_uas_translator_avalon_universal_slave_0_agent:cp_channel
	wire         burst_adapter_002_source0_endofpacket;                                                       // burst_adapter_002:source0_endofpacket -> ram_uas_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire         burst_adapter_002_source0_valid;                                                             // burst_adapter_002:source0_valid -> ram_uas_translator_avalon_universal_slave_0_agent:cp_valid
	wire         burst_adapter_002_source0_startofpacket;                                                     // burst_adapter_002:source0_startofpacket -> ram_uas_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [69:0] burst_adapter_002_source0_data;                                                              // burst_adapter_002:source0_data -> ram_uas_translator_avalon_universal_slave_0_agent:cp_data
	wire         burst_adapter_002_source0_ready;                                                             // ram_uas_translator_avalon_universal_slave_0_agent:cp_ready -> burst_adapter_002:source0_ready
	wire   [4:0] burst_adapter_002_source0_channel;                                                           // burst_adapter_002:source0_channel -> ram_uas_translator_avalon_universal_slave_0_agent:cp_channel
	wire         cmd_xbar_demux_src0_endofpacket;                                                             // cmd_xbar_demux:src0_endofpacket -> cmd_xbar_mux:sink0_endofpacket
	wire         cmd_xbar_demux_src0_valid;                                                                   // cmd_xbar_demux:src0_valid -> cmd_xbar_mux:sink0_valid
	wire         cmd_xbar_demux_src0_startofpacket;                                                           // cmd_xbar_demux:src0_startofpacket -> cmd_xbar_mux:sink0_startofpacket
	wire  [96:0] cmd_xbar_demux_src0_data;                                                                    // cmd_xbar_demux:src0_data -> cmd_xbar_mux:sink0_data
	wire   [4:0] cmd_xbar_demux_src0_channel;                                                                 // cmd_xbar_demux:src0_channel -> cmd_xbar_mux:sink0_channel
	wire         cmd_xbar_demux_src0_ready;                                                                   // cmd_xbar_mux:sink0_ready -> cmd_xbar_demux:src0_ready
	wire         cmd_xbar_demux_src1_endofpacket;                                                             // cmd_xbar_demux:src1_endofpacket -> cmd_xbar_mux_001:sink0_endofpacket
	wire         cmd_xbar_demux_src1_valid;                                                                   // cmd_xbar_demux:src1_valid -> cmd_xbar_mux_001:sink0_valid
	wire         cmd_xbar_demux_src1_startofpacket;                                                           // cmd_xbar_demux:src1_startofpacket -> cmd_xbar_mux_001:sink0_startofpacket
	wire  [96:0] cmd_xbar_demux_src1_data;                                                                    // cmd_xbar_demux:src1_data -> cmd_xbar_mux_001:sink0_data
	wire   [4:0] cmd_xbar_demux_src1_channel;                                                                 // cmd_xbar_demux:src1_channel -> cmd_xbar_mux_001:sink0_channel
	wire         cmd_xbar_demux_src1_ready;                                                                   // cmd_xbar_mux_001:sink0_ready -> cmd_xbar_demux:src1_ready
	wire         cmd_xbar_demux_src2_endofpacket;                                                             // cmd_xbar_demux:src2_endofpacket -> cmd_xbar_mux_002:sink0_endofpacket
	wire         cmd_xbar_demux_src2_valid;                                                                   // cmd_xbar_demux:src2_valid -> cmd_xbar_mux_002:sink0_valid
	wire         cmd_xbar_demux_src2_startofpacket;                                                           // cmd_xbar_demux:src2_startofpacket -> cmd_xbar_mux_002:sink0_startofpacket
	wire  [96:0] cmd_xbar_demux_src2_data;                                                                    // cmd_xbar_demux:src2_data -> cmd_xbar_mux_002:sink0_data
	wire   [4:0] cmd_xbar_demux_src2_channel;                                                                 // cmd_xbar_demux:src2_channel -> cmd_xbar_mux_002:sink0_channel
	wire         cmd_xbar_demux_src2_ready;                                                                   // cmd_xbar_mux_002:sink0_ready -> cmd_xbar_demux:src2_ready
	wire         cmd_xbar_demux_src3_endofpacket;                                                             // cmd_xbar_demux:src3_endofpacket -> cmd_xbar_mux_003:sink0_endofpacket
	wire         cmd_xbar_demux_src3_valid;                                                                   // cmd_xbar_demux:src3_valid -> cmd_xbar_mux_003:sink0_valid
	wire         cmd_xbar_demux_src3_startofpacket;                                                           // cmd_xbar_demux:src3_startofpacket -> cmd_xbar_mux_003:sink0_startofpacket
	wire  [96:0] cmd_xbar_demux_src3_data;                                                                    // cmd_xbar_demux:src3_data -> cmd_xbar_mux_003:sink0_data
	wire   [4:0] cmd_xbar_demux_src3_channel;                                                                 // cmd_xbar_demux:src3_channel -> cmd_xbar_mux_003:sink0_channel
	wire         cmd_xbar_demux_src3_ready;                                                                   // cmd_xbar_mux_003:sink0_ready -> cmd_xbar_demux:src3_ready
	wire         cmd_xbar_demux_src4_endofpacket;                                                             // cmd_xbar_demux:src4_endofpacket -> cmd_xbar_mux_004:sink0_endofpacket
	wire         cmd_xbar_demux_src4_valid;                                                                   // cmd_xbar_demux:src4_valid -> cmd_xbar_mux_004:sink0_valid
	wire         cmd_xbar_demux_src4_startofpacket;                                                           // cmd_xbar_demux:src4_startofpacket -> cmd_xbar_mux_004:sink0_startofpacket
	wire  [96:0] cmd_xbar_demux_src4_data;                                                                    // cmd_xbar_demux:src4_data -> cmd_xbar_mux_004:sink0_data
	wire   [4:0] cmd_xbar_demux_src4_channel;                                                                 // cmd_xbar_demux:src4_channel -> cmd_xbar_mux_004:sink0_channel
	wire         cmd_xbar_demux_src4_ready;                                                                   // cmd_xbar_mux_004:sink0_ready -> cmd_xbar_demux:src4_ready
	wire         cmd_xbar_demux_001_src0_endofpacket;                                                         // cmd_xbar_demux_001:src0_endofpacket -> cmd_xbar_mux:sink1_endofpacket
	wire         cmd_xbar_demux_001_src0_valid;                                                               // cmd_xbar_demux_001:src0_valid -> cmd_xbar_mux:sink1_valid
	wire         cmd_xbar_demux_001_src0_startofpacket;                                                       // cmd_xbar_demux_001:src0_startofpacket -> cmd_xbar_mux:sink1_startofpacket
	wire  [96:0] cmd_xbar_demux_001_src0_data;                                                                // cmd_xbar_demux_001:src0_data -> cmd_xbar_mux:sink1_data
	wire   [4:0] cmd_xbar_demux_001_src0_channel;                                                             // cmd_xbar_demux_001:src0_channel -> cmd_xbar_mux:sink1_channel
	wire         cmd_xbar_demux_001_src0_ready;                                                               // cmd_xbar_mux:sink1_ready -> cmd_xbar_demux_001:src0_ready
	wire         cmd_xbar_demux_001_src1_endofpacket;                                                         // cmd_xbar_demux_001:src1_endofpacket -> cmd_xbar_mux_001:sink1_endofpacket
	wire         cmd_xbar_demux_001_src1_valid;                                                               // cmd_xbar_demux_001:src1_valid -> cmd_xbar_mux_001:sink1_valid
	wire         cmd_xbar_demux_001_src1_startofpacket;                                                       // cmd_xbar_demux_001:src1_startofpacket -> cmd_xbar_mux_001:sink1_startofpacket
	wire  [96:0] cmd_xbar_demux_001_src1_data;                                                                // cmd_xbar_demux_001:src1_data -> cmd_xbar_mux_001:sink1_data
	wire   [4:0] cmd_xbar_demux_001_src1_channel;                                                             // cmd_xbar_demux_001:src1_channel -> cmd_xbar_mux_001:sink1_channel
	wire         cmd_xbar_demux_001_src1_ready;                                                               // cmd_xbar_mux_001:sink1_ready -> cmd_xbar_demux_001:src1_ready
	wire         cmd_xbar_demux_001_src2_endofpacket;                                                         // cmd_xbar_demux_001:src2_endofpacket -> cmd_xbar_mux_003:sink1_endofpacket
	wire         cmd_xbar_demux_001_src2_valid;                                                               // cmd_xbar_demux_001:src2_valid -> cmd_xbar_mux_003:sink1_valid
	wire         cmd_xbar_demux_001_src2_startofpacket;                                                       // cmd_xbar_demux_001:src2_startofpacket -> cmd_xbar_mux_003:sink1_startofpacket
	wire  [96:0] cmd_xbar_demux_001_src2_data;                                                                // cmd_xbar_demux_001:src2_data -> cmd_xbar_mux_003:sink1_data
	wire   [4:0] cmd_xbar_demux_001_src2_channel;                                                             // cmd_xbar_demux_001:src2_channel -> cmd_xbar_mux_003:sink1_channel
	wire         cmd_xbar_demux_001_src2_ready;                                                               // cmd_xbar_mux_003:sink1_ready -> cmd_xbar_demux_001:src2_ready
	wire         cmd_xbar_demux_001_src3_endofpacket;                                                         // cmd_xbar_demux_001:src3_endofpacket -> cmd_xbar_mux_004:sink1_endofpacket
	wire         cmd_xbar_demux_001_src3_valid;                                                               // cmd_xbar_demux_001:src3_valid -> cmd_xbar_mux_004:sink1_valid
	wire         cmd_xbar_demux_001_src3_startofpacket;                                                       // cmd_xbar_demux_001:src3_startofpacket -> cmd_xbar_mux_004:sink1_startofpacket
	wire  [96:0] cmd_xbar_demux_001_src3_data;                                                                // cmd_xbar_demux_001:src3_data -> cmd_xbar_mux_004:sink1_data
	wire   [4:0] cmd_xbar_demux_001_src3_channel;                                                             // cmd_xbar_demux_001:src3_channel -> cmd_xbar_mux_004:sink1_channel
	wire         cmd_xbar_demux_001_src3_ready;                                                               // cmd_xbar_mux_004:sink1_ready -> cmd_xbar_demux_001:src3_ready
	wire         rsp_xbar_demux_src0_endofpacket;                                                             // rsp_xbar_demux:src0_endofpacket -> rsp_xbar_mux:sink0_endofpacket
	wire         rsp_xbar_demux_src0_valid;                                                                   // rsp_xbar_demux:src0_valid -> rsp_xbar_mux:sink0_valid
	wire         rsp_xbar_demux_src0_startofpacket;                                                           // rsp_xbar_demux:src0_startofpacket -> rsp_xbar_mux:sink0_startofpacket
	wire  [96:0] rsp_xbar_demux_src0_data;                                                                    // rsp_xbar_demux:src0_data -> rsp_xbar_mux:sink0_data
	wire   [4:0] rsp_xbar_demux_src0_channel;                                                                 // rsp_xbar_demux:src0_channel -> rsp_xbar_mux:sink0_channel
	wire         rsp_xbar_demux_src0_ready;                                                                   // rsp_xbar_mux:sink0_ready -> rsp_xbar_demux:src0_ready
	wire         rsp_xbar_demux_src1_endofpacket;                                                             // rsp_xbar_demux:src1_endofpacket -> rsp_xbar_mux_001:sink0_endofpacket
	wire         rsp_xbar_demux_src1_valid;                                                                   // rsp_xbar_demux:src1_valid -> rsp_xbar_mux_001:sink0_valid
	wire         rsp_xbar_demux_src1_startofpacket;                                                           // rsp_xbar_demux:src1_startofpacket -> rsp_xbar_mux_001:sink0_startofpacket
	wire  [96:0] rsp_xbar_demux_src1_data;                                                                    // rsp_xbar_demux:src1_data -> rsp_xbar_mux_001:sink0_data
	wire   [4:0] rsp_xbar_demux_src1_channel;                                                                 // rsp_xbar_demux:src1_channel -> rsp_xbar_mux_001:sink0_channel
	wire         rsp_xbar_demux_src1_ready;                                                                   // rsp_xbar_mux_001:sink0_ready -> rsp_xbar_demux:src1_ready
	wire         rsp_xbar_demux_001_src0_endofpacket;                                                         // rsp_xbar_demux_001:src0_endofpacket -> rsp_xbar_mux:sink1_endofpacket
	wire         rsp_xbar_demux_001_src0_valid;                                                               // rsp_xbar_demux_001:src0_valid -> rsp_xbar_mux:sink1_valid
	wire         rsp_xbar_demux_001_src0_startofpacket;                                                       // rsp_xbar_demux_001:src0_startofpacket -> rsp_xbar_mux:sink1_startofpacket
	wire  [96:0] rsp_xbar_demux_001_src0_data;                                                                // rsp_xbar_demux_001:src0_data -> rsp_xbar_mux:sink1_data
	wire   [4:0] rsp_xbar_demux_001_src0_channel;                                                             // rsp_xbar_demux_001:src0_channel -> rsp_xbar_mux:sink1_channel
	wire         rsp_xbar_demux_001_src0_ready;                                                               // rsp_xbar_mux:sink1_ready -> rsp_xbar_demux_001:src0_ready
	wire         rsp_xbar_demux_001_src1_endofpacket;                                                         // rsp_xbar_demux_001:src1_endofpacket -> rsp_xbar_mux_001:sink1_endofpacket
	wire         rsp_xbar_demux_001_src1_valid;                                                               // rsp_xbar_demux_001:src1_valid -> rsp_xbar_mux_001:sink1_valid
	wire         rsp_xbar_demux_001_src1_startofpacket;                                                       // rsp_xbar_demux_001:src1_startofpacket -> rsp_xbar_mux_001:sink1_startofpacket
	wire  [96:0] rsp_xbar_demux_001_src1_data;                                                                // rsp_xbar_demux_001:src1_data -> rsp_xbar_mux_001:sink1_data
	wire   [4:0] rsp_xbar_demux_001_src1_channel;                                                             // rsp_xbar_demux_001:src1_channel -> rsp_xbar_mux_001:sink1_channel
	wire         rsp_xbar_demux_001_src1_ready;                                                               // rsp_xbar_mux_001:sink1_ready -> rsp_xbar_demux_001:src1_ready
	wire         rsp_xbar_demux_002_src0_endofpacket;                                                         // rsp_xbar_demux_002:src0_endofpacket -> rsp_xbar_mux:sink2_endofpacket
	wire         rsp_xbar_demux_002_src0_valid;                                                               // rsp_xbar_demux_002:src0_valid -> rsp_xbar_mux:sink2_valid
	wire         rsp_xbar_demux_002_src0_startofpacket;                                                       // rsp_xbar_demux_002:src0_startofpacket -> rsp_xbar_mux:sink2_startofpacket
	wire  [96:0] rsp_xbar_demux_002_src0_data;                                                                // rsp_xbar_demux_002:src0_data -> rsp_xbar_mux:sink2_data
	wire   [4:0] rsp_xbar_demux_002_src0_channel;                                                             // rsp_xbar_demux_002:src0_channel -> rsp_xbar_mux:sink2_channel
	wire         rsp_xbar_demux_002_src0_ready;                                                               // rsp_xbar_mux:sink2_ready -> rsp_xbar_demux_002:src0_ready
	wire         rsp_xbar_demux_003_src0_endofpacket;                                                         // rsp_xbar_demux_003:src0_endofpacket -> rsp_xbar_mux:sink3_endofpacket
	wire         rsp_xbar_demux_003_src0_valid;                                                               // rsp_xbar_demux_003:src0_valid -> rsp_xbar_mux:sink3_valid
	wire         rsp_xbar_demux_003_src0_startofpacket;                                                       // rsp_xbar_demux_003:src0_startofpacket -> rsp_xbar_mux:sink3_startofpacket
	wire  [96:0] rsp_xbar_demux_003_src0_data;                                                                // rsp_xbar_demux_003:src0_data -> rsp_xbar_mux:sink3_data
	wire   [4:0] rsp_xbar_demux_003_src0_channel;                                                             // rsp_xbar_demux_003:src0_channel -> rsp_xbar_mux:sink3_channel
	wire         rsp_xbar_demux_003_src0_ready;                                                               // rsp_xbar_mux:sink3_ready -> rsp_xbar_demux_003:src0_ready
	wire         rsp_xbar_demux_003_src1_endofpacket;                                                         // rsp_xbar_demux_003:src1_endofpacket -> rsp_xbar_mux_001:sink2_endofpacket
	wire         rsp_xbar_demux_003_src1_valid;                                                               // rsp_xbar_demux_003:src1_valid -> rsp_xbar_mux_001:sink2_valid
	wire         rsp_xbar_demux_003_src1_startofpacket;                                                       // rsp_xbar_demux_003:src1_startofpacket -> rsp_xbar_mux_001:sink2_startofpacket
	wire  [96:0] rsp_xbar_demux_003_src1_data;                                                                // rsp_xbar_demux_003:src1_data -> rsp_xbar_mux_001:sink2_data
	wire   [4:0] rsp_xbar_demux_003_src1_channel;                                                             // rsp_xbar_demux_003:src1_channel -> rsp_xbar_mux_001:sink2_channel
	wire         rsp_xbar_demux_003_src1_ready;                                                               // rsp_xbar_mux_001:sink2_ready -> rsp_xbar_demux_003:src1_ready
	wire         rsp_xbar_demux_004_src0_endofpacket;                                                         // rsp_xbar_demux_004:src0_endofpacket -> rsp_xbar_mux:sink4_endofpacket
	wire         rsp_xbar_demux_004_src0_valid;                                                               // rsp_xbar_demux_004:src0_valid -> rsp_xbar_mux:sink4_valid
	wire         rsp_xbar_demux_004_src0_startofpacket;                                                       // rsp_xbar_demux_004:src0_startofpacket -> rsp_xbar_mux:sink4_startofpacket
	wire  [96:0] rsp_xbar_demux_004_src0_data;                                                                // rsp_xbar_demux_004:src0_data -> rsp_xbar_mux:sink4_data
	wire   [4:0] rsp_xbar_demux_004_src0_channel;                                                             // rsp_xbar_demux_004:src0_channel -> rsp_xbar_mux:sink4_channel
	wire         rsp_xbar_demux_004_src0_ready;                                                               // rsp_xbar_mux:sink4_ready -> rsp_xbar_demux_004:src0_ready
	wire         rsp_xbar_demux_004_src1_endofpacket;                                                         // rsp_xbar_demux_004:src1_endofpacket -> rsp_xbar_mux_001:sink3_endofpacket
	wire         rsp_xbar_demux_004_src1_valid;                                                               // rsp_xbar_demux_004:src1_valid -> rsp_xbar_mux_001:sink3_valid
	wire         rsp_xbar_demux_004_src1_startofpacket;                                                       // rsp_xbar_demux_004:src1_startofpacket -> rsp_xbar_mux_001:sink3_startofpacket
	wire  [96:0] rsp_xbar_demux_004_src1_data;                                                                // rsp_xbar_demux_004:src1_data -> rsp_xbar_mux_001:sink3_data
	wire   [4:0] rsp_xbar_demux_004_src1_channel;                                                             // rsp_xbar_demux_004:src1_channel -> rsp_xbar_mux_001:sink3_channel
	wire         rsp_xbar_demux_004_src1_ready;                                                               // rsp_xbar_mux_001:sink3_ready -> rsp_xbar_demux_004:src1_ready
	wire         id_router_src_endofpacket;                                                                   // id_router:src_endofpacket -> width_adapter:in_endofpacket
	wire         id_router_src_valid;                                                                         // id_router:src_valid -> width_adapter:in_valid
	wire         id_router_src_startofpacket;                                                                 // id_router:src_startofpacket -> width_adapter:in_startofpacket
	wire  [69:0] id_router_src_data;                                                                          // id_router:src_data -> width_adapter:in_data
	wire   [4:0] id_router_src_channel;                                                                       // id_router:src_channel -> width_adapter:in_channel
	wire         id_router_src_ready;                                                                         // width_adapter:in_ready -> id_router:src_ready
	wire         width_adapter_src_endofpacket;                                                               // width_adapter:out_endofpacket -> rsp_xbar_demux:sink_endofpacket
	wire         width_adapter_src_valid;                                                                     // width_adapter:out_valid -> rsp_xbar_demux:sink_valid
	wire         width_adapter_src_startofpacket;                                                             // width_adapter:out_startofpacket -> rsp_xbar_demux:sink_startofpacket
	wire  [96:0] width_adapter_src_data;                                                                      // width_adapter:out_data -> rsp_xbar_demux:sink_data
	wire         width_adapter_src_ready;                                                                     // rsp_xbar_demux:sink_ready -> width_adapter:out_ready
	wire   [4:0] width_adapter_src_channel;                                                                   // width_adapter:out_channel -> rsp_xbar_demux:sink_channel
	wire         id_router_003_src_endofpacket;                                                               // id_router_003:src_endofpacket -> width_adapter_001:in_endofpacket
	wire         id_router_003_src_valid;                                                                     // id_router_003:src_valid -> width_adapter_001:in_valid
	wire         id_router_003_src_startofpacket;                                                             // id_router_003:src_startofpacket -> width_adapter_001:in_startofpacket
	wire  [69:0] id_router_003_src_data;                                                                      // id_router_003:src_data -> width_adapter_001:in_data
	wire   [4:0] id_router_003_src_channel;                                                                   // id_router_003:src_channel -> width_adapter_001:in_channel
	wire         id_router_003_src_ready;                                                                     // width_adapter_001:in_ready -> id_router_003:src_ready
	wire         width_adapter_001_src_endofpacket;                                                           // width_adapter_001:out_endofpacket -> rsp_xbar_demux_003:sink_endofpacket
	wire         width_adapter_001_src_valid;                                                                 // width_adapter_001:out_valid -> rsp_xbar_demux_003:sink_valid
	wire         width_adapter_001_src_startofpacket;                                                         // width_adapter_001:out_startofpacket -> rsp_xbar_demux_003:sink_startofpacket
	wire  [96:0] width_adapter_001_src_data;                                                                  // width_adapter_001:out_data -> rsp_xbar_demux_003:sink_data
	wire         width_adapter_001_src_ready;                                                                 // rsp_xbar_demux_003:sink_ready -> width_adapter_001:out_ready
	wire   [4:0] width_adapter_001_src_channel;                                                               // width_adapter_001:out_channel -> rsp_xbar_demux_003:sink_channel
	wire         id_router_004_src_endofpacket;                                                               // id_router_004:src_endofpacket -> width_adapter_002:in_endofpacket
	wire         id_router_004_src_valid;                                                                     // id_router_004:src_valid -> width_adapter_002:in_valid
	wire         id_router_004_src_startofpacket;                                                             // id_router_004:src_startofpacket -> width_adapter_002:in_startofpacket
	wire  [69:0] id_router_004_src_data;                                                                      // id_router_004:src_data -> width_adapter_002:in_data
	wire   [4:0] id_router_004_src_channel;                                                                   // id_router_004:src_channel -> width_adapter_002:in_channel
	wire         id_router_004_src_ready;                                                                     // width_adapter_002:in_ready -> id_router_004:src_ready
	wire         width_adapter_002_src_endofpacket;                                                           // width_adapter_002:out_endofpacket -> rsp_xbar_demux_004:sink_endofpacket
	wire         width_adapter_002_src_valid;                                                                 // width_adapter_002:out_valid -> rsp_xbar_demux_004:sink_valid
	wire         width_adapter_002_src_startofpacket;                                                         // width_adapter_002:out_startofpacket -> rsp_xbar_demux_004:sink_startofpacket
	wire  [96:0] width_adapter_002_src_data;                                                                  // width_adapter_002:out_data -> rsp_xbar_demux_004:sink_data
	wire         width_adapter_002_src_ready;                                                                 // rsp_xbar_demux_004:sink_ready -> width_adapter_002:out_ready
	wire   [4:0] width_adapter_002_src_channel;                                                               // width_adapter_002:out_channel -> rsp_xbar_demux_004:sink_channel
	wire         cmd_xbar_mux_src_endofpacket;                                                                // cmd_xbar_mux:src_endofpacket -> width_adapter_003:in_endofpacket
	wire         cmd_xbar_mux_src_valid;                                                                      // cmd_xbar_mux:src_valid -> width_adapter_003:in_valid
	wire         cmd_xbar_mux_src_startofpacket;                                                              // cmd_xbar_mux:src_startofpacket -> width_adapter_003:in_startofpacket
	wire  [96:0] cmd_xbar_mux_src_data;                                                                       // cmd_xbar_mux:src_data -> width_adapter_003:in_data
	wire   [4:0] cmd_xbar_mux_src_channel;                                                                    // cmd_xbar_mux:src_channel -> width_adapter_003:in_channel
	wire         cmd_xbar_mux_src_ready;                                                                      // width_adapter_003:in_ready -> cmd_xbar_mux:src_ready
	wire         width_adapter_003_src_endofpacket;                                                           // width_adapter_003:out_endofpacket -> burst_adapter:sink0_endofpacket
	wire         width_adapter_003_src_valid;                                                                 // width_adapter_003:out_valid -> burst_adapter:sink0_valid
	wire         width_adapter_003_src_startofpacket;                                                         // width_adapter_003:out_startofpacket -> burst_adapter:sink0_startofpacket
	wire  [69:0] width_adapter_003_src_data;                                                                  // width_adapter_003:out_data -> burst_adapter:sink0_data
	wire         width_adapter_003_src_ready;                                                                 // burst_adapter:sink0_ready -> width_adapter_003:out_ready
	wire   [4:0] width_adapter_003_src_channel;                                                               // width_adapter_003:out_channel -> burst_adapter:sink0_channel
	wire         cmd_xbar_mux_003_src_endofpacket;                                                            // cmd_xbar_mux_003:src_endofpacket -> width_adapter_004:in_endofpacket
	wire         cmd_xbar_mux_003_src_valid;                                                                  // cmd_xbar_mux_003:src_valid -> width_adapter_004:in_valid
	wire         cmd_xbar_mux_003_src_startofpacket;                                                          // cmd_xbar_mux_003:src_startofpacket -> width_adapter_004:in_startofpacket
	wire  [96:0] cmd_xbar_mux_003_src_data;                                                                   // cmd_xbar_mux_003:src_data -> width_adapter_004:in_data
	wire   [4:0] cmd_xbar_mux_003_src_channel;                                                                // cmd_xbar_mux_003:src_channel -> width_adapter_004:in_channel
	wire         cmd_xbar_mux_003_src_ready;                                                                  // width_adapter_004:in_ready -> cmd_xbar_mux_003:src_ready
	wire         width_adapter_004_src_endofpacket;                                                           // width_adapter_004:out_endofpacket -> burst_adapter_001:sink0_endofpacket
	wire         width_adapter_004_src_valid;                                                                 // width_adapter_004:out_valid -> burst_adapter_001:sink0_valid
	wire         width_adapter_004_src_startofpacket;                                                         // width_adapter_004:out_startofpacket -> burst_adapter_001:sink0_startofpacket
	wire  [69:0] width_adapter_004_src_data;                                                                  // width_adapter_004:out_data -> burst_adapter_001:sink0_data
	wire         width_adapter_004_src_ready;                                                                 // burst_adapter_001:sink0_ready -> width_adapter_004:out_ready
	wire   [4:0] width_adapter_004_src_channel;                                                               // width_adapter_004:out_channel -> burst_adapter_001:sink0_channel
	wire         cmd_xbar_mux_004_src_endofpacket;                                                            // cmd_xbar_mux_004:src_endofpacket -> width_adapter_005:in_endofpacket
	wire         cmd_xbar_mux_004_src_valid;                                                                  // cmd_xbar_mux_004:src_valid -> width_adapter_005:in_valid
	wire         cmd_xbar_mux_004_src_startofpacket;                                                          // cmd_xbar_mux_004:src_startofpacket -> width_adapter_005:in_startofpacket
	wire  [96:0] cmd_xbar_mux_004_src_data;                                                                   // cmd_xbar_mux_004:src_data -> width_adapter_005:in_data
	wire   [4:0] cmd_xbar_mux_004_src_channel;                                                                // cmd_xbar_mux_004:src_channel -> width_adapter_005:in_channel
	wire         cmd_xbar_mux_004_src_ready;                                                                  // width_adapter_005:in_ready -> cmd_xbar_mux_004:src_ready
	wire         width_adapter_005_src_endofpacket;                                                           // width_adapter_005:out_endofpacket -> burst_adapter_002:sink0_endofpacket
	wire         width_adapter_005_src_valid;                                                                 // width_adapter_005:out_valid -> burst_adapter_002:sink0_valid
	wire         width_adapter_005_src_startofpacket;                                                         // width_adapter_005:out_startofpacket -> burst_adapter_002:sink0_startofpacket
	wire  [69:0] width_adapter_005_src_data;                                                                  // width_adapter_005:out_data -> burst_adapter_002:sink0_data
	wire         width_adapter_005_src_ready;                                                                 // burst_adapter_002:sink0_ready -> width_adapter_005:out_ready
	wire   [4:0] width_adapter_005_src_channel;                                                               // width_adapter_005:out_channel -> burst_adapter_002:sink0_channel
	wire   [4:0] limiter_cmd_valid_data;                                                                      // limiter:cmd_src_valid -> cmd_xbar_demux:sink_valid
	wire   [4:0] limiter_001_cmd_valid_data;                                                                  // limiter_001:cmd_src_valid -> cmd_xbar_demux_001:sink_valid

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (21),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (21),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) nios_data_master_translator (
		.clk                      (clk_0_clk_clk),                                                       //                       clk.clk
		.reset                    (nios_reset_n_reset_bridge_in_reset_reset),                            //                     reset.reset
		.uav_address              (nios_data_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (nios_data_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (nios_data_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (nios_data_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (nios_data_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (nios_data_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (nios_data_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (nios_data_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (nios_data_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (nios_data_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (nios_data_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (nios_data_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (nios_data_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable            (nios_data_master_byteenable),                                         //                          .byteenable
		.av_read                  (nios_data_master_read),                                               //                          .read
		.av_readdata              (nios_data_master_readdata),                                           //                          .readdata
		.av_readdatavalid         (nios_data_master_readdatavalid),                                      //                          .readdatavalid
		.av_write                 (nios_data_master_write),                                              //                          .write
		.av_writedata             (nios_data_master_writedata),                                          //                          .writedata
		.av_debugaccess           (nios_data_master_debugaccess),                                        //                          .debugaccess
		.av_burstcount            (1'b1),                                                                //               (terminated)
		.av_beginbursttransfer    (1'b0),                                                                //               (terminated)
		.av_begintransfer         (1'b0),                                                                //               (terminated)
		.av_chipselect            (1'b0),                                                                //               (terminated)
		.av_lock                  (1'b0),                                                                //               (terminated)
		.uav_clken                (),                                                                    //               (terminated)
		.av_clken                 (1'b1),                                                                //               (terminated)
		.uav_response             (2'b00),                                                               //               (terminated)
		.av_response              (),                                                                    //               (terminated)
		.uav_writeresponserequest (),                                                                    //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                                //               (terminated)
		.av_writeresponserequest  (1'b0),                                                                //               (terminated)
		.av_writeresponsevalid    ()                                                                     //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (21),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (21),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (1),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) nios_instruction_master_translator (
		.clk                      (clk_0_clk_clk),                                                              //                       clk.clk
		.reset                    (nios_reset_n_reset_bridge_in_reset_reset),                                   //                     reset.reset
		.uav_address              (nios_instruction_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (nios_instruction_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (nios_instruction_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (nios_instruction_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (nios_instruction_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (nios_instruction_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (nios_instruction_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (nios_instruction_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (nios_instruction_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (nios_instruction_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (nios_instruction_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (nios_instruction_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (nios_instruction_master_waitrequest),                                        //                          .waitrequest
		.av_read                  (nios_instruction_master_read),                                               //                          .read
		.av_readdata              (nios_instruction_master_readdata),                                           //                          .readdata
		.av_readdatavalid         (nios_instruction_master_readdatavalid),                                      //                          .readdatavalid
		.av_burstcount            (1'b1),                                                                       //               (terminated)
		.av_byteenable            (4'b1111),                                                                    //               (terminated)
		.av_beginbursttransfer    (1'b0),                                                                       //               (terminated)
		.av_begintransfer         (1'b0),                                                                       //               (terminated)
		.av_chipselect            (1'b0),                                                                       //               (terminated)
		.av_write                 (1'b0),                                                                       //               (terminated)
		.av_writedata             (32'b00000000000000000000000000000000),                                       //               (terminated)
		.av_lock                  (1'b0),                                                                       //               (terminated)
		.av_debugaccess           (1'b0),                                                                       //               (terminated)
		.uav_clken                (),                                                                           //               (terminated)
		.av_clken                 (1'b1),                                                                       //               (terminated)
		.uav_response             (2'b00),                                                                      //               (terminated)
		.av_response              (),                                                                           //               (terminated)
		.uav_writeresponserequest (),                                                                           //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                                       //               (terminated)
		.av_writeresponserequest  (1'b0),                                                                       //               (terminated)
		.av_writeresponsevalid    ()                                                                            //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (16),
		.AV_DATA_W                      (8),
		.UAV_DATA_W                     (8),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (1),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (1),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (1),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) temp_ram_s1_translator (
		.clk                      (clk_0_clk_clk),                                                          //                      clk.clk
		.reset                    (nios_reset_n_reset_bridge_in_reset_reset),                               //                    reset.reset
		.uav_address              (temp_ram_s1_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (temp_ram_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (temp_ram_s1_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (temp_ram_s1_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (temp_ram_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (temp_ram_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (temp_ram_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (temp_ram_s1_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (temp_ram_s1_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (temp_ram_s1_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (temp_ram_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (temp_ram_s1_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (temp_ram_s1_write),                                                      //                         .write
		.av_readdata              (temp_ram_s1_readdata),                                                   //                         .readdata
		.av_writedata             (temp_ram_s1_writedata),                                                  //                         .writedata
		.av_chipselect            (temp_ram_s1_chipselect),                                                 //                         .chipselect
		.av_clken                 (temp_ram_s1_clken),                                                      //                         .clken
		.av_read                  (),                                                                       //              (terminated)
		.av_begintransfer         (),                                                                       //              (terminated)
		.av_beginbursttransfer    (),                                                                       //              (terminated)
		.av_burstcount            (),                                                                       //              (terminated)
		.av_byteenable            (),                                                                       //              (terminated)
		.av_readdatavalid         (1'b0),                                                                   //              (terminated)
		.av_waitrequest           (1'b0),                                                                   //              (terminated)
		.av_writebyteenable       (),                                                                       //              (terminated)
		.av_lock                  (),                                                                       //              (terminated)
		.uav_clken                (1'b0),                                                                   //              (terminated)
		.av_debugaccess           (),                                                                       //              (terminated)
		.av_outputenable          (),                                                                       //              (terminated)
		.uav_response             (),                                                                       //              (terminated)
		.av_response              (2'b00),                                                                  //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                   //              (terminated)
		.uav_writeresponsevalid   (),                                                                       //              (terminated)
		.av_writeresponserequest  (),                                                                       //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                    //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) nios_jtag_debug_module_translator (
		.clk                      (clk_0_clk_clk),                                                                     //                      clk.clk
		.reset                    (nios_reset_n_reset_bridge_in_reset_reset),                                          //                    reset.reset
		.uav_address              (nios_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (nios_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (nios_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (nios_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (nios_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (nios_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (nios_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (nios_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (nios_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (nios_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (nios_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (nios_jtag_debug_module_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (nios_jtag_debug_module_write),                                                      //                         .write
		.av_read                  (nios_jtag_debug_module_read),                                                       //                         .read
		.av_readdata              (nios_jtag_debug_module_readdata),                                                   //                         .readdata
		.av_writedata             (nios_jtag_debug_module_writedata),                                                  //                         .writedata
		.av_byteenable            (nios_jtag_debug_module_byteenable),                                                 //                         .byteenable
		.av_waitrequest           (nios_jtag_debug_module_waitrequest),                                                //                         .waitrequest
		.av_debugaccess           (nios_jtag_debug_module_debugaccess),                                                //                         .debugaccess
		.av_begintransfer         (),                                                                                  //              (terminated)
		.av_beginbursttransfer    (),                                                                                  //              (terminated)
		.av_burstcount            (),                                                                                  //              (terminated)
		.av_readdatavalid         (1'b0),                                                                              //              (terminated)
		.av_writebyteenable       (),                                                                                  //              (terminated)
		.av_lock                  (),                                                                                  //              (terminated)
		.av_chipselect            (),                                                                                  //              (terminated)
		.av_clken                 (),                                                                                  //              (terminated)
		.uav_clken                (1'b0),                                                                              //              (terminated)
		.av_outputenable          (),                                                                                  //              (terminated)
		.uav_response             (),                                                                                  //              (terminated)
		.av_response              (2'b00),                                                                             //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                              //              (terminated)
		.uav_writeresponsevalid   (),                                                                                  //              (terminated)
		.av_writeresponserequest  (),                                                                                  //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) jtag_avalon_jtag_slave_translator (
		.clk                      (clk_0_clk_clk),                                                                     //                      clk.clk
		.reset                    (nios_reset_n_reset_bridge_in_reset_reset),                                          //                    reset.reset
		.uav_address              (jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (jtag_avalon_jtag_slave_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (jtag_avalon_jtag_slave_write),                                                      //                         .write
		.av_read                  (jtag_avalon_jtag_slave_read),                                                       //                         .read
		.av_readdata              (jtag_avalon_jtag_slave_readdata),                                                   //                         .readdata
		.av_writedata             (jtag_avalon_jtag_slave_writedata),                                                  //                         .writedata
		.av_waitrequest           (jtag_avalon_jtag_slave_waitrequest),                                                //                         .waitrequest
		.av_chipselect            (jtag_avalon_jtag_slave_chipselect),                                                 //                         .chipselect
		.av_begintransfer         (),                                                                                  //              (terminated)
		.av_beginbursttransfer    (),                                                                                  //              (terminated)
		.av_burstcount            (),                                                                                  //              (terminated)
		.av_byteenable            (),                                                                                  //              (terminated)
		.av_readdatavalid         (1'b0),                                                                              //              (terminated)
		.av_writebyteenable       (),                                                                                  //              (terminated)
		.av_lock                  (),                                                                                  //              (terminated)
		.av_clken                 (),                                                                                  //              (terminated)
		.uav_clken                (1'b0),                                                                              //              (terminated)
		.av_debugaccess           (),                                                                                  //              (terminated)
		.av_outputenable          (),                                                                                  //              (terminated)
		.uav_response             (),                                                                                  //              (terminated)
		.av_response              (2'b00),                                                                             //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                              //              (terminated)
		.uav_writeresponsevalid   (),                                                                                  //              (terminated)
		.av_writeresponserequest  (),                                                                                  //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (19),
		.AV_DATA_W                      (8),
		.UAV_DATA_W                     (8),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (1),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (1),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (1),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (1),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) rom_uas_translator (
		.clk                      (clk_0_clk_clk),                                                      //                      clk.clk
		.reset                    (nios_reset_n_reset_bridge_in_reset_reset),                           //                    reset.reset
		.uav_address              (rom_uas_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (rom_uas_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (rom_uas_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (rom_uas_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (rom_uas_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (rom_uas_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (rom_uas_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (rom_uas_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (rom_uas_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (rom_uas_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (rom_uas_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (rom_uas_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (rom_uas_write),                                                      //                         .write
		.av_read                  (rom_uas_read),                                                       //                         .read
		.av_readdata              (rom_uas_readdata),                                                   //                         .readdata
		.av_writedata             (rom_uas_writedata),                                                  //                         .writedata
		.av_burstcount            (rom_uas_burstcount),                                                 //                         .burstcount
		.av_byteenable            (rom_uas_byteenable),                                                 //                         .byteenable
		.av_readdatavalid         (rom_uas_readdatavalid),                                              //                         .readdatavalid
		.av_waitrequest           (rom_uas_waitrequest),                                                //                         .waitrequest
		.av_lock                  (rom_uas_lock),                                                       //                         .lock
		.av_debugaccess           (rom_uas_debugaccess),                                                //                         .debugaccess
		.av_begintransfer         (),                                                                   //              (terminated)
		.av_beginbursttransfer    (),                                                                   //              (terminated)
		.av_writebyteenable       (),                                                                   //              (terminated)
		.av_chipselect            (),                                                                   //              (terminated)
		.av_clken                 (),                                                                   //              (terminated)
		.uav_clken                (1'b0),                                                               //              (terminated)
		.av_outputenable          (),                                                                   //              (terminated)
		.uav_response             (),                                                                   //              (terminated)
		.av_response              (2'b00),                                                              //              (terminated)
		.uav_writeresponserequest (1'b0),                                                               //              (terminated)
		.uav_writeresponsevalid   (),                                                                   //              (terminated)
		.av_writeresponserequest  (),                                                                   //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (17),
		.AV_DATA_W                      (8),
		.UAV_DATA_W                     (8),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (1),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (1),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (1),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (1),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) ram_uas_translator (
		.clk                      (clk_0_clk_clk),                                                      //                      clk.clk
		.reset                    (nios_reset_n_reset_bridge_in_reset_reset),                           //                    reset.reset
		.uav_address              (ram_uas_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (ram_uas_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (ram_uas_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (ram_uas_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (ram_uas_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (ram_uas_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (ram_uas_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (ram_uas_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (ram_uas_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (ram_uas_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (ram_uas_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (ram_uas_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (ram_uas_write),                                                      //                         .write
		.av_read                  (ram_uas_read),                                                       //                         .read
		.av_readdata              (ram_uas_readdata),                                                   //                         .readdata
		.av_writedata             (ram_uas_writedata),                                                  //                         .writedata
		.av_burstcount            (ram_uas_burstcount),                                                 //                         .burstcount
		.av_byteenable            (ram_uas_byteenable),                                                 //                         .byteenable
		.av_readdatavalid         (ram_uas_readdatavalid),                                              //                         .readdatavalid
		.av_waitrequest           (ram_uas_waitrequest),                                                //                         .waitrequest
		.av_lock                  (ram_uas_lock),                                                       //                         .lock
		.av_debugaccess           (ram_uas_debugaccess),                                                //                         .debugaccess
		.av_begintransfer         (),                                                                   //              (terminated)
		.av_beginbursttransfer    (),                                                                   //              (terminated)
		.av_writebyteenable       (),                                                                   //              (terminated)
		.av_chipselect            (),                                                                   //              (terminated)
		.av_clken                 (),                                                                   //              (terminated)
		.uav_clken                (1'b0),                                                               //              (terminated)
		.av_outputenable          (),                                                                   //              (terminated)
		.uav_response             (),                                                                   //              (terminated)
		.av_response              (2'b00),                                                              //              (terminated)
		.uav_writeresponserequest (1'b0),                                                               //              (terminated)
		.uav_writeresponsevalid   (),                                                                   //              (terminated)
		.av_writeresponserequest  (),                                                                   //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (87),
		.PKT_PROTECTION_L          (85),
		.PKT_BEGIN_BURST           (76),
		.PKT_BURSTWRAP_H           (68),
		.PKT_BURSTWRAP_L           (66),
		.PKT_BURST_SIZE_H          (71),
		.PKT_BURST_SIZE_L          (69),
		.PKT_BURST_TYPE_H          (73),
		.PKT_BURST_TYPE_L          (72),
		.PKT_BYTE_CNT_H            (65),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_TRANS_LOCK            (61),
		.PKT_TRANS_EXCLUSIVE       (62),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (78),
		.PKT_DEST_ID_H             (83),
		.PKT_DEST_ID_L             (81),
		.PKT_THREAD_ID_H           (84),
		.PKT_THREAD_ID_L           (84),
		.PKT_CACHE_H               (91),
		.PKT_CACHE_L               (88),
		.PKT_DATA_SIDEBAND_H       (75),
		.PKT_DATA_SIDEBAND_L       (75),
		.PKT_QOS_H                 (77),
		.PKT_QOS_L                 (77),
		.PKT_ADDR_SIDEBAND_H       (74),
		.PKT_ADDR_SIDEBAND_L       (74),
		.PKT_RESPONSE_STATUS_H     (93),
		.PKT_RESPONSE_STATUS_L     (92),
		.PKT_ORI_BURST_SIZE_L      (94),
		.PKT_ORI_BURST_SIZE_H      (96),
		.ST_DATA_W                 (97),
		.ST_CHANNEL_W              (5),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) nios_data_master_translator_avalon_universal_master_0_agent (
		.clk                     (clk_0_clk_clk),                                                                //       clk.clk
		.reset                   (nios_reset_n_reset_bridge_in_reset_reset),                                     // clk_reset.reset
		.av_address              (nios_data_master_translator_avalon_universal_master_0_address),                //        av.address
		.av_write                (nios_data_master_translator_avalon_universal_master_0_write),                  //          .write
		.av_read                 (nios_data_master_translator_avalon_universal_master_0_read),                   //          .read
		.av_writedata            (nios_data_master_translator_avalon_universal_master_0_writedata),              //          .writedata
		.av_readdata             (nios_data_master_translator_avalon_universal_master_0_readdata),               //          .readdata
		.av_waitrequest          (nios_data_master_translator_avalon_universal_master_0_waitrequest),            //          .waitrequest
		.av_readdatavalid        (nios_data_master_translator_avalon_universal_master_0_readdatavalid),          //          .readdatavalid
		.av_byteenable           (nios_data_master_translator_avalon_universal_master_0_byteenable),             //          .byteenable
		.av_burstcount           (nios_data_master_translator_avalon_universal_master_0_burstcount),             //          .burstcount
		.av_debugaccess          (nios_data_master_translator_avalon_universal_master_0_debugaccess),            //          .debugaccess
		.av_lock                 (nios_data_master_translator_avalon_universal_master_0_lock),                   //          .lock
		.cp_valid                (nios_data_master_translator_avalon_universal_master_0_agent_cp_valid),         //        cp.valid
		.cp_data                 (nios_data_master_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.cp_startofpacket        (nios_data_master_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.cp_endofpacket          (nios_data_master_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.cp_ready                (nios_data_master_translator_avalon_universal_master_0_agent_cp_ready),         //          .ready
		.rp_valid                (limiter_rsp_src_valid),                                                        //        rp.valid
		.rp_data                 (limiter_rsp_src_data),                                                         //          .data
		.rp_channel              (limiter_rsp_src_channel),                                                      //          .channel
		.rp_startofpacket        (limiter_rsp_src_startofpacket),                                                //          .startofpacket
		.rp_endofpacket          (limiter_rsp_src_endofpacket),                                                  //          .endofpacket
		.rp_ready                (limiter_rsp_src_ready),                                                        //          .ready
		.av_response             (),                                                                             // (terminated)
		.av_writeresponserequest (1'b0),                                                                         // (terminated)
		.av_writeresponsevalid   ()                                                                              // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (87),
		.PKT_PROTECTION_L          (85),
		.PKT_BEGIN_BURST           (76),
		.PKT_BURSTWRAP_H           (68),
		.PKT_BURSTWRAP_L           (66),
		.PKT_BURST_SIZE_H          (71),
		.PKT_BURST_SIZE_L          (69),
		.PKT_BURST_TYPE_H          (73),
		.PKT_BURST_TYPE_L          (72),
		.PKT_BYTE_CNT_H            (65),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_TRANS_LOCK            (61),
		.PKT_TRANS_EXCLUSIVE       (62),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (78),
		.PKT_DEST_ID_H             (83),
		.PKT_DEST_ID_L             (81),
		.PKT_THREAD_ID_H           (84),
		.PKT_THREAD_ID_L           (84),
		.PKT_CACHE_H               (91),
		.PKT_CACHE_L               (88),
		.PKT_DATA_SIDEBAND_H       (75),
		.PKT_DATA_SIDEBAND_L       (75),
		.PKT_QOS_H                 (77),
		.PKT_QOS_L                 (77),
		.PKT_ADDR_SIDEBAND_H       (74),
		.PKT_ADDR_SIDEBAND_L       (74),
		.PKT_RESPONSE_STATUS_H     (93),
		.PKT_RESPONSE_STATUS_L     (92),
		.PKT_ORI_BURST_SIZE_L      (94),
		.PKT_ORI_BURST_SIZE_H      (96),
		.ST_DATA_W                 (97),
		.ST_CHANNEL_W              (5),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (3),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) nios_instruction_master_translator_avalon_universal_master_0_agent (
		.clk                     (clk_0_clk_clk),                                                                       //       clk.clk
		.reset                   (nios_reset_n_reset_bridge_in_reset_reset),                                            // clk_reset.reset
		.av_address              (nios_instruction_master_translator_avalon_universal_master_0_address),                //        av.address
		.av_write                (nios_instruction_master_translator_avalon_universal_master_0_write),                  //          .write
		.av_read                 (nios_instruction_master_translator_avalon_universal_master_0_read),                   //          .read
		.av_writedata            (nios_instruction_master_translator_avalon_universal_master_0_writedata),              //          .writedata
		.av_readdata             (nios_instruction_master_translator_avalon_universal_master_0_readdata),               //          .readdata
		.av_waitrequest          (nios_instruction_master_translator_avalon_universal_master_0_waitrequest),            //          .waitrequest
		.av_readdatavalid        (nios_instruction_master_translator_avalon_universal_master_0_readdatavalid),          //          .readdatavalid
		.av_byteenable           (nios_instruction_master_translator_avalon_universal_master_0_byteenable),             //          .byteenable
		.av_burstcount           (nios_instruction_master_translator_avalon_universal_master_0_burstcount),             //          .burstcount
		.av_debugaccess          (nios_instruction_master_translator_avalon_universal_master_0_debugaccess),            //          .debugaccess
		.av_lock                 (nios_instruction_master_translator_avalon_universal_master_0_lock),                   //          .lock
		.cp_valid                (nios_instruction_master_translator_avalon_universal_master_0_agent_cp_valid),         //        cp.valid
		.cp_data                 (nios_instruction_master_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.cp_startofpacket        (nios_instruction_master_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.cp_endofpacket          (nios_instruction_master_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.cp_ready                (nios_instruction_master_translator_avalon_universal_master_0_agent_cp_ready),         //          .ready
		.rp_valid                (limiter_001_rsp_src_valid),                                                           //        rp.valid
		.rp_data                 (limiter_001_rsp_src_data),                                                            //          .data
		.rp_channel              (limiter_001_rsp_src_channel),                                                         //          .channel
		.rp_startofpacket        (limiter_001_rsp_src_startofpacket),                                                   //          .startofpacket
		.rp_endofpacket          (limiter_001_rsp_src_endofpacket),                                                     //          .endofpacket
		.rp_ready                (limiter_001_rsp_src_ready),                                                           //          .ready
		.av_response             (),                                                                                    // (terminated)
		.av_writeresponserequest (1'b0),                                                                                // (terminated)
		.av_writeresponsevalid   ()                                                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (7),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (49),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_ADDR_H                (29),
		.PKT_ADDR_L                (9),
		.PKT_TRANS_COMPRESSED_READ (30),
		.PKT_TRANS_POSTED          (31),
		.PKT_TRANS_WRITE           (32),
		.PKT_TRANS_READ            (33),
		.PKT_TRANS_LOCK            (34),
		.PKT_SRC_ID_H              (53),
		.PKT_SRC_ID_L              (51),
		.PKT_DEST_ID_H             (56),
		.PKT_DEST_ID_L             (54),
		.PKT_BURSTWRAP_H           (41),
		.PKT_BURSTWRAP_L           (39),
		.PKT_BYTE_CNT_H            (38),
		.PKT_BYTE_CNT_L            (36),
		.PKT_PROTECTION_H          (60),
		.PKT_PROTECTION_L          (58),
		.PKT_RESPONSE_STATUS_H     (66),
		.PKT_RESPONSE_STATUS_L     (65),
		.PKT_BURST_SIZE_H          (44),
		.PKT_BURST_SIZE_L          (42),
		.PKT_ORI_BURST_SIZE_L      (67),
		.PKT_ORI_BURST_SIZE_H      (69),
		.ST_CHANNEL_W              (5),
		.ST_DATA_W                 (70),
		.AVS_BURSTCOUNT_W          (1),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) temp_ram_s1_translator_avalon_universal_slave_0_agent (
		.clk                     (clk_0_clk_clk),                                                                    //             clk.clk
		.reset                   (nios_reset_n_reset_bridge_in_reset_reset),                                         //       clk_reset.reset
		.m0_address              (temp_ram_s1_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (temp_ram_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (temp_ram_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (temp_ram_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (temp_ram_s1_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (temp_ram_s1_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (temp_ram_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (temp_ram_s1_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (temp_ram_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (temp_ram_s1_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (temp_ram_s1_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (temp_ram_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (temp_ram_s1_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (temp_ram_s1_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (temp_ram_s1_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (temp_ram_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (burst_adapter_source0_ready),                                                      //              cp.ready
		.cp_valid                (burst_adapter_source0_valid),                                                      //                .valid
		.cp_data                 (burst_adapter_source0_data),                                                       //                .data
		.cp_startofpacket        (burst_adapter_source0_startofpacket),                                              //                .startofpacket
		.cp_endofpacket          (burst_adapter_source0_endofpacket),                                                //                .endofpacket
		.cp_channel              (burst_adapter_source0_channel),                                                    //                .channel
		.rf_sink_ready           (temp_ram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (temp_ram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (temp_ram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (temp_ram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (temp_ram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (temp_ram_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (temp_ram_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (temp_ram_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (temp_ram_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (temp_ram_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (temp_ram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (temp_ram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (temp_ram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (temp_ram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (temp_ram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (temp_ram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                            //     (terminated)
		.m0_writeresponserequest (),                                                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (71),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) temp_ram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                                    //       clk.clk
		.reset             (nios_reset_n_reset_bridge_in_reset_reset),                                         // clk_reset.reset
		.in_data           (temp_ram_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (temp_ram_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (temp_ram_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (temp_ram_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (temp_ram_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (temp_ram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (temp_ram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (temp_ram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (temp_ram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (temp_ram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                            // (terminated)
		.csr_read          (1'b0),                                                                             // (terminated)
		.csr_write         (1'b0),                                                                             // (terminated)
		.csr_readdata      (),                                                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                             // (terminated)
		.almost_full_data  (),                                                                                 // (terminated)
		.almost_empty_data (),                                                                                 // (terminated)
		.in_empty          (1'b0),                                                                             // (terminated)
		.out_empty         (),                                                                                 // (terminated)
		.in_error          (1'b0),                                                                             // (terminated)
		.out_error         (),                                                                                 // (terminated)
		.in_channel        (1'b0),                                                                             // (terminated)
		.out_channel       ()                                                                                  // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (76),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_TRANS_LOCK            (61),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (78),
		.PKT_DEST_ID_H             (83),
		.PKT_DEST_ID_L             (81),
		.PKT_BURSTWRAP_H           (68),
		.PKT_BURSTWRAP_L           (66),
		.PKT_BYTE_CNT_H            (65),
		.PKT_BYTE_CNT_L            (63),
		.PKT_PROTECTION_H          (87),
		.PKT_PROTECTION_L          (85),
		.PKT_RESPONSE_STATUS_H     (93),
		.PKT_RESPONSE_STATUS_L     (92),
		.PKT_BURST_SIZE_H          (71),
		.PKT_BURST_SIZE_L          (69),
		.PKT_ORI_BURST_SIZE_L      (94),
		.PKT_ORI_BURST_SIZE_H      (96),
		.ST_CHANNEL_W              (5),
		.ST_DATA_W                 (97),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) nios_jtag_debug_module_translator_avalon_universal_slave_0_agent (
		.clk                     (clk_0_clk_clk),                                                                               //             clk.clk
		.reset                   (nios_reset_n_reset_bridge_in_reset_reset),                                                    //       clk_reset.reset
		.m0_address              (nios_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (nios_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (nios_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (nios_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (nios_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (nios_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (nios_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (nios_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (nios_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (nios_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (nios_jtag_debug_module_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (nios_jtag_debug_module_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (nios_jtag_debug_module_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (nios_jtag_debug_module_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (nios_jtag_debug_module_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (nios_jtag_debug_module_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_xbar_mux_001_src_ready),                                                                  //              cp.ready
		.cp_valid                (cmd_xbar_mux_001_src_valid),                                                                  //                .valid
		.cp_data                 (cmd_xbar_mux_001_src_data),                                                                   //                .data
		.cp_startofpacket        (cmd_xbar_mux_001_src_startofpacket),                                                          //                .startofpacket
		.cp_endofpacket          (cmd_xbar_mux_001_src_endofpacket),                                                            //                .endofpacket
		.cp_channel              (cmd_xbar_mux_001_src_channel),                                                                //                .channel
		.rf_sink_ready           (nios_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (nios_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (nios_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (nios_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (nios_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (nios_jtag_debug_module_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (nios_jtag_debug_module_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (nios_jtag_debug_module_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (nios_jtag_debug_module_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (nios_jtag_debug_module_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (nios_jtag_debug_module_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (nios_jtag_debug_module_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (nios_jtag_debug_module_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (nios_jtag_debug_module_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (nios_jtag_debug_module_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (nios_jtag_debug_module_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                                       //     (terminated)
		.m0_writeresponserequest (),                                                                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (98),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nios_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                                               //       clk.clk
		.reset             (nios_reset_n_reset_bridge_in_reset_reset),                                                    // clk_reset.reset
		.in_data           (nios_jtag_debug_module_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (nios_jtag_debug_module_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (nios_jtag_debug_module_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (nios_jtag_debug_module_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (nios_jtag_debug_module_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (nios_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (nios_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (nios_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (nios_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (nios_jtag_debug_module_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                                       // (terminated)
		.csr_read          (1'b0),                                                                                        // (terminated)
		.csr_write         (1'b0),                                                                                        // (terminated)
		.csr_readdata      (),                                                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                                        // (terminated)
		.almost_full_data  (),                                                                                            // (terminated)
		.almost_empty_data (),                                                                                            // (terminated)
		.in_empty          (1'b0),                                                                                        // (terminated)
		.out_empty         (),                                                                                            // (terminated)
		.in_error          (1'b0),                                                                                        // (terminated)
		.out_error         (),                                                                                            // (terminated)
		.in_channel        (1'b0),                                                                                        // (terminated)
		.out_channel       ()                                                                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (76),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_TRANS_LOCK            (61),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (78),
		.PKT_DEST_ID_H             (83),
		.PKT_DEST_ID_L             (81),
		.PKT_BURSTWRAP_H           (68),
		.PKT_BURSTWRAP_L           (66),
		.PKT_BYTE_CNT_H            (65),
		.PKT_BYTE_CNT_L            (63),
		.PKT_PROTECTION_H          (87),
		.PKT_PROTECTION_L          (85),
		.PKT_RESPONSE_STATUS_H     (93),
		.PKT_RESPONSE_STATUS_L     (92),
		.PKT_BURST_SIZE_H          (71),
		.PKT_BURST_SIZE_L          (69),
		.PKT_ORI_BURST_SIZE_L      (94),
		.PKT_ORI_BURST_SIZE_H      (96),
		.ST_CHANNEL_W              (5),
		.ST_DATA_W                 (97),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent (
		.clk                     (clk_0_clk_clk),                                                                               //             clk.clk
		.reset                   (nios_reset_n_reset_bridge_in_reset_reset),                                                    //       clk_reset.reset
		.m0_address              (jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_xbar_mux_002_src_ready),                                                                  //              cp.ready
		.cp_valid                (cmd_xbar_mux_002_src_valid),                                                                  //                .valid
		.cp_data                 (cmd_xbar_mux_002_src_data),                                                                   //                .data
		.cp_startofpacket        (cmd_xbar_mux_002_src_startofpacket),                                                          //                .startofpacket
		.cp_endofpacket          (cmd_xbar_mux_002_src_endofpacket),                                                            //                .endofpacket
		.cp_channel              (cmd_xbar_mux_002_src_channel),                                                                //                .channel
		.rf_sink_ready           (jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                                       //     (terminated)
		.m0_writeresponserequest (),                                                                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (98),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                                               //       clk.clk
		.reset             (nios_reset_n_reset_bridge_in_reset_reset),                                                    // clk_reset.reset
		.in_data           (jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                                       // (terminated)
		.csr_read          (1'b0),                                                                                        // (terminated)
		.csr_write         (1'b0),                                                                                        // (terminated)
		.csr_readdata      (),                                                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                                        // (terminated)
		.almost_full_data  (),                                                                                            // (terminated)
		.almost_empty_data (),                                                                                            // (terminated)
		.in_empty          (1'b0),                                                                                        // (terminated)
		.out_empty         (),                                                                                            // (terminated)
		.in_error          (1'b0),                                                                                        // (terminated)
		.out_error         (),                                                                                            // (terminated)
		.in_channel        (1'b0),                                                                                        // (terminated)
		.out_channel       ()                                                                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (7),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (49),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_ADDR_H                (29),
		.PKT_ADDR_L                (9),
		.PKT_TRANS_COMPRESSED_READ (30),
		.PKT_TRANS_POSTED          (31),
		.PKT_TRANS_WRITE           (32),
		.PKT_TRANS_READ            (33),
		.PKT_TRANS_LOCK            (34),
		.PKT_SRC_ID_H              (53),
		.PKT_SRC_ID_L              (51),
		.PKT_DEST_ID_H             (56),
		.PKT_DEST_ID_L             (54),
		.PKT_BURSTWRAP_H           (41),
		.PKT_BURSTWRAP_L           (39),
		.PKT_BYTE_CNT_H            (38),
		.PKT_BYTE_CNT_L            (36),
		.PKT_PROTECTION_H          (60),
		.PKT_PROTECTION_L          (58),
		.PKT_RESPONSE_STATUS_H     (66),
		.PKT_RESPONSE_STATUS_L     (65),
		.PKT_BURST_SIZE_H          (44),
		.PKT_BURST_SIZE_L          (42),
		.PKT_ORI_BURST_SIZE_L      (67),
		.PKT_ORI_BURST_SIZE_H      (69),
		.ST_CHANNEL_W              (5),
		.ST_DATA_W                 (70),
		.AVS_BURSTCOUNT_W          (1),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) rom_uas_translator_avalon_universal_slave_0_agent (
		.clk                     (clk_0_clk_clk),                                                                //             clk.clk
		.reset                   (nios_reset_n_reset_bridge_in_reset_reset),                                     //       clk_reset.reset
		.m0_address              (rom_uas_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (rom_uas_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (rom_uas_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (rom_uas_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (rom_uas_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (rom_uas_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (rom_uas_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (rom_uas_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (rom_uas_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (rom_uas_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (rom_uas_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (rom_uas_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (rom_uas_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (rom_uas_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (rom_uas_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (rom_uas_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (burst_adapter_001_source0_ready),                                              //              cp.ready
		.cp_valid                (burst_adapter_001_source0_valid),                                              //                .valid
		.cp_data                 (burst_adapter_001_source0_data),                                               //                .data
		.cp_startofpacket        (burst_adapter_001_source0_startofpacket),                                      //                .startofpacket
		.cp_endofpacket          (burst_adapter_001_source0_endofpacket),                                        //                .endofpacket
		.cp_channel              (burst_adapter_001_source0_channel),                                            //                .channel
		.rf_sink_ready           (rom_uas_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (rom_uas_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (rom_uas_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (rom_uas_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (rom_uas_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (rom_uas_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (rom_uas_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (rom_uas_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (rom_uas_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (rom_uas_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (rom_uas_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (rom_uas_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (rom_uas_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (rom_uas_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (rom_uas_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (rom_uas_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                        //     (terminated)
		.m0_writeresponserequest (),                                                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (71),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) rom_uas_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                                //       clk.clk
		.reset             (nios_reset_n_reset_bridge_in_reset_reset),                                     // clk_reset.reset
		.in_data           (rom_uas_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (rom_uas_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (rom_uas_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (rom_uas_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (rom_uas_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (rom_uas_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (rom_uas_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (rom_uas_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (rom_uas_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (rom_uas_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                        // (terminated)
		.csr_read          (1'b0),                                                                         // (terminated)
		.csr_write         (1'b0),                                                                         // (terminated)
		.csr_readdata      (),                                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                         // (terminated)
		.almost_full_data  (),                                                                             // (terminated)
		.almost_empty_data (),                                                                             // (terminated)
		.in_empty          (1'b0),                                                                         // (terminated)
		.out_empty         (),                                                                             // (terminated)
		.in_error          (1'b0),                                                                         // (terminated)
		.out_error         (),                                                                             // (terminated)
		.in_channel        (1'b0),                                                                         // (terminated)
		.out_channel       ()                                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (7),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (49),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_ADDR_H                (29),
		.PKT_ADDR_L                (9),
		.PKT_TRANS_COMPRESSED_READ (30),
		.PKT_TRANS_POSTED          (31),
		.PKT_TRANS_WRITE           (32),
		.PKT_TRANS_READ            (33),
		.PKT_TRANS_LOCK            (34),
		.PKT_SRC_ID_H              (53),
		.PKT_SRC_ID_L              (51),
		.PKT_DEST_ID_H             (56),
		.PKT_DEST_ID_L             (54),
		.PKT_BURSTWRAP_H           (41),
		.PKT_BURSTWRAP_L           (39),
		.PKT_BYTE_CNT_H            (38),
		.PKT_BYTE_CNT_L            (36),
		.PKT_PROTECTION_H          (60),
		.PKT_PROTECTION_L          (58),
		.PKT_RESPONSE_STATUS_H     (66),
		.PKT_RESPONSE_STATUS_L     (65),
		.PKT_BURST_SIZE_H          (44),
		.PKT_BURST_SIZE_L          (42),
		.PKT_ORI_BURST_SIZE_L      (67),
		.PKT_ORI_BURST_SIZE_H      (69),
		.ST_CHANNEL_W              (5),
		.ST_DATA_W                 (70),
		.AVS_BURSTCOUNT_W          (1),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) ram_uas_translator_avalon_universal_slave_0_agent (
		.clk                     (clk_0_clk_clk),                                                                //             clk.clk
		.reset                   (nios_reset_n_reset_bridge_in_reset_reset),                                     //       clk_reset.reset
		.m0_address              (ram_uas_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (ram_uas_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (ram_uas_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (ram_uas_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (ram_uas_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (ram_uas_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (ram_uas_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (ram_uas_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (ram_uas_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (ram_uas_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (ram_uas_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (ram_uas_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (ram_uas_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (ram_uas_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (ram_uas_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (ram_uas_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (burst_adapter_002_source0_ready),                                              //              cp.ready
		.cp_valid                (burst_adapter_002_source0_valid),                                              //                .valid
		.cp_data                 (burst_adapter_002_source0_data),                                               //                .data
		.cp_startofpacket        (burst_adapter_002_source0_startofpacket),                                      //                .startofpacket
		.cp_endofpacket          (burst_adapter_002_source0_endofpacket),                                        //                .endofpacket
		.cp_channel              (burst_adapter_002_source0_channel),                                            //                .channel
		.rf_sink_ready           (ram_uas_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (ram_uas_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (ram_uas_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (ram_uas_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (ram_uas_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (ram_uas_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (ram_uas_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (ram_uas_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (ram_uas_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (ram_uas_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (ram_uas_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (ram_uas_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (ram_uas_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (ram_uas_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ram_uas_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (ram_uas_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                        //     (terminated)
		.m0_writeresponserequest (),                                                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (71),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ram_uas_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                                //       clk.clk
		.reset             (nios_reset_n_reset_bridge_in_reset_reset),                                     // clk_reset.reset
		.in_data           (ram_uas_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (ram_uas_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (ram_uas_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (ram_uas_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (ram_uas_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (ram_uas_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (ram_uas_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (ram_uas_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (ram_uas_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (ram_uas_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                        // (terminated)
		.csr_read          (1'b0),                                                                         // (terminated)
		.csr_write         (1'b0),                                                                         // (terminated)
		.csr_readdata      (),                                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                         // (terminated)
		.almost_full_data  (),                                                                             // (terminated)
		.almost_empty_data (),                                                                             // (terminated)
		.in_empty          (1'b0),                                                                         // (terminated)
		.out_empty         (),                                                                             // (terminated)
		.in_error          (1'b0),                                                                         // (terminated)
		.out_error         (),                                                                             // (terminated)
		.in_channel        (1'b0),                                                                         // (terminated)
		.out_channel       ()                                                                              // (terminated)
	);

	sopc_scope_sys_mm_interconnect_0_addr_router addr_router (
		.sink_ready         (nios_data_master_translator_avalon_universal_master_0_agent_cp_ready),         //      sink.ready
		.sink_valid         (nios_data_master_translator_avalon_universal_master_0_agent_cp_valid),         //          .valid
		.sink_data          (nios_data_master_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.sink_startofpacket (nios_data_master_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios_data_master_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                                //       clk.clk
		.reset              (nios_reset_n_reset_bridge_in_reset_reset),                                     // clk_reset.reset
		.src_ready          (addr_router_src_ready),                                                        //       src.ready
		.src_valid          (addr_router_src_valid),                                                        //          .valid
		.src_data           (addr_router_src_data),                                                         //          .data
		.src_channel        (addr_router_src_channel),                                                      //          .channel
		.src_startofpacket  (addr_router_src_startofpacket),                                                //          .startofpacket
		.src_endofpacket    (addr_router_src_endofpacket)                                                   //          .endofpacket
	);

	sopc_scope_sys_mm_interconnect_0_addr_router_001 addr_router_001 (
		.sink_ready         (nios_instruction_master_translator_avalon_universal_master_0_agent_cp_ready),         //      sink.ready
		.sink_valid         (nios_instruction_master_translator_avalon_universal_master_0_agent_cp_valid),         //          .valid
		.sink_data          (nios_instruction_master_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.sink_startofpacket (nios_instruction_master_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios_instruction_master_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                                       //       clk.clk
		.reset              (nios_reset_n_reset_bridge_in_reset_reset),                                            // clk_reset.reset
		.src_ready          (addr_router_001_src_ready),                                                           //       src.ready
		.src_valid          (addr_router_001_src_valid),                                                           //          .valid
		.src_data           (addr_router_001_src_data),                                                            //          .data
		.src_channel        (addr_router_001_src_channel),                                                         //          .channel
		.src_startofpacket  (addr_router_001_src_startofpacket),                                                   //          .startofpacket
		.src_endofpacket    (addr_router_001_src_endofpacket)                                                      //          .endofpacket
	);

	sopc_scope_sys_mm_interconnect_0_id_router id_router (
		.sink_ready         (temp_ram_s1_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (temp_ram_s1_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (temp_ram_s1_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (temp_ram_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (temp_ram_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                          //       clk.clk
		.reset              (nios_reset_n_reset_bridge_in_reset_reset),                               // clk_reset.reset
		.src_ready          (id_router_src_ready),                                                    //       src.ready
		.src_valid          (id_router_src_valid),                                                    //          .valid
		.src_data           (id_router_src_data),                                                     //          .data
		.src_channel        (id_router_src_channel),                                                  //          .channel
		.src_startofpacket  (id_router_src_startofpacket),                                            //          .startofpacket
		.src_endofpacket    (id_router_src_endofpacket)                                               //          .endofpacket
	);

	sopc_scope_sys_mm_interconnect_0_id_router_001 id_router_001 (
		.sink_ready         (nios_jtag_debug_module_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (nios_jtag_debug_module_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (nios_jtag_debug_module_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (nios_jtag_debug_module_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios_jtag_debug_module_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                                     //       clk.clk
		.reset              (nios_reset_n_reset_bridge_in_reset_reset),                                          // clk_reset.reset
		.src_ready          (id_router_001_src_ready),                                                           //       src.ready
		.src_valid          (id_router_001_src_valid),                                                           //          .valid
		.src_data           (id_router_001_src_data),                                                            //          .data
		.src_channel        (id_router_001_src_channel),                                                         //          .channel
		.src_startofpacket  (id_router_001_src_startofpacket),                                                   //          .startofpacket
		.src_endofpacket    (id_router_001_src_endofpacket)                                                      //          .endofpacket
	);

	sopc_scope_sys_mm_interconnect_0_id_router_002 id_router_002 (
		.sink_ready         (jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (jtag_avalon_jtag_slave_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                                     //       clk.clk
		.reset              (nios_reset_n_reset_bridge_in_reset_reset),                                          // clk_reset.reset
		.src_ready          (id_router_002_src_ready),                                                           //       src.ready
		.src_valid          (id_router_002_src_valid),                                                           //          .valid
		.src_data           (id_router_002_src_data),                                                            //          .data
		.src_channel        (id_router_002_src_channel),                                                         //          .channel
		.src_startofpacket  (id_router_002_src_startofpacket),                                                   //          .startofpacket
		.src_endofpacket    (id_router_002_src_endofpacket)                                                      //          .endofpacket
	);

	sopc_scope_sys_mm_interconnect_0_id_router id_router_003 (
		.sink_ready         (rom_uas_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (rom_uas_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (rom_uas_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (rom_uas_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (rom_uas_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                      //       clk.clk
		.reset              (nios_reset_n_reset_bridge_in_reset_reset),                           // clk_reset.reset
		.src_ready          (id_router_003_src_ready),                                            //       src.ready
		.src_valid          (id_router_003_src_valid),                                            //          .valid
		.src_data           (id_router_003_src_data),                                             //          .data
		.src_channel        (id_router_003_src_channel),                                          //          .channel
		.src_startofpacket  (id_router_003_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket    (id_router_003_src_endofpacket)                                       //          .endofpacket
	);

	sopc_scope_sys_mm_interconnect_0_id_router id_router_004 (
		.sink_ready         (ram_uas_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (ram_uas_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (ram_uas_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (ram_uas_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (ram_uas_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                      //       clk.clk
		.reset              (nios_reset_n_reset_bridge_in_reset_reset),                           // clk_reset.reset
		.src_ready          (id_router_004_src_ready),                                            //       src.ready
		.src_valid          (id_router_004_src_valid),                                            //          .valid
		.src_data           (id_router_004_src_data),                                             //          .data
		.src_channel        (id_router_004_src_channel),                                          //          .channel
		.src_startofpacket  (id_router_004_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket    (id_router_004_src_endofpacket)                                       //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (83),
		.PKT_DEST_ID_L             (81),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (78),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.MAX_OUTSTANDING_RESPONSES (3),
		.PIPELINED                 (0),
		.ST_DATA_W                 (97),
		.ST_CHANNEL_W              (5),
		.VALID_WIDTH               (5),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.PKT_BYTE_CNT_H            (65),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.REORDER                   (0)
	) limiter (
		.clk                    (clk_0_clk_clk),                            //       clk.clk
		.reset                  (nios_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (addr_router_src_ready),                    //  cmd_sink.ready
		.cmd_sink_valid         (addr_router_src_valid),                    //          .valid
		.cmd_sink_data          (addr_router_src_data),                     //          .data
		.cmd_sink_channel       (addr_router_src_channel),                  //          .channel
		.cmd_sink_startofpacket (addr_router_src_startofpacket),            //          .startofpacket
		.cmd_sink_endofpacket   (addr_router_src_endofpacket),              //          .endofpacket
		.cmd_src_ready          (limiter_cmd_src_ready),                    //   cmd_src.ready
		.cmd_src_data           (limiter_cmd_src_data),                     //          .data
		.cmd_src_channel        (limiter_cmd_src_channel),                  //          .channel
		.cmd_src_startofpacket  (limiter_cmd_src_startofpacket),            //          .startofpacket
		.cmd_src_endofpacket    (limiter_cmd_src_endofpacket),              //          .endofpacket
		.rsp_sink_ready         (rsp_xbar_mux_src_ready),                   //  rsp_sink.ready
		.rsp_sink_valid         (rsp_xbar_mux_src_valid),                   //          .valid
		.rsp_sink_channel       (rsp_xbar_mux_src_channel),                 //          .channel
		.rsp_sink_data          (rsp_xbar_mux_src_data),                    //          .data
		.rsp_sink_startofpacket (rsp_xbar_mux_src_startofpacket),           //          .startofpacket
		.rsp_sink_endofpacket   (rsp_xbar_mux_src_endofpacket),             //          .endofpacket
		.rsp_src_ready          (limiter_rsp_src_ready),                    //   rsp_src.ready
		.rsp_src_valid          (limiter_rsp_src_valid),                    //          .valid
		.rsp_src_data           (limiter_rsp_src_data),                     //          .data
		.rsp_src_channel        (limiter_rsp_src_channel),                  //          .channel
		.rsp_src_startofpacket  (limiter_rsp_src_startofpacket),            //          .startofpacket
		.rsp_src_endofpacket    (limiter_rsp_src_endofpacket),              //          .endofpacket
		.cmd_src_valid          (limiter_cmd_valid_data)                    // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (83),
		.PKT_DEST_ID_L             (81),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (78),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.MAX_OUTSTANDING_RESPONSES (3),
		.PIPELINED                 (0),
		.ST_DATA_W                 (97),
		.ST_CHANNEL_W              (5),
		.VALID_WIDTH               (5),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.PKT_BYTE_CNT_H            (65),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.REORDER                   (0)
	) limiter_001 (
		.clk                    (clk_0_clk_clk),                            //       clk.clk
		.reset                  (nios_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (addr_router_001_src_ready),                //  cmd_sink.ready
		.cmd_sink_valid         (addr_router_001_src_valid),                //          .valid
		.cmd_sink_data          (addr_router_001_src_data),                 //          .data
		.cmd_sink_channel       (addr_router_001_src_channel),              //          .channel
		.cmd_sink_startofpacket (addr_router_001_src_startofpacket),        //          .startofpacket
		.cmd_sink_endofpacket   (addr_router_001_src_endofpacket),          //          .endofpacket
		.cmd_src_ready          (limiter_001_cmd_src_ready),                //   cmd_src.ready
		.cmd_src_data           (limiter_001_cmd_src_data),                 //          .data
		.cmd_src_channel        (limiter_001_cmd_src_channel),              //          .channel
		.cmd_src_startofpacket  (limiter_001_cmd_src_startofpacket),        //          .startofpacket
		.cmd_src_endofpacket    (limiter_001_cmd_src_endofpacket),          //          .endofpacket
		.rsp_sink_ready         (rsp_xbar_mux_001_src_ready),               //  rsp_sink.ready
		.rsp_sink_valid         (rsp_xbar_mux_001_src_valid),               //          .valid
		.rsp_sink_channel       (rsp_xbar_mux_001_src_channel),             //          .channel
		.rsp_sink_data          (rsp_xbar_mux_001_src_data),                //          .data
		.rsp_sink_startofpacket (rsp_xbar_mux_001_src_startofpacket),       //          .startofpacket
		.rsp_sink_endofpacket   (rsp_xbar_mux_001_src_endofpacket),         //          .endofpacket
		.rsp_src_ready          (limiter_001_rsp_src_ready),                //   rsp_src.ready
		.rsp_src_valid          (limiter_001_rsp_src_valid),                //          .valid
		.rsp_src_data           (limiter_001_rsp_src_data),                 //          .data
		.rsp_src_channel        (limiter_001_rsp_src_channel),              //          .channel
		.rsp_src_startofpacket  (limiter_001_rsp_src_startofpacket),        //          .startofpacket
		.rsp_src_endofpacket    (limiter_001_rsp_src_endofpacket),          //          .endofpacket
		.cmd_src_valid          (limiter_001_cmd_valid_data)                // cmd_valid.data
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (29),
		.PKT_ADDR_L                (9),
		.PKT_BEGIN_BURST           (49),
		.PKT_BYTE_CNT_H            (38),
		.PKT_BYTE_CNT_L            (36),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_BURST_SIZE_H          (44),
		.PKT_BURST_SIZE_L          (42),
		.PKT_BURST_TYPE_H          (46),
		.PKT_BURST_TYPE_L          (45),
		.PKT_BURSTWRAP_H           (41),
		.PKT_BURSTWRAP_L           (39),
		.PKT_TRANS_COMPRESSED_READ (30),
		.PKT_TRANS_WRITE           (32),
		.PKT_TRANS_READ            (33),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (70),
		.ST_CHANNEL_W              (5),
		.OUT_BYTE_CNT_H            (36),
		.OUT_BURSTWRAP_H           (41),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.BURSTWRAP_CONST_MASK      (3),
		.BURSTWRAP_CONST_VALUE     (3)
	) burst_adapter (
		.clk                   (clk_0_clk_clk),                            //       cr0.clk
		.reset                 (nios_reset_n_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (width_adapter_003_src_valid),              //     sink0.valid
		.sink0_data            (width_adapter_003_src_data),               //          .data
		.sink0_channel         (width_adapter_003_src_channel),            //          .channel
		.sink0_startofpacket   (width_adapter_003_src_startofpacket),      //          .startofpacket
		.sink0_endofpacket     (width_adapter_003_src_endofpacket),        //          .endofpacket
		.sink0_ready           (width_adapter_003_src_ready),              //          .ready
		.source0_valid         (burst_adapter_source0_valid),              //   source0.valid
		.source0_data          (burst_adapter_source0_data),               //          .data
		.source0_channel       (burst_adapter_source0_channel),            //          .channel
		.source0_startofpacket (burst_adapter_source0_startofpacket),      //          .startofpacket
		.source0_endofpacket   (burst_adapter_source0_endofpacket),        //          .endofpacket
		.source0_ready         (burst_adapter_source0_ready)               //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (29),
		.PKT_ADDR_L                (9),
		.PKT_BEGIN_BURST           (49),
		.PKT_BYTE_CNT_H            (38),
		.PKT_BYTE_CNT_L            (36),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_BURST_SIZE_H          (44),
		.PKT_BURST_SIZE_L          (42),
		.PKT_BURST_TYPE_H          (46),
		.PKT_BURST_TYPE_L          (45),
		.PKT_BURSTWRAP_H           (41),
		.PKT_BURSTWRAP_L           (39),
		.PKT_TRANS_COMPRESSED_READ (30),
		.PKT_TRANS_WRITE           (32),
		.PKT_TRANS_READ            (33),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (70),
		.ST_CHANNEL_W              (5),
		.OUT_BYTE_CNT_H            (36),
		.OUT_BURSTWRAP_H           (41),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.BURSTWRAP_CONST_MASK      (3),
		.BURSTWRAP_CONST_VALUE     (3)
	) burst_adapter_001 (
		.clk                   (clk_0_clk_clk),                            //       cr0.clk
		.reset                 (nios_reset_n_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (width_adapter_004_src_valid),              //     sink0.valid
		.sink0_data            (width_adapter_004_src_data),               //          .data
		.sink0_channel         (width_adapter_004_src_channel),            //          .channel
		.sink0_startofpacket   (width_adapter_004_src_startofpacket),      //          .startofpacket
		.sink0_endofpacket     (width_adapter_004_src_endofpacket),        //          .endofpacket
		.sink0_ready           (width_adapter_004_src_ready),              //          .ready
		.source0_valid         (burst_adapter_001_source0_valid),          //   source0.valid
		.source0_data          (burst_adapter_001_source0_data),           //          .data
		.source0_channel       (burst_adapter_001_source0_channel),        //          .channel
		.source0_startofpacket (burst_adapter_001_source0_startofpacket),  //          .startofpacket
		.source0_endofpacket   (burst_adapter_001_source0_endofpacket),    //          .endofpacket
		.source0_ready         (burst_adapter_001_source0_ready)           //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (29),
		.PKT_ADDR_L                (9),
		.PKT_BEGIN_BURST           (49),
		.PKT_BYTE_CNT_H            (38),
		.PKT_BYTE_CNT_L            (36),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_BURST_SIZE_H          (44),
		.PKT_BURST_SIZE_L          (42),
		.PKT_BURST_TYPE_H          (46),
		.PKT_BURST_TYPE_L          (45),
		.PKT_BURSTWRAP_H           (41),
		.PKT_BURSTWRAP_L           (39),
		.PKT_TRANS_COMPRESSED_READ (30),
		.PKT_TRANS_WRITE           (32),
		.PKT_TRANS_READ            (33),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (70),
		.ST_CHANNEL_W              (5),
		.OUT_BYTE_CNT_H            (36),
		.OUT_BURSTWRAP_H           (41),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.BURSTWRAP_CONST_MASK      (3),
		.BURSTWRAP_CONST_VALUE     (3)
	) burst_adapter_002 (
		.clk                   (clk_0_clk_clk),                            //       cr0.clk
		.reset                 (nios_reset_n_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (width_adapter_005_src_valid),              //     sink0.valid
		.sink0_data            (width_adapter_005_src_data),               //          .data
		.sink0_channel         (width_adapter_005_src_channel),            //          .channel
		.sink0_startofpacket   (width_adapter_005_src_startofpacket),      //          .startofpacket
		.sink0_endofpacket     (width_adapter_005_src_endofpacket),        //          .endofpacket
		.sink0_ready           (width_adapter_005_src_ready),              //          .ready
		.source0_valid         (burst_adapter_002_source0_valid),          //   source0.valid
		.source0_data          (burst_adapter_002_source0_data),           //          .data
		.source0_channel       (burst_adapter_002_source0_channel),        //          .channel
		.source0_startofpacket (burst_adapter_002_source0_startofpacket),  //          .startofpacket
		.source0_endofpacket   (burst_adapter_002_source0_endofpacket),    //          .endofpacket
		.source0_ready         (burst_adapter_002_source0_ready)           //          .ready
	);

	sopc_scope_sys_mm_interconnect_0_cmd_xbar_demux cmd_xbar_demux (
		.clk                (clk_0_clk_clk),                            //        clk.clk
		.reset              (nios_reset_n_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready         (limiter_cmd_src_ready),                    //       sink.ready
		.sink_channel       (limiter_cmd_src_channel),                  //           .channel
		.sink_data          (limiter_cmd_src_data),                     //           .data
		.sink_startofpacket (limiter_cmd_src_startofpacket),            //           .startofpacket
		.sink_endofpacket   (limiter_cmd_src_endofpacket),              //           .endofpacket
		.sink_valid         (limiter_cmd_valid_data),                   // sink_valid.data
		.src0_ready         (cmd_xbar_demux_src0_ready),                //       src0.ready
		.src0_valid         (cmd_xbar_demux_src0_valid),                //           .valid
		.src0_data          (cmd_xbar_demux_src0_data),                 //           .data
		.src0_channel       (cmd_xbar_demux_src0_channel),              //           .channel
		.src0_startofpacket (cmd_xbar_demux_src0_startofpacket),        //           .startofpacket
		.src0_endofpacket   (cmd_xbar_demux_src0_endofpacket),          //           .endofpacket
		.src1_ready         (cmd_xbar_demux_src1_ready),                //       src1.ready
		.src1_valid         (cmd_xbar_demux_src1_valid),                //           .valid
		.src1_data          (cmd_xbar_demux_src1_data),                 //           .data
		.src1_channel       (cmd_xbar_demux_src1_channel),              //           .channel
		.src1_startofpacket (cmd_xbar_demux_src1_startofpacket),        //           .startofpacket
		.src1_endofpacket   (cmd_xbar_demux_src1_endofpacket),          //           .endofpacket
		.src2_ready         (cmd_xbar_demux_src2_ready),                //       src2.ready
		.src2_valid         (cmd_xbar_demux_src2_valid),                //           .valid
		.src2_data          (cmd_xbar_demux_src2_data),                 //           .data
		.src2_channel       (cmd_xbar_demux_src2_channel),              //           .channel
		.src2_startofpacket (cmd_xbar_demux_src2_startofpacket),        //           .startofpacket
		.src2_endofpacket   (cmd_xbar_demux_src2_endofpacket),          //           .endofpacket
		.src3_ready         (cmd_xbar_demux_src3_ready),                //       src3.ready
		.src3_valid         (cmd_xbar_demux_src3_valid),                //           .valid
		.src3_data          (cmd_xbar_demux_src3_data),                 //           .data
		.src3_channel       (cmd_xbar_demux_src3_channel),              //           .channel
		.src3_startofpacket (cmd_xbar_demux_src3_startofpacket),        //           .startofpacket
		.src3_endofpacket   (cmd_xbar_demux_src3_endofpacket),          //           .endofpacket
		.src4_ready         (cmd_xbar_demux_src4_ready),                //       src4.ready
		.src4_valid         (cmd_xbar_demux_src4_valid),                //           .valid
		.src4_data          (cmd_xbar_demux_src4_data),                 //           .data
		.src4_channel       (cmd_xbar_demux_src4_channel),              //           .channel
		.src4_startofpacket (cmd_xbar_demux_src4_startofpacket),        //           .startofpacket
		.src4_endofpacket   (cmd_xbar_demux_src4_endofpacket)           //           .endofpacket
	);

	sopc_scope_sys_mm_interconnect_0_cmd_xbar_demux_001 cmd_xbar_demux_001 (
		.clk                (clk_0_clk_clk),                            //        clk.clk
		.reset              (nios_reset_n_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready         (limiter_001_cmd_src_ready),                //       sink.ready
		.sink_channel       (limiter_001_cmd_src_channel),              //           .channel
		.sink_data          (limiter_001_cmd_src_data),                 //           .data
		.sink_startofpacket (limiter_001_cmd_src_startofpacket),        //           .startofpacket
		.sink_endofpacket   (limiter_001_cmd_src_endofpacket),          //           .endofpacket
		.sink_valid         (limiter_001_cmd_valid_data),               // sink_valid.data
		.src0_ready         (cmd_xbar_demux_001_src0_ready),            //       src0.ready
		.src0_valid         (cmd_xbar_demux_001_src0_valid),            //           .valid
		.src0_data          (cmd_xbar_demux_001_src0_data),             //           .data
		.src0_channel       (cmd_xbar_demux_001_src0_channel),          //           .channel
		.src0_startofpacket (cmd_xbar_demux_001_src0_startofpacket),    //           .startofpacket
		.src0_endofpacket   (cmd_xbar_demux_001_src0_endofpacket),      //           .endofpacket
		.src1_ready         (cmd_xbar_demux_001_src1_ready),            //       src1.ready
		.src1_valid         (cmd_xbar_demux_001_src1_valid),            //           .valid
		.src1_data          (cmd_xbar_demux_001_src1_data),             //           .data
		.src1_channel       (cmd_xbar_demux_001_src1_channel),          //           .channel
		.src1_startofpacket (cmd_xbar_demux_001_src1_startofpacket),    //           .startofpacket
		.src1_endofpacket   (cmd_xbar_demux_001_src1_endofpacket),      //           .endofpacket
		.src2_ready         (cmd_xbar_demux_001_src2_ready),            //       src2.ready
		.src2_valid         (cmd_xbar_demux_001_src2_valid),            //           .valid
		.src2_data          (cmd_xbar_demux_001_src2_data),             //           .data
		.src2_channel       (cmd_xbar_demux_001_src2_channel),          //           .channel
		.src2_startofpacket (cmd_xbar_demux_001_src2_startofpacket),    //           .startofpacket
		.src2_endofpacket   (cmd_xbar_demux_001_src2_endofpacket),      //           .endofpacket
		.src3_ready         (cmd_xbar_demux_001_src3_ready),            //       src3.ready
		.src3_valid         (cmd_xbar_demux_001_src3_valid),            //           .valid
		.src3_data          (cmd_xbar_demux_001_src3_data),             //           .data
		.src3_channel       (cmd_xbar_demux_001_src3_channel),          //           .channel
		.src3_startofpacket (cmd_xbar_demux_001_src3_startofpacket),    //           .startofpacket
		.src3_endofpacket   (cmd_xbar_demux_001_src3_endofpacket)       //           .endofpacket
	);

	sopc_scope_sys_mm_interconnect_0_cmd_xbar_mux cmd_xbar_mux (
		.clk                 (clk_0_clk_clk),                            //       clk.clk
		.reset               (nios_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_src_ready),                   //       src.ready
		.src_valid           (cmd_xbar_mux_src_valid),                   //          .valid
		.src_data            (cmd_xbar_mux_src_data),                    //          .data
		.src_channel         (cmd_xbar_mux_src_channel),                 //          .channel
		.src_startofpacket   (cmd_xbar_mux_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_src0_ready),                //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_src0_valid),                //          .valid
		.sink0_channel       (cmd_xbar_demux_src0_channel),              //          .channel
		.sink0_data          (cmd_xbar_demux_src0_data),                 //          .data
		.sink0_startofpacket (cmd_xbar_demux_src0_startofpacket),        //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_src0_endofpacket),          //          .endofpacket
		.sink1_ready         (cmd_xbar_demux_001_src0_ready),            //     sink1.ready
		.sink1_valid         (cmd_xbar_demux_001_src0_valid),            //          .valid
		.sink1_channel       (cmd_xbar_demux_001_src0_channel),          //          .channel
		.sink1_data          (cmd_xbar_demux_001_src0_data),             //          .data
		.sink1_startofpacket (cmd_xbar_demux_001_src0_startofpacket),    //          .startofpacket
		.sink1_endofpacket   (cmd_xbar_demux_001_src0_endofpacket)       //          .endofpacket
	);

	sopc_scope_sys_mm_interconnect_0_cmd_xbar_mux cmd_xbar_mux_001 (
		.clk                 (clk_0_clk_clk),                            //       clk.clk
		.reset               (nios_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_001_src_ready),               //       src.ready
		.src_valid           (cmd_xbar_mux_001_src_valid),               //          .valid
		.src_data            (cmd_xbar_mux_001_src_data),                //          .data
		.src_channel         (cmd_xbar_mux_001_src_channel),             //          .channel
		.src_startofpacket   (cmd_xbar_mux_001_src_startofpacket),       //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_001_src_endofpacket),         //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_src1_ready),                //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_src1_valid),                //          .valid
		.sink0_channel       (cmd_xbar_demux_src1_channel),              //          .channel
		.sink0_data          (cmd_xbar_demux_src1_data),                 //          .data
		.sink0_startofpacket (cmd_xbar_demux_src1_startofpacket),        //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_src1_endofpacket),          //          .endofpacket
		.sink1_ready         (cmd_xbar_demux_001_src1_ready),            //     sink1.ready
		.sink1_valid         (cmd_xbar_demux_001_src1_valid),            //          .valid
		.sink1_channel       (cmd_xbar_demux_001_src1_channel),          //          .channel
		.sink1_data          (cmd_xbar_demux_001_src1_data),             //          .data
		.sink1_startofpacket (cmd_xbar_demux_001_src1_startofpacket),    //          .startofpacket
		.sink1_endofpacket   (cmd_xbar_demux_001_src1_endofpacket)       //          .endofpacket
	);

	sopc_scope_sys_mm_interconnect_0_cmd_xbar_mux_002 cmd_xbar_mux_002 (
		.clk                 (clk_0_clk_clk),                            //       clk.clk
		.reset               (nios_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_002_src_ready),               //       src.ready
		.src_valid           (cmd_xbar_mux_002_src_valid),               //          .valid
		.src_data            (cmd_xbar_mux_002_src_data),                //          .data
		.src_channel         (cmd_xbar_mux_002_src_channel),             //          .channel
		.src_startofpacket   (cmd_xbar_mux_002_src_startofpacket),       //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_002_src_endofpacket),         //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_src2_ready),                //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_src2_valid),                //          .valid
		.sink0_channel       (cmd_xbar_demux_src2_channel),              //          .channel
		.sink0_data          (cmd_xbar_demux_src2_data),                 //          .data
		.sink0_startofpacket (cmd_xbar_demux_src2_startofpacket),        //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_src2_endofpacket)           //          .endofpacket
	);

	sopc_scope_sys_mm_interconnect_0_cmd_xbar_mux cmd_xbar_mux_003 (
		.clk                 (clk_0_clk_clk),                            //       clk.clk
		.reset               (nios_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_003_src_ready),               //       src.ready
		.src_valid           (cmd_xbar_mux_003_src_valid),               //          .valid
		.src_data            (cmd_xbar_mux_003_src_data),                //          .data
		.src_channel         (cmd_xbar_mux_003_src_channel),             //          .channel
		.src_startofpacket   (cmd_xbar_mux_003_src_startofpacket),       //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_003_src_endofpacket),         //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_src3_ready),                //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_src3_valid),                //          .valid
		.sink0_channel       (cmd_xbar_demux_src3_channel),              //          .channel
		.sink0_data          (cmd_xbar_demux_src3_data),                 //          .data
		.sink0_startofpacket (cmd_xbar_demux_src3_startofpacket),        //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_src3_endofpacket),          //          .endofpacket
		.sink1_ready         (cmd_xbar_demux_001_src2_ready),            //     sink1.ready
		.sink1_valid         (cmd_xbar_demux_001_src2_valid),            //          .valid
		.sink1_channel       (cmd_xbar_demux_001_src2_channel),          //          .channel
		.sink1_data          (cmd_xbar_demux_001_src2_data),             //          .data
		.sink1_startofpacket (cmd_xbar_demux_001_src2_startofpacket),    //          .startofpacket
		.sink1_endofpacket   (cmd_xbar_demux_001_src2_endofpacket)       //          .endofpacket
	);

	sopc_scope_sys_mm_interconnect_0_cmd_xbar_mux cmd_xbar_mux_004 (
		.clk                 (clk_0_clk_clk),                            //       clk.clk
		.reset               (nios_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_004_src_ready),               //       src.ready
		.src_valid           (cmd_xbar_mux_004_src_valid),               //          .valid
		.src_data            (cmd_xbar_mux_004_src_data),                //          .data
		.src_channel         (cmd_xbar_mux_004_src_channel),             //          .channel
		.src_startofpacket   (cmd_xbar_mux_004_src_startofpacket),       //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_004_src_endofpacket),         //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_src4_ready),                //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_src4_valid),                //          .valid
		.sink0_channel       (cmd_xbar_demux_src4_channel),              //          .channel
		.sink0_data          (cmd_xbar_demux_src4_data),                 //          .data
		.sink0_startofpacket (cmd_xbar_demux_src4_startofpacket),        //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_src4_endofpacket),          //          .endofpacket
		.sink1_ready         (cmd_xbar_demux_001_src3_ready),            //     sink1.ready
		.sink1_valid         (cmd_xbar_demux_001_src3_valid),            //          .valid
		.sink1_channel       (cmd_xbar_demux_001_src3_channel),          //          .channel
		.sink1_data          (cmd_xbar_demux_001_src3_data),             //          .data
		.sink1_startofpacket (cmd_xbar_demux_001_src3_startofpacket),    //          .startofpacket
		.sink1_endofpacket   (cmd_xbar_demux_001_src3_endofpacket)       //          .endofpacket
	);

	sopc_scope_sys_mm_interconnect_0_rsp_xbar_demux rsp_xbar_demux (
		.clk                (clk_0_clk_clk),                            //       clk.clk
		.reset              (nios_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (width_adapter_src_ready),                  //      sink.ready
		.sink_channel       (width_adapter_src_channel),                //          .channel
		.sink_data          (width_adapter_src_data),                   //          .data
		.sink_startofpacket (width_adapter_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (width_adapter_src_endofpacket),            //          .endofpacket
		.sink_valid         (width_adapter_src_valid),                  //          .valid
		.src0_ready         (rsp_xbar_demux_src0_ready),                //      src0.ready
		.src0_valid         (rsp_xbar_demux_src0_valid),                //          .valid
		.src0_data          (rsp_xbar_demux_src0_data),                 //          .data
		.src0_channel       (rsp_xbar_demux_src0_channel),              //          .channel
		.src0_startofpacket (rsp_xbar_demux_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_src0_endofpacket),          //          .endofpacket
		.src1_ready         (rsp_xbar_demux_src1_ready),                //      src1.ready
		.src1_valid         (rsp_xbar_demux_src1_valid),                //          .valid
		.src1_data          (rsp_xbar_demux_src1_data),                 //          .data
		.src1_channel       (rsp_xbar_demux_src1_channel),              //          .channel
		.src1_startofpacket (rsp_xbar_demux_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_src1_endofpacket)           //          .endofpacket
	);

	sopc_scope_sys_mm_interconnect_0_rsp_xbar_demux rsp_xbar_demux_001 (
		.clk                (clk_0_clk_clk),                            //       clk.clk
		.reset              (nios_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_001_src_ready),                  //      sink.ready
		.sink_channel       (id_router_001_src_channel),                //          .channel
		.sink_data          (id_router_001_src_data),                   //          .data
		.sink_startofpacket (id_router_001_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (id_router_001_src_endofpacket),            //          .endofpacket
		.sink_valid         (id_router_001_src_valid),                  //          .valid
		.src0_ready         (rsp_xbar_demux_001_src0_ready),            //      src0.ready
		.src0_valid         (rsp_xbar_demux_001_src0_valid),            //          .valid
		.src0_data          (rsp_xbar_demux_001_src0_data),             //          .data
		.src0_channel       (rsp_xbar_demux_001_src0_channel),          //          .channel
		.src0_startofpacket (rsp_xbar_demux_001_src0_startofpacket),    //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_001_src0_endofpacket),      //          .endofpacket
		.src1_ready         (rsp_xbar_demux_001_src1_ready),            //      src1.ready
		.src1_valid         (rsp_xbar_demux_001_src1_valid),            //          .valid
		.src1_data          (rsp_xbar_demux_001_src1_data),             //          .data
		.src1_channel       (rsp_xbar_demux_001_src1_channel),          //          .channel
		.src1_startofpacket (rsp_xbar_demux_001_src1_startofpacket),    //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_001_src1_endofpacket)       //          .endofpacket
	);

	sopc_scope_sys_mm_interconnect_0_rsp_xbar_demux_002 rsp_xbar_demux_002 (
		.clk                (clk_0_clk_clk),                            //       clk.clk
		.reset              (nios_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_002_src_ready),                  //      sink.ready
		.sink_channel       (id_router_002_src_channel),                //          .channel
		.sink_data          (id_router_002_src_data),                   //          .data
		.sink_startofpacket (id_router_002_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (id_router_002_src_endofpacket),            //          .endofpacket
		.sink_valid         (id_router_002_src_valid),                  //          .valid
		.src0_ready         (rsp_xbar_demux_002_src0_ready),            //      src0.ready
		.src0_valid         (rsp_xbar_demux_002_src0_valid),            //          .valid
		.src0_data          (rsp_xbar_demux_002_src0_data),             //          .data
		.src0_channel       (rsp_xbar_demux_002_src0_channel),          //          .channel
		.src0_startofpacket (rsp_xbar_demux_002_src0_startofpacket),    //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_002_src0_endofpacket)       //          .endofpacket
	);

	sopc_scope_sys_mm_interconnect_0_rsp_xbar_demux rsp_xbar_demux_003 (
		.clk                (clk_0_clk_clk),                            //       clk.clk
		.reset              (nios_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (width_adapter_001_src_ready),              //      sink.ready
		.sink_channel       (width_adapter_001_src_channel),            //          .channel
		.sink_data          (width_adapter_001_src_data),               //          .data
		.sink_startofpacket (width_adapter_001_src_startofpacket),      //          .startofpacket
		.sink_endofpacket   (width_adapter_001_src_endofpacket),        //          .endofpacket
		.sink_valid         (width_adapter_001_src_valid),              //          .valid
		.src0_ready         (rsp_xbar_demux_003_src0_ready),            //      src0.ready
		.src0_valid         (rsp_xbar_demux_003_src0_valid),            //          .valid
		.src0_data          (rsp_xbar_demux_003_src0_data),             //          .data
		.src0_channel       (rsp_xbar_demux_003_src0_channel),          //          .channel
		.src0_startofpacket (rsp_xbar_demux_003_src0_startofpacket),    //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_003_src0_endofpacket),      //          .endofpacket
		.src1_ready         (rsp_xbar_demux_003_src1_ready),            //      src1.ready
		.src1_valid         (rsp_xbar_demux_003_src1_valid),            //          .valid
		.src1_data          (rsp_xbar_demux_003_src1_data),             //          .data
		.src1_channel       (rsp_xbar_demux_003_src1_channel),          //          .channel
		.src1_startofpacket (rsp_xbar_demux_003_src1_startofpacket),    //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_003_src1_endofpacket)       //          .endofpacket
	);

	sopc_scope_sys_mm_interconnect_0_rsp_xbar_demux rsp_xbar_demux_004 (
		.clk                (clk_0_clk_clk),                            //       clk.clk
		.reset              (nios_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (width_adapter_002_src_ready),              //      sink.ready
		.sink_channel       (width_adapter_002_src_channel),            //          .channel
		.sink_data          (width_adapter_002_src_data),               //          .data
		.sink_startofpacket (width_adapter_002_src_startofpacket),      //          .startofpacket
		.sink_endofpacket   (width_adapter_002_src_endofpacket),        //          .endofpacket
		.sink_valid         (width_adapter_002_src_valid),              //          .valid
		.src0_ready         (rsp_xbar_demux_004_src0_ready),            //      src0.ready
		.src0_valid         (rsp_xbar_demux_004_src0_valid),            //          .valid
		.src0_data          (rsp_xbar_demux_004_src0_data),             //          .data
		.src0_channel       (rsp_xbar_demux_004_src0_channel),          //          .channel
		.src0_startofpacket (rsp_xbar_demux_004_src0_startofpacket),    //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_004_src0_endofpacket),      //          .endofpacket
		.src1_ready         (rsp_xbar_demux_004_src1_ready),            //      src1.ready
		.src1_valid         (rsp_xbar_demux_004_src1_valid),            //          .valid
		.src1_data          (rsp_xbar_demux_004_src1_data),             //          .data
		.src1_channel       (rsp_xbar_demux_004_src1_channel),          //          .channel
		.src1_startofpacket (rsp_xbar_demux_004_src1_startofpacket),    //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_004_src1_endofpacket)       //          .endofpacket
	);

	sopc_scope_sys_mm_interconnect_0_rsp_xbar_mux rsp_xbar_mux (
		.clk                 (clk_0_clk_clk),                            //       clk.clk
		.reset               (nios_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_xbar_mux_src_ready),                   //       src.ready
		.src_valid           (rsp_xbar_mux_src_valid),                   //          .valid
		.src_data            (rsp_xbar_mux_src_data),                    //          .data
		.src_channel         (rsp_xbar_mux_src_channel),                 //          .channel
		.src_startofpacket   (rsp_xbar_mux_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (rsp_xbar_mux_src_endofpacket),             //          .endofpacket
		.sink0_ready         (rsp_xbar_demux_src0_ready),                //     sink0.ready
		.sink0_valid         (rsp_xbar_demux_src0_valid),                //          .valid
		.sink0_channel       (rsp_xbar_demux_src0_channel),              //          .channel
		.sink0_data          (rsp_xbar_demux_src0_data),                 //          .data
		.sink0_startofpacket (rsp_xbar_demux_src0_startofpacket),        //          .startofpacket
		.sink0_endofpacket   (rsp_xbar_demux_src0_endofpacket),          //          .endofpacket
		.sink1_ready         (rsp_xbar_demux_001_src0_ready),            //     sink1.ready
		.sink1_valid         (rsp_xbar_demux_001_src0_valid),            //          .valid
		.sink1_channel       (rsp_xbar_demux_001_src0_channel),          //          .channel
		.sink1_data          (rsp_xbar_demux_001_src0_data),             //          .data
		.sink1_startofpacket (rsp_xbar_demux_001_src0_startofpacket),    //          .startofpacket
		.sink1_endofpacket   (rsp_xbar_demux_001_src0_endofpacket),      //          .endofpacket
		.sink2_ready         (rsp_xbar_demux_002_src0_ready),            //     sink2.ready
		.sink2_valid         (rsp_xbar_demux_002_src0_valid),            //          .valid
		.sink2_channel       (rsp_xbar_demux_002_src0_channel),          //          .channel
		.sink2_data          (rsp_xbar_demux_002_src0_data),             //          .data
		.sink2_startofpacket (rsp_xbar_demux_002_src0_startofpacket),    //          .startofpacket
		.sink2_endofpacket   (rsp_xbar_demux_002_src0_endofpacket),      //          .endofpacket
		.sink3_ready         (rsp_xbar_demux_003_src0_ready),            //     sink3.ready
		.sink3_valid         (rsp_xbar_demux_003_src0_valid),            //          .valid
		.sink3_channel       (rsp_xbar_demux_003_src0_channel),          //          .channel
		.sink3_data          (rsp_xbar_demux_003_src0_data),             //          .data
		.sink3_startofpacket (rsp_xbar_demux_003_src0_startofpacket),    //          .startofpacket
		.sink3_endofpacket   (rsp_xbar_demux_003_src0_endofpacket),      //          .endofpacket
		.sink4_ready         (rsp_xbar_demux_004_src0_ready),            //     sink4.ready
		.sink4_valid         (rsp_xbar_demux_004_src0_valid),            //          .valid
		.sink4_channel       (rsp_xbar_demux_004_src0_channel),          //          .channel
		.sink4_data          (rsp_xbar_demux_004_src0_data),             //          .data
		.sink4_startofpacket (rsp_xbar_demux_004_src0_startofpacket),    //          .startofpacket
		.sink4_endofpacket   (rsp_xbar_demux_004_src0_endofpacket)       //          .endofpacket
	);

	sopc_scope_sys_mm_interconnect_0_rsp_xbar_mux_001 rsp_xbar_mux_001 (
		.clk                 (clk_0_clk_clk),                            //       clk.clk
		.reset               (nios_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_xbar_mux_001_src_ready),               //       src.ready
		.src_valid           (rsp_xbar_mux_001_src_valid),               //          .valid
		.src_data            (rsp_xbar_mux_001_src_data),                //          .data
		.src_channel         (rsp_xbar_mux_001_src_channel),             //          .channel
		.src_startofpacket   (rsp_xbar_mux_001_src_startofpacket),       //          .startofpacket
		.src_endofpacket     (rsp_xbar_mux_001_src_endofpacket),         //          .endofpacket
		.sink0_ready         (rsp_xbar_demux_src1_ready),                //     sink0.ready
		.sink0_valid         (rsp_xbar_demux_src1_valid),                //          .valid
		.sink0_channel       (rsp_xbar_demux_src1_channel),              //          .channel
		.sink0_data          (rsp_xbar_demux_src1_data),                 //          .data
		.sink0_startofpacket (rsp_xbar_demux_src1_startofpacket),        //          .startofpacket
		.sink0_endofpacket   (rsp_xbar_demux_src1_endofpacket),          //          .endofpacket
		.sink1_ready         (rsp_xbar_demux_001_src1_ready),            //     sink1.ready
		.sink1_valid         (rsp_xbar_demux_001_src1_valid),            //          .valid
		.sink1_channel       (rsp_xbar_demux_001_src1_channel),          //          .channel
		.sink1_data          (rsp_xbar_demux_001_src1_data),             //          .data
		.sink1_startofpacket (rsp_xbar_demux_001_src1_startofpacket),    //          .startofpacket
		.sink1_endofpacket   (rsp_xbar_demux_001_src1_endofpacket),      //          .endofpacket
		.sink2_ready         (rsp_xbar_demux_003_src1_ready),            //     sink2.ready
		.sink2_valid         (rsp_xbar_demux_003_src1_valid),            //          .valid
		.sink2_channel       (rsp_xbar_demux_003_src1_channel),          //          .channel
		.sink2_data          (rsp_xbar_demux_003_src1_data),             //          .data
		.sink2_startofpacket (rsp_xbar_demux_003_src1_startofpacket),    //          .startofpacket
		.sink2_endofpacket   (rsp_xbar_demux_003_src1_endofpacket),      //          .endofpacket
		.sink3_ready         (rsp_xbar_demux_004_src1_ready),            //     sink3.ready
		.sink3_valid         (rsp_xbar_demux_004_src1_valid),            //          .valid
		.sink3_channel       (rsp_xbar_demux_004_src1_channel),          //          .channel
		.sink3_data          (rsp_xbar_demux_004_src1_data),             //          .data
		.sink3_startofpacket (rsp_xbar_demux_004_src1_startofpacket),    //          .startofpacket
		.sink3_endofpacket   (rsp_xbar_demux_004_src1_endofpacket)       //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (29),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (38),
		.IN_PKT_BYTE_CNT_L             (36),
		.IN_PKT_TRANS_COMPRESSED_READ  (30),
		.IN_PKT_BURSTWRAP_H            (41),
		.IN_PKT_BURSTWRAP_L            (39),
		.IN_PKT_BURST_SIZE_H           (44),
		.IN_PKT_BURST_SIZE_L           (42),
		.IN_PKT_RESPONSE_STATUS_H      (66),
		.IN_PKT_RESPONSE_STATUS_L      (65),
		.IN_PKT_TRANS_EXCLUSIVE        (35),
		.IN_PKT_BURST_TYPE_H           (46),
		.IN_PKT_BURST_TYPE_L           (45),
		.IN_PKT_ORI_BURST_SIZE_L       (67),
		.IN_PKT_ORI_BURST_SIZE_H       (69),
		.IN_ST_DATA_W                  (70),
		.OUT_PKT_ADDR_H                (56),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (65),
		.OUT_PKT_BYTE_CNT_L            (63),
		.OUT_PKT_TRANS_COMPRESSED_READ (57),
		.OUT_PKT_BURST_SIZE_H          (71),
		.OUT_PKT_BURST_SIZE_L          (69),
		.OUT_PKT_RESPONSE_STATUS_H     (93),
		.OUT_PKT_RESPONSE_STATUS_L     (92),
		.OUT_PKT_TRANS_EXCLUSIVE       (62),
		.OUT_PKT_BURST_TYPE_H          (73),
		.OUT_PKT_BURST_TYPE_L          (72),
		.OUT_PKT_ORI_BURST_SIZE_L      (94),
		.OUT_PKT_ORI_BURST_SIZE_H      (96),
		.OUT_ST_DATA_W                 (97),
		.ST_CHANNEL_W                  (5),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1)
	) width_adapter (
		.clk                  (clk_0_clk_clk),                            //       clk.clk
		.reset                (nios_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (id_router_src_valid),                      //      sink.valid
		.in_channel           (id_router_src_channel),                    //          .channel
		.in_startofpacket     (id_router_src_startofpacket),              //          .startofpacket
		.in_endofpacket       (id_router_src_endofpacket),                //          .endofpacket
		.in_ready             (id_router_src_ready),                      //          .ready
		.in_data              (id_router_src_data),                       //          .data
		.out_endofpacket      (width_adapter_src_endofpacket),            //       src.endofpacket
		.out_data             (width_adapter_src_data),                   //          .data
		.out_channel          (width_adapter_src_channel),                //          .channel
		.out_valid            (width_adapter_src_valid),                  //          .valid
		.out_ready            (width_adapter_src_ready),                  //          .ready
		.out_startofpacket    (width_adapter_src_startofpacket),          //          .startofpacket
		.in_command_size_data (3'b000)                                    // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (29),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (38),
		.IN_PKT_BYTE_CNT_L             (36),
		.IN_PKT_TRANS_COMPRESSED_READ  (30),
		.IN_PKT_BURSTWRAP_H            (41),
		.IN_PKT_BURSTWRAP_L            (39),
		.IN_PKT_BURST_SIZE_H           (44),
		.IN_PKT_BURST_SIZE_L           (42),
		.IN_PKT_RESPONSE_STATUS_H      (66),
		.IN_PKT_RESPONSE_STATUS_L      (65),
		.IN_PKT_TRANS_EXCLUSIVE        (35),
		.IN_PKT_BURST_TYPE_H           (46),
		.IN_PKT_BURST_TYPE_L           (45),
		.IN_PKT_ORI_BURST_SIZE_L       (67),
		.IN_PKT_ORI_BURST_SIZE_H       (69),
		.IN_ST_DATA_W                  (70),
		.OUT_PKT_ADDR_H                (56),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (65),
		.OUT_PKT_BYTE_CNT_L            (63),
		.OUT_PKT_TRANS_COMPRESSED_READ (57),
		.OUT_PKT_BURST_SIZE_H          (71),
		.OUT_PKT_BURST_SIZE_L          (69),
		.OUT_PKT_RESPONSE_STATUS_H     (93),
		.OUT_PKT_RESPONSE_STATUS_L     (92),
		.OUT_PKT_TRANS_EXCLUSIVE       (62),
		.OUT_PKT_BURST_TYPE_H          (73),
		.OUT_PKT_BURST_TYPE_L          (72),
		.OUT_PKT_ORI_BURST_SIZE_L      (94),
		.OUT_PKT_ORI_BURST_SIZE_H      (96),
		.OUT_ST_DATA_W                 (97),
		.ST_CHANNEL_W                  (5),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1)
	) width_adapter_001 (
		.clk                  (clk_0_clk_clk),                            //       clk.clk
		.reset                (nios_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (id_router_003_src_valid),                  //      sink.valid
		.in_channel           (id_router_003_src_channel),                //          .channel
		.in_startofpacket     (id_router_003_src_startofpacket),          //          .startofpacket
		.in_endofpacket       (id_router_003_src_endofpacket),            //          .endofpacket
		.in_ready             (id_router_003_src_ready),                  //          .ready
		.in_data              (id_router_003_src_data),                   //          .data
		.out_endofpacket      (width_adapter_001_src_endofpacket),        //       src.endofpacket
		.out_data             (width_adapter_001_src_data),               //          .data
		.out_channel          (width_adapter_001_src_channel),            //          .channel
		.out_valid            (width_adapter_001_src_valid),              //          .valid
		.out_ready            (width_adapter_001_src_ready),              //          .ready
		.out_startofpacket    (width_adapter_001_src_startofpacket),      //          .startofpacket
		.in_command_size_data (3'b000)                                    // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (29),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (38),
		.IN_PKT_BYTE_CNT_L             (36),
		.IN_PKT_TRANS_COMPRESSED_READ  (30),
		.IN_PKT_BURSTWRAP_H            (41),
		.IN_PKT_BURSTWRAP_L            (39),
		.IN_PKT_BURST_SIZE_H           (44),
		.IN_PKT_BURST_SIZE_L           (42),
		.IN_PKT_RESPONSE_STATUS_H      (66),
		.IN_PKT_RESPONSE_STATUS_L      (65),
		.IN_PKT_TRANS_EXCLUSIVE        (35),
		.IN_PKT_BURST_TYPE_H           (46),
		.IN_PKT_BURST_TYPE_L           (45),
		.IN_PKT_ORI_BURST_SIZE_L       (67),
		.IN_PKT_ORI_BURST_SIZE_H       (69),
		.IN_ST_DATA_W                  (70),
		.OUT_PKT_ADDR_H                (56),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (65),
		.OUT_PKT_BYTE_CNT_L            (63),
		.OUT_PKT_TRANS_COMPRESSED_READ (57),
		.OUT_PKT_BURST_SIZE_H          (71),
		.OUT_PKT_BURST_SIZE_L          (69),
		.OUT_PKT_RESPONSE_STATUS_H     (93),
		.OUT_PKT_RESPONSE_STATUS_L     (92),
		.OUT_PKT_TRANS_EXCLUSIVE       (62),
		.OUT_PKT_BURST_TYPE_H          (73),
		.OUT_PKT_BURST_TYPE_L          (72),
		.OUT_PKT_ORI_BURST_SIZE_L      (94),
		.OUT_PKT_ORI_BURST_SIZE_H      (96),
		.OUT_ST_DATA_W                 (97),
		.ST_CHANNEL_W                  (5),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1)
	) width_adapter_002 (
		.clk                  (clk_0_clk_clk),                            //       clk.clk
		.reset                (nios_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (id_router_004_src_valid),                  //      sink.valid
		.in_channel           (id_router_004_src_channel),                //          .channel
		.in_startofpacket     (id_router_004_src_startofpacket),          //          .startofpacket
		.in_endofpacket       (id_router_004_src_endofpacket),            //          .endofpacket
		.in_ready             (id_router_004_src_ready),                  //          .ready
		.in_data              (id_router_004_src_data),                   //          .data
		.out_endofpacket      (width_adapter_002_src_endofpacket),        //       src.endofpacket
		.out_data             (width_adapter_002_src_data),               //          .data
		.out_channel          (width_adapter_002_src_channel),            //          .channel
		.out_valid            (width_adapter_002_src_valid),              //          .valid
		.out_ready            (width_adapter_002_src_ready),              //          .ready
		.out_startofpacket    (width_adapter_002_src_startofpacket),      //          .startofpacket
		.in_command_size_data (3'b000)                                    // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (56),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (65),
		.IN_PKT_BYTE_CNT_L             (63),
		.IN_PKT_TRANS_COMPRESSED_READ  (57),
		.IN_PKT_BURSTWRAP_H            (68),
		.IN_PKT_BURSTWRAP_L            (66),
		.IN_PKT_BURST_SIZE_H           (71),
		.IN_PKT_BURST_SIZE_L           (69),
		.IN_PKT_RESPONSE_STATUS_H      (93),
		.IN_PKT_RESPONSE_STATUS_L      (92),
		.IN_PKT_TRANS_EXCLUSIVE        (62),
		.IN_PKT_BURST_TYPE_H           (73),
		.IN_PKT_BURST_TYPE_L           (72),
		.IN_PKT_ORI_BURST_SIZE_L       (94),
		.IN_PKT_ORI_BURST_SIZE_H       (96),
		.IN_ST_DATA_W                  (97),
		.OUT_PKT_ADDR_H                (29),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (38),
		.OUT_PKT_BYTE_CNT_L            (36),
		.OUT_PKT_TRANS_COMPRESSED_READ (30),
		.OUT_PKT_BURST_SIZE_H          (44),
		.OUT_PKT_BURST_SIZE_L          (42),
		.OUT_PKT_RESPONSE_STATUS_H     (66),
		.OUT_PKT_RESPONSE_STATUS_L     (65),
		.OUT_PKT_TRANS_EXCLUSIVE       (35),
		.OUT_PKT_BURST_TYPE_H          (46),
		.OUT_PKT_BURST_TYPE_L          (45),
		.OUT_PKT_ORI_BURST_SIZE_L      (67),
		.OUT_PKT_ORI_BURST_SIZE_H      (69),
		.OUT_ST_DATA_W                 (70),
		.ST_CHANNEL_W                  (5),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1)
	) width_adapter_003 (
		.clk                  (clk_0_clk_clk),                            //       clk.clk
		.reset                (nios_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (cmd_xbar_mux_src_valid),                   //      sink.valid
		.in_channel           (cmd_xbar_mux_src_channel),                 //          .channel
		.in_startofpacket     (cmd_xbar_mux_src_startofpacket),           //          .startofpacket
		.in_endofpacket       (cmd_xbar_mux_src_endofpacket),             //          .endofpacket
		.in_ready             (cmd_xbar_mux_src_ready),                   //          .ready
		.in_data              (cmd_xbar_mux_src_data),                    //          .data
		.out_endofpacket      (width_adapter_003_src_endofpacket),        //       src.endofpacket
		.out_data             (width_adapter_003_src_data),               //          .data
		.out_channel          (width_adapter_003_src_channel),            //          .channel
		.out_valid            (width_adapter_003_src_valid),              //          .valid
		.out_ready            (width_adapter_003_src_ready),              //          .ready
		.out_startofpacket    (width_adapter_003_src_startofpacket),      //          .startofpacket
		.in_command_size_data (3'b000)                                    // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (56),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (65),
		.IN_PKT_BYTE_CNT_L             (63),
		.IN_PKT_TRANS_COMPRESSED_READ  (57),
		.IN_PKT_BURSTWRAP_H            (68),
		.IN_PKT_BURSTWRAP_L            (66),
		.IN_PKT_BURST_SIZE_H           (71),
		.IN_PKT_BURST_SIZE_L           (69),
		.IN_PKT_RESPONSE_STATUS_H      (93),
		.IN_PKT_RESPONSE_STATUS_L      (92),
		.IN_PKT_TRANS_EXCLUSIVE        (62),
		.IN_PKT_BURST_TYPE_H           (73),
		.IN_PKT_BURST_TYPE_L           (72),
		.IN_PKT_ORI_BURST_SIZE_L       (94),
		.IN_PKT_ORI_BURST_SIZE_H       (96),
		.IN_ST_DATA_W                  (97),
		.OUT_PKT_ADDR_H                (29),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (38),
		.OUT_PKT_BYTE_CNT_L            (36),
		.OUT_PKT_TRANS_COMPRESSED_READ (30),
		.OUT_PKT_BURST_SIZE_H          (44),
		.OUT_PKT_BURST_SIZE_L          (42),
		.OUT_PKT_RESPONSE_STATUS_H     (66),
		.OUT_PKT_RESPONSE_STATUS_L     (65),
		.OUT_PKT_TRANS_EXCLUSIVE       (35),
		.OUT_PKT_BURST_TYPE_H          (46),
		.OUT_PKT_BURST_TYPE_L          (45),
		.OUT_PKT_ORI_BURST_SIZE_L      (67),
		.OUT_PKT_ORI_BURST_SIZE_H      (69),
		.OUT_ST_DATA_W                 (70),
		.ST_CHANNEL_W                  (5),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1)
	) width_adapter_004 (
		.clk                  (clk_0_clk_clk),                            //       clk.clk
		.reset                (nios_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (cmd_xbar_mux_003_src_valid),               //      sink.valid
		.in_channel           (cmd_xbar_mux_003_src_channel),             //          .channel
		.in_startofpacket     (cmd_xbar_mux_003_src_startofpacket),       //          .startofpacket
		.in_endofpacket       (cmd_xbar_mux_003_src_endofpacket),         //          .endofpacket
		.in_ready             (cmd_xbar_mux_003_src_ready),               //          .ready
		.in_data              (cmd_xbar_mux_003_src_data),                //          .data
		.out_endofpacket      (width_adapter_004_src_endofpacket),        //       src.endofpacket
		.out_data             (width_adapter_004_src_data),               //          .data
		.out_channel          (width_adapter_004_src_channel),            //          .channel
		.out_valid            (width_adapter_004_src_valid),              //          .valid
		.out_ready            (width_adapter_004_src_ready),              //          .ready
		.out_startofpacket    (width_adapter_004_src_startofpacket),      //          .startofpacket
		.in_command_size_data (3'b000)                                    // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (56),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (65),
		.IN_PKT_BYTE_CNT_L             (63),
		.IN_PKT_TRANS_COMPRESSED_READ  (57),
		.IN_PKT_BURSTWRAP_H            (68),
		.IN_PKT_BURSTWRAP_L            (66),
		.IN_PKT_BURST_SIZE_H           (71),
		.IN_PKT_BURST_SIZE_L           (69),
		.IN_PKT_RESPONSE_STATUS_H      (93),
		.IN_PKT_RESPONSE_STATUS_L      (92),
		.IN_PKT_TRANS_EXCLUSIVE        (62),
		.IN_PKT_BURST_TYPE_H           (73),
		.IN_PKT_BURST_TYPE_L           (72),
		.IN_PKT_ORI_BURST_SIZE_L       (94),
		.IN_PKT_ORI_BURST_SIZE_H       (96),
		.IN_ST_DATA_W                  (97),
		.OUT_PKT_ADDR_H                (29),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (38),
		.OUT_PKT_BYTE_CNT_L            (36),
		.OUT_PKT_TRANS_COMPRESSED_READ (30),
		.OUT_PKT_BURST_SIZE_H          (44),
		.OUT_PKT_BURST_SIZE_L          (42),
		.OUT_PKT_RESPONSE_STATUS_H     (66),
		.OUT_PKT_RESPONSE_STATUS_L     (65),
		.OUT_PKT_TRANS_EXCLUSIVE       (35),
		.OUT_PKT_BURST_TYPE_H          (46),
		.OUT_PKT_BURST_TYPE_L          (45),
		.OUT_PKT_ORI_BURST_SIZE_L      (67),
		.OUT_PKT_ORI_BURST_SIZE_H      (69),
		.OUT_ST_DATA_W                 (70),
		.ST_CHANNEL_W                  (5),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1)
	) width_adapter_005 (
		.clk                  (clk_0_clk_clk),                            //       clk.clk
		.reset                (nios_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (cmd_xbar_mux_004_src_valid),               //      sink.valid
		.in_channel           (cmd_xbar_mux_004_src_channel),             //          .channel
		.in_startofpacket     (cmd_xbar_mux_004_src_startofpacket),       //          .startofpacket
		.in_endofpacket       (cmd_xbar_mux_004_src_endofpacket),         //          .endofpacket
		.in_ready             (cmd_xbar_mux_004_src_ready),               //          .ready
		.in_data              (cmd_xbar_mux_004_src_data),                //          .data
		.out_endofpacket      (width_adapter_005_src_endofpacket),        //       src.endofpacket
		.out_data             (width_adapter_005_src_data),               //          .data
		.out_channel          (width_adapter_005_src_channel),            //          .channel
		.out_valid            (width_adapter_005_src_valid),              //          .valid
		.out_ready            (width_adapter_005_src_ready),              //          .ready
		.out_startofpacket    (width_adapter_005_src_startofpacket),      //          .startofpacket
		.in_command_size_data (3'b000)                                    // (terminated)
	);

endmodule
